{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/core-js/internals/global.js","webpack:///./node_modules/core-js/internals/fails.js","webpack:///./node_modules/core-js/internals/is-object.js","webpack:///./node_modules/core-js/internals/has.js","webpack:///./node_modules/core-js/internals/descriptors.js","webpack:///./node_modules/core-js/internals/object-define-property.js","webpack:///./node_modules/core-js/internals/an-object.js","webpack:///./node_modules/core-js/internals/create-non-enumerable-property.js","webpack:///./node_modules/core-js/internals/to-primitive.js","webpack:///./node_modules/core-js/internals/to-indexed-object.js","webpack:///./node_modules/core-js/internals/create-property-descriptor.js","webpack:///./node_modules/core-js/internals/set-global.js","webpack:///./node_modules/core-js/internals/hidden-keys.js","webpack:///./node_modules/core-js/internals/classof-raw.js","webpack:///./node_modules/core-js/internals/require-object-coercible.js","webpack:///./node_modules/core-js/internals/to-length.js","webpack:///./node_modules/core-js/internals/to-integer.js","webpack:///./node_modules/core-js/internals/to-absolute-index.js","webpack:///./node_modules/core-js/internals/enum-bug-keys.js","webpack:///./node_modules/core-js/internals/get-built-in.js","webpack:///./node_modules/core-js/internals/object-get-own-property-descriptor.js","webpack:///./node_modules/core-js/internals/export.js","webpack:///./node_modules/core-js/internals/well-known-symbol.js","webpack:///./node_modules/core-js/internals/is-forced.js","webpack:///./node_modules/core-js/internals/redefine.js","webpack:///./node_modules/core-js/internals/ie8-dom-define.js","webpack:///./node_modules/core-js/internals/document-create-element.js","webpack:///./node_modules/core-js/internals/inspect-source.js","webpack:///./node_modules/core-js/internals/shared-store.js","webpack:///./node_modules/core-js/internals/shared-key.js","webpack:///./node_modules/core-js/internals/shared.js","webpack:///./node_modules/core-js/internals/uid.js","webpack:///./node_modules/core-js/internals/object-keys-internal.js","webpack:///./node_modules/core-js/internals/object-get-own-property-names.js","webpack:///./node_modules/core-js/internals/is-array.js","webpack:///./node_modules/core-js/internals/create-property.js","webpack:///./node_modules/core-js/internals/native-symbol.js","webpack:///./node_modules/core-js/internals/array-method-has-species-support.js","webpack:///./node_modules/core-js/internals/array-method-uses-to-length.js","webpack:///./node_modules/component-emitter/index.js","webpack:///./tests/tests.js","webpack:///./node_modules/core-js/modules/es.number.constructor.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/core-js/internals/internal-state.js","webpack:///./node_modules/core-js/internals/native-weak-map.js","webpack:///./node_modules/core-js/internals/is-pure.js","webpack:///./node_modules/core-js/internals/inherit-if-required.js","webpack:///./node_modules/core-js/internals/object-set-prototype-of.js","webpack:///./node_modules/core-js/internals/a-possible-prototype.js","webpack:///./node_modules/core-js/internals/object-create.js","webpack:///./node_modules/core-js/internals/object-define-properties.js","webpack:///./node_modules/core-js/internals/object-keys.js","webpack:///./node_modules/core-js/internals/indexed-object.js","webpack:///./node_modules/core-js/internals/array-includes.js","webpack:///./node_modules/core-js/internals/html.js","webpack:///./node_modules/core-js/internals/path.js","webpack:///./node_modules/core-js/internals/object-property-is-enumerable.js","webpack:///./node_modules/core-js/internals/string-trim.js","webpack:///./node_modules/core-js/internals/whitespaces.js","webpack:///./node_modules/core-js/modules/es.number.max-safe-integer.js","webpack:///./node_modules/core-js/internals/copy-constructor-properties.js","webpack:///./node_modules/core-js/internals/own-keys.js","webpack:///./node_modules/core-js/internals/object-get-own-property-symbols.js","webpack:///./node_modules/core-js/modules/es.array.slice.js","webpack:///./node_modules/core-js/internals/use-symbol-as-uid.js","webpack:///./node_modules/core-js/internals/engine-v8-version.js","webpack:///./node_modules/core-js/internals/engine-user-agent.js","webpack:///./node_modules/core-js/modules/es.array.splice.js","webpack:///./node_modules/core-js/internals/to-object.js","webpack:///./node_modules/core-js/internals/array-species-create.js"],"names":["module","exports","Emitter","obj","mixin","key","prototype","on","addEventListener","event","fn","_callbacks","push","once","off","apply","arguments","removeListener","removeAllListeners","removeEventListener","length","callbacks","cb","i","splice","emit","args","Array","slice","len","listeners","hasListeners","epsilon","harnessProto","harnessFactory","options","harness","Object","create","t","emitter","transport","connect","jasmine","createSpy","send","disconnect","state","and","returnValue","spyClear","calls","reset","client","feedmeClient","createClientListener","l","connecting","badServerMessage","badClientMessage","transportError","createFeedListener","feed","opening","open","close","action","connectClient","JSON","stringify","MessageType","Success","Version","ClientId","describe","beforeEach","clock","install","it","opts","connectTimeoutMs","clientListener","tick","expect","count","toBe","argsFor","Error","toEqual","any","message","Number","MAX_SAFE_INTEGER","afterEach","uninstall","connectRetryMs","connectRetryBackoffMs","connectRetryMaxMs","ms","Math","min","j","connectRetryMaxAttempts","actionTimeoutMs","cbLate","Some","feedTimeoutMs","Feed","desireOpen","feedListener","reconnect","reopenMaxAttempts","FeedName","FeedArgs","FeedData","ActionName","ActionData","FeedDeltas","Path","Operation","reopenTrailingMs","toThrow","toBeUndefined","feedWantedOpen","feedWantedClosed","id","desiredState","data","_options","feedWantedOpenListener","feedWantedClosedListener","Versions","Action","msg","parse","ActionArgs","CallbackId","String","serverCb","ErrorCode","ErrorData","Server","serverErrorCode","serverErrorData","done","then","actionData","catch","err","destroy","earlierFeed","desireClosed","feedAlreadyWantedOpen","feedAlreadyWantedOpenListener","feedDesiredClosed","feedClosed","feedOpening","feedOpen","feedClosing","feedDesiredClosedListener","feedClosedListener","feedOpeningListener","feedOpenListener","feedClosingListener","FeedMd5","Diagnostics","Diagnostic","Value","actionNameSpy"],"mappings":"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","file":"tests.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 40);\n","var check = function (it) {\n  return it && it.Math == Math && it;\n};\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nmodule.exports =\n  // eslint-disable-next-line no-undef\n  check(typeof globalThis == 'object' && globalThis) ||\n  check(typeof window == 'object' && window) ||\n  check(typeof self == 'object' && self) ||\n  check(typeof global == 'object' && global) ||\n  // eslint-disable-next-line no-new-func\n  Function('return this')();\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (error) {\n    return true;\n  }\n};\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","var hasOwnProperty = {}.hasOwnProperty;\n\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","var fails = require('../internals/fails');\n\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !fails(function () {\n  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;\n});\n","var DESCRIPTORS = require('../internals/descriptors');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\nvar anObject = require('../internals/an-object');\nvar toPrimitive = require('../internals/to-primitive');\n\nvar nativeDefineProperty = Object.defineProperty;\n\n// `Object.defineProperty` method\n// https://tc39.github.io/ecma262/#sec-object.defineproperty\nexports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return nativeDefineProperty(O, P, Attributes);\n  } catch (error) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","var isObject = require('../internals/is-object');\n\nmodule.exports = function (it) {\n  if (!isObject(it)) {\n    throw TypeError(String(it) + ' is not an object');\n  } return it;\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar definePropertyModule = require('../internals/object-define-property');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\n\nmodule.exports = DESCRIPTORS ? function (object, key, value) {\n  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","var isObject = require('../internals/is-object');\n\n// `ToPrimitive` abstract operation\n// https://tc39.github.io/ecma262/#sec-toprimitive\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (input, PREFERRED_STRING) {\n  if (!isObject(input)) return input;\n  var fn, val;\n  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;\n  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;\n  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","// toObject with fallback for non-array-like ES3 strings\nvar IndexedObject = require('../internals/indexed-object');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nmodule.exports = function (it) {\n  return IndexedObject(requireObjectCoercible(it));\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","var global = require('../internals/global');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\nmodule.exports = function (key, value) {\n  try {\n    createNonEnumerableProperty(global, key, value);\n  } catch (error) {\n    global[key] = value;\n  } return value;\n};\n","module.exports = {};\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","// `RequireObjectCoercible` abstract operation\n// https://tc39.github.io/ecma262/#sec-requireobjectcoercible\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on \" + it);\n  return it;\n};\n","var toInteger = require('../internals/to-integer');\n\nvar min = Math.min;\n\n// `ToLength` abstract operation\n// https://tc39.github.io/ecma262/#sec-tolength\nmodule.exports = function (argument) {\n  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991\n};\n","var ceil = Math.ceil;\nvar floor = Math.floor;\n\n// `ToInteger` abstract operation\n// https://tc39.github.io/ecma262/#sec-tointeger\nmodule.exports = function (argument) {\n  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);\n};\n","var toInteger = require('../internals/to-integer');\n\nvar max = Math.max;\nvar min = Math.min;\n\n// Helper for a popular repeating case of the spec:\n// Let integer be ? ToInteger(index).\n// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\nmodule.exports = function (index, length) {\n  var integer = toInteger(index);\n  return integer < 0 ? max(integer + length, 0) : min(integer, length);\n};\n","// IE8- don't enum bug keys\nmodule.exports = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf'\n];\n","var path = require('../internals/path');\nvar global = require('../internals/global');\n\nvar aFunction = function (variable) {\n  return typeof variable == 'function' ? variable : undefined;\n};\n\nmodule.exports = function (namespace, method) {\n  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace])\n    : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar toPrimitive = require('../internals/to-primitive');\nvar has = require('../internals/has');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\n\nvar nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// `Object.getOwnPropertyDescriptor` method\n// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor\nexports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {\n  O = toIndexedObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return nativeGetOwnPropertyDescriptor(O, P);\n  } catch (error) { /* empty */ }\n  if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);\n};\n","var global = require('../internals/global');\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar redefine = require('../internals/redefine');\nvar setGlobal = require('../internals/set-global');\nvar copyConstructorProperties = require('../internals/copy-constructor-properties');\nvar isForced = require('../internals/is-forced');\n\n/*\n  options.target      - name of the target object\n  options.global      - target is the global object\n  options.stat        - export as static methods of target\n  options.proto       - export as prototype methods of target\n  options.real        - real prototype method for the `pure` version\n  options.forced      - export even if the native feature is available\n  options.bind        - bind methods to the target, required for the `pure` version\n  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version\n  options.unsafe      - use the simple assignment of property instead of delete + defineProperty\n  options.sham        - add a flag to not completely full polyfills\n  options.enumerable  - export as enumerable property\n  options.noTargetGet - prevent calling a getter on target\n*/\nmodule.exports = function (options, source) {\n  var TARGET = options.target;\n  var GLOBAL = options.global;\n  var STATIC = options.stat;\n  var FORCED, target, key, targetProperty, sourceProperty, descriptor;\n  if (GLOBAL) {\n    target = global;\n  } else if (STATIC) {\n    target = global[TARGET] || setGlobal(TARGET, {});\n  } else {\n    target = (global[TARGET] || {}).prototype;\n  }\n  if (target) for (key in source) {\n    sourceProperty = source[key];\n    if (options.noTargetGet) {\n      descriptor = getOwnPropertyDescriptor(target, key);\n      targetProperty = descriptor && descriptor.value;\n    } else targetProperty = target[key];\n    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);\n    // contained in target\n    if (!FORCED && targetProperty !== undefined) {\n      if (typeof sourceProperty === typeof targetProperty) continue;\n      copyConstructorProperties(sourceProperty, targetProperty);\n    }\n    // add a flag to not completely full polyfills\n    if (options.sham || (targetProperty && targetProperty.sham)) {\n      createNonEnumerableProperty(sourceProperty, 'sham', true);\n    }\n    // extend global\n    redefine(target, key, sourceProperty, options);\n  }\n};\n","var global = require('../internals/global');\nvar shared = require('../internals/shared');\nvar has = require('../internals/has');\nvar uid = require('../internals/uid');\nvar NATIVE_SYMBOL = require('../internals/native-symbol');\nvar USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');\n\nvar WellKnownSymbolsStore = shared('wks');\nvar Symbol = global.Symbol;\nvar createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;\n\nmodule.exports = function (name) {\n  if (!has(WellKnownSymbolsStore, name)) {\n    if (NATIVE_SYMBOL && has(Symbol, name)) WellKnownSymbolsStore[name] = Symbol[name];\n    else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);\n  } return WellKnownSymbolsStore[name];\n};\n","var fails = require('../internals/fails');\n\nvar replacement = /#|\\.prototype\\./;\n\nvar isForced = function (feature, detection) {\n  var value = data[normalize(feature)];\n  return value == POLYFILL ? true\n    : value == NATIVE ? false\n    : typeof detection == 'function' ? fails(detection)\n    : !!detection;\n};\n\nvar normalize = isForced.normalize = function (string) {\n  return String(string).replace(replacement, '.').toLowerCase();\n};\n\nvar data = isForced.data = {};\nvar NATIVE = isForced.NATIVE = 'N';\nvar POLYFILL = isForced.POLYFILL = 'P';\n\nmodule.exports = isForced;\n","var global = require('../internals/global');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar has = require('../internals/has');\nvar setGlobal = require('../internals/set-global');\nvar inspectSource = require('../internals/inspect-source');\nvar InternalStateModule = require('../internals/internal-state');\n\nvar getInternalState = InternalStateModule.get;\nvar enforceInternalState = InternalStateModule.enforce;\nvar TEMPLATE = String(String).split('String');\n\n(module.exports = function (O, key, value, options) {\n  var unsafe = options ? !!options.unsafe : false;\n  var simple = options ? !!options.enumerable : false;\n  var noTargetGet = options ? !!options.noTargetGet : false;\n  if (typeof value == 'function') {\n    if (typeof key == 'string' && !has(value, 'name')) createNonEnumerableProperty(value, 'name', key);\n    enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');\n  }\n  if (O === global) {\n    if (simple) O[key] = value;\n    else setGlobal(key, value);\n    return;\n  } else if (!unsafe) {\n    delete O[key];\n  } else if (!noTargetGet && O[key]) {\n    simple = true;\n  }\n  if (simple) O[key] = value;\n  else createNonEnumerableProperty(O, key, value);\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, 'toString', function toString() {\n  return typeof this == 'function' && getInternalState(this).source || inspectSource(this);\n});\n","var DESCRIPTORS = require('../internals/descriptors');\nvar fails = require('../internals/fails');\nvar createElement = require('../internals/document-create-element');\n\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !DESCRIPTORS && !fails(function () {\n  return Object.defineProperty(createElement('div'), 'a', {\n    get: function () { return 7; }\n  }).a != 7;\n});\n","var global = require('../internals/global');\nvar isObject = require('../internals/is-object');\n\nvar document = global.document;\n// typeof document.createElement is 'object' in old IE\nvar EXISTS = isObject(document) && isObject(document.createElement);\n\nmodule.exports = function (it) {\n  return EXISTS ? document.createElement(it) : {};\n};\n","var store = require('../internals/shared-store');\n\nvar functionToString = Function.toString;\n\n// this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper\nif (typeof store.inspectSource != 'function') {\n  store.inspectSource = function (it) {\n    return functionToString.call(it);\n  };\n}\n\nmodule.exports = store.inspectSource;\n","var global = require('../internals/global');\nvar setGlobal = require('../internals/set-global');\n\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || setGlobal(SHARED, {});\n\nmodule.exports = store;\n","var shared = require('../internals/shared');\nvar uid = require('../internals/uid');\n\nvar keys = shared('keys');\n\nmodule.exports = function (key) {\n  return keys[key] || (keys[key] = uid(key));\n};\n","var IS_PURE = require('../internals/is-pure');\nvar store = require('../internals/shared-store');\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: '3.6.5',\n  mode: IS_PURE ? 'pure' : 'global',\n  copyright: '© 2020 Denis Pushkarev (zloirock.ru)'\n});\n","var id = 0;\nvar postfix = Math.random();\n\nmodule.exports = function (key) {\n  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);\n};\n","var has = require('../internals/has');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar indexOf = require('../internals/array-includes').indexOf;\nvar hiddenKeys = require('../internals/hidden-keys');\n\nmodule.exports = function (object, names) {\n  var O = toIndexedObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~indexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","var internalObjectKeys = require('../internals/object-keys-internal');\nvar enumBugKeys = require('../internals/enum-bug-keys');\n\nvar hiddenKeys = enumBugKeys.concat('length', 'prototype');\n\n// `Object.getOwnPropertyNames` method\n// https://tc39.github.io/ecma262/#sec-object.getownpropertynames\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return internalObjectKeys(O, hiddenKeys);\n};\n","var classof = require('../internals/classof-raw');\n\n// `IsArray` abstract operation\n// https://tc39.github.io/ecma262/#sec-isarray\nmodule.exports = Array.isArray || function isArray(arg) {\n  return classof(arg) == 'Array';\n};\n","'use strict';\nvar toPrimitive = require('../internals/to-primitive');\nvar definePropertyModule = require('../internals/object-define-property');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\n\nmodule.exports = function (object, key, value) {\n  var propertyKey = toPrimitive(key);\n  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));\n  else object[propertyKey] = value;\n};\n","var fails = require('../internals/fails');\n\nmodule.exports = !!Object.getOwnPropertySymbols && !fails(function () {\n  // Chrome 38 Symbol has incorrect toString conversion\n  // eslint-disable-next-line no-undef\n  return !String(Symbol());\n});\n","var fails = require('../internals/fails');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar V8_VERSION = require('../internals/engine-v8-version');\n\nvar SPECIES = wellKnownSymbol('species');\n\nmodule.exports = function (METHOD_NAME) {\n  // We can't use this feature detection in V8 since it causes\n  // deoptimization and serious performance degradation\n  // https://github.com/zloirock/core-js/issues/677\n  return V8_VERSION >= 51 || !fails(function () {\n    var array = [];\n    var constructor = array.constructor = {};\n    constructor[SPECIES] = function () {\n      return { foo: 1 };\n    };\n    return array[METHOD_NAME](Boolean).foo !== 1;\n  });\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar fails = require('../internals/fails');\nvar has = require('../internals/has');\n\nvar defineProperty = Object.defineProperty;\nvar cache = {};\n\nvar thrower = function (it) { throw it; };\n\nmodule.exports = function (METHOD_NAME, options) {\n  if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];\n  if (!options) options = {};\n  var method = [][METHOD_NAME];\n  var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;\n  var argument0 = has(options, 0) ? options[0] : thrower;\n  var argument1 = has(options, 1) ? options[1] : undefined;\n\n  return cache[METHOD_NAME] = !!method && !fails(function () {\n    if (ACCESSORS && !DESCRIPTORS) return true;\n    var O = { length: -1 };\n\n    if (ACCESSORS) defineProperty(O, 1, { enumerable: true, get: thrower });\n    else O[1] = 1;\n\n    method.call(O, argument0, argument1);\n  });\n};\n","\r\n/**\r\n * Expose `Emitter`.\r\n */\r\n\r\nif (typeof module !== 'undefined') {\r\n  module.exports = Emitter;\r\n}\r\n\r\n/**\r\n * Initialize a new `Emitter`.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction Emitter(obj) {\r\n  if (obj) return mixin(obj);\r\n};\r\n\r\n/**\r\n * Mixin the emitter properties.\r\n *\r\n * @param {Object} obj\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction mixin(obj) {\r\n  for (var key in Emitter.prototype) {\r\n    obj[key] = Emitter.prototype[key];\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Listen on the given `event` with `fn`.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.on =\r\nEmitter.prototype.addEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\r\n    .push(fn);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Adds an `event` listener that will be invoked a single\r\n * time then automatically removed.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.once = function(event, fn){\r\n  function on() {\r\n    this.off(event, on);\r\n    fn.apply(this, arguments);\r\n  }\r\n\r\n  on.fn = fn;\r\n  this.on(event, on);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Remove the given callback for `event` or all\r\n * registered callbacks.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.off =\r\nEmitter.prototype.removeListener =\r\nEmitter.prototype.removeAllListeners =\r\nEmitter.prototype.removeEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n\r\n  // all\r\n  if (0 == arguments.length) {\r\n    this._callbacks = {};\r\n    return this;\r\n  }\r\n\r\n  // specific event\r\n  var callbacks = this._callbacks['$' + event];\r\n  if (!callbacks) return this;\r\n\r\n  // remove all handlers\r\n  if (1 == arguments.length) {\r\n    delete this._callbacks['$' + event];\r\n    return this;\r\n  }\r\n\r\n  // remove specific handler\r\n  var cb;\r\n  for (var i = 0; i < callbacks.length; i++) {\r\n    cb = callbacks[i];\r\n    if (cb === fn || cb.fn === fn) {\r\n      callbacks.splice(i, 1);\r\n      break;\r\n    }\r\n  }\r\n\r\n  // Remove event specific arrays for event types that no\r\n  // one is subscribed for to avoid memory leak.\r\n  if (callbacks.length === 0) {\r\n    delete this._callbacks['$' + event];\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Emit `event` with the given args.\r\n *\r\n * @param {String} event\r\n * @param {Mixed} ...\r\n * @return {Emitter}\r\n */\r\n\r\nEmitter.prototype.emit = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n\r\n  var args = new Array(arguments.length - 1)\r\n    , callbacks = this._callbacks['$' + event];\r\n\r\n  for (var i = 1; i < arguments.length; i++) {\r\n    args[i - 1] = arguments[i];\r\n  }\r\n\r\n  if (callbacks) {\r\n    callbacks = callbacks.slice(0);\r\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\r\n      callbacks[i].apply(this, args);\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Return array of callbacks for `event`.\r\n *\r\n * @param {String} event\r\n * @return {Array}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.listeners = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  return this._callbacks['$' + event] || [];\r\n};\r\n\r\n/**\r\n * Check if this emitter has `event` handlers.\r\n *\r\n * @param {String} event\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.hasListeners = function(event){\r\n  return !! this.listeners(event).length;\r\n};\r\n","import emitter from \"component-emitter\";\n\n/* global feedmeClient */\n/*\n\nBuild integration/functional tests run on Node and in the browser.\nAssume an in-scope feedmeClient() factory function.\n\nTests API promises in the user documentation, ensures that the client\ninteracts appropriately with the transport, and ensures that messages\nsend via the transport abide by the Feedme spec.\n\n1. Do configuration options work as documented?\n2. Do app-initiated operations work as documented?\n3. Do transport-initiated operations work as documented?\n\nThere is no access to external modules (also runs in the browser), so\nbasic event emitter functionality for the transport is included inline.\n\n*/\nconst epsilon = 1;\n\nconst harnessProto = {};\nconst harnessFactory = options => {\n  // Mock transport is added to any other specified options\n  options = options || {}; // eslint-disable-line no-param-reassign\n  const harness = Object.create(harnessProto);\n\n  // Create the transport basics\n  const t = emitter({});\n  harness.transport = t;\n  options.transport = t; // eslint-disable-line no-param-reassign\n\n  // Transport spies\n  t.connect = jasmine.createSpy();\n  t.send = jasmine.createSpy();\n  t.disconnect = jasmine.createSpy();\n  t.state = jasmine.createSpy();\n  t.state.and.returnValue(\"disconnected\");\n  t.spyClear = () => {\n    t.connect.calls.reset();\n    t.send.calls.reset();\n    t.disconnect.calls.reset();\n    t.state.calls.reset();\n  };\n\n  // Create the client\n  harness.client = feedmeClient(options);\n\n  return harness;\n};\n\nharnessProto.createClientListener = function createClientListener() {\n  const l = {\n    connecting: jasmine.createSpy(),\n    connect: jasmine.createSpy(),\n    disconnect: jasmine.createSpy(),\n    badServerMessage: jasmine.createSpy(),\n    badClientMessage: jasmine.createSpy(),\n    transportError: jasmine.createSpy()\n  };\n  l.spyClear = () => {\n    l.connecting.calls.reset();\n    l.connect.calls.reset();\n    l.disconnect.calls.reset();\n    l.badServerMessage.calls.reset();\n    l.badClientMessage.calls.reset();\n    l.transportError.calls.reset();\n  };\n  this.client.on(\"connecting\", l.connecting);\n  this.client.on(\"connect\", l.connect);\n  this.client.on(\"disconnect\", l.disconnect);\n  this.client.on(\"badServerMessage\", l.badServerMessage);\n  this.client.on(\"badClientMessage\", l.badClientMessage);\n  this.client.on(\"transportError\", l.transportError);\n  return l;\n};\n\nharnessProto.createFeedListener = function createFeedListener(feed) {\n  const l = {\n    opening: jasmine.createSpy(),\n    open: jasmine.createSpy(),\n    close: jasmine.createSpy(),\n    action: jasmine.createSpy()\n  };\n  l.spyClear = () => {\n    l.opening.calls.reset();\n    l.open.calls.reset();\n    l.close.calls.reset();\n    l.action.calls.reset();\n  };\n  feed.on(\"opening\", l.opening);\n  feed.on(\"open\", l.open);\n  feed.on(\"close\", l.close);\n  feed.on(\"action\", l.action);\n  return l;\n};\n\nharnessProto.connectClient = function connectClient() {\n  this.client.connect();\n  this.transport.state.and.returnValue(\"connecting\");\n  this.transport.emit(\"connecting\");\n  this.transport.state.and.returnValue(\"connected\");\n  this.transport.emit(\"connect\");\n  this.transport.emit(\n    \"message\",\n    JSON.stringify({\n      MessageType: \"HandshakeResponse\",\n      Success: true,\n      Version: \"0.1\",\n      ClientId: \"SOME_CLIENT_ID\"\n    })\n  );\n};\n\n/*\n\nConfiguration tests and associated functionality.\nEnsure that initialization options behave as documented.\n\n*/\n\ndescribe(\"The connectTimeoutMs option\", () => {\n  beforeEach(() => {\n    jasmine.clock().install();\n  });\n\n  it(\"if greater than zero, should time out appropriately\", () => {\n    const opts = {\n      connectTimeoutMs: 1000\n    };\n    const harness = harnessFactory(opts);\n    const clientListener = harness.createClientListener();\n\n    // Begin connection attempt\n    harness.client.connect();\n    harness.transport.state.and.returnValue(\"connecting\");\n    harness.transport.emit(\"connecting\");\n\n    // Advance to immediately before the timeout and verify that\n    // transport.disconnect() was not called\n    harness.transport.spyClear();\n    jasmine.clock().tick(opts.connectTimeoutMs - epsilon);\n    expect(harness.transport.connect.calls.count()).toBe(0);\n    expect(harness.transport.send.calls.count()).toBe(0);\n    expect(harness.transport.disconnect.calls.count()).toBe(0);\n    expect(harness.transport.state.calls.count()).toBe(0);\n\n    // Advance to immediately after the timeout and ensure that\n    // transport.disconnect() was called\n    harness.transport.spyClear();\n    jasmine.clock().tick(2 * epsilon);\n    expect(harness.transport.connect.calls.count()).toBe(0);\n    expect(harness.transport.send.calls.count()).toBe(0);\n    expect(harness.transport.disconnect.calls.count()).toBe(1);\n    for (let i = 0; i < harness.transport.state.calls.count(); i += 1) {\n      expect(harness.transport.state.calls.argsFor(i).length).toBe(0);\n    }\n\n    // Emit transport disconnect and check the client disconnect event\n    clientListener.spyClear();\n    harness.transport.state.and.returnValue(\"disconnected\");\n    harness.transport.emit(\"disconnect\", new Error(\"TIMEOUT: ...\"));\n    expect(clientListener.connecting.calls.count()).toBe(0);\n    expect(clientListener.connect.calls.count()).toBe(0);\n    expect(clientListener.disconnect.calls.count()).toBe(1);\n    expect(clientListener.disconnect.calls.argsFor(0).length).toBe(1);\n    expect(clientListener.disconnect.calls.argsFor(0)[0]).toEqual(\n      jasmine.any(Error)\n    );\n    expect(clientListener.disconnect.calls.argsFor(0)[0].message).toBe(\n      \"TIMEOUT: ...\"\n    );\n    expect(clientListener.badServerMessage.calls.count()).toBe(0);\n    expect(clientListener.badClientMessage.calls.count()).toBe(0);\n    expect(clientListener.transportError.calls.count()).toBe(0);\n  });\n\n  it(\"if zero, should never time out\", () => {\n    const opts = {\n      connectTimeoutMs: 0\n    };\n    const harness = harnessFactory(opts);\n    const clientListener = harness.createClientListener();\n\n    // Begin connection attempt\n    harness.client.connect();\n    harness.transport.state.and.returnValue(\"connecting\");\n    harness.transport.emit(\"connecting\");\n\n    // Advance to the end of time and verify that transport.disconnect() was not called\n    harness.transport.spyClear();\n    jasmine.clock().tick(Number.MAX_SAFE_INTEGER);\n    expect(harness.transport.connect.calls.count()).toBe(0);\n    expect(harness.transport.send.calls.count()).toBe(0);\n    expect(harness.transport.disconnect.calls.count()).toBe(0);\n    expect(harness.transport.state.calls.count()).toBe(0);\n\n    // Ensure that the disconnect event was not emitted\n    clientListener.spyClear();\n    expect(clientListener.connecting.calls.count()).toBe(0);\n    expect(clientListener.connect.calls.count()).toBe(0);\n    expect(clientListener.disconnect.calls.count()).toBe(0);\n    expect(clientListener.badServerMessage.calls.count()).toBe(0);\n    expect(clientListener.badClientMessage.calls.count()).toBe(0);\n    expect(clientListener.transportError.calls.count()).toBe(0);\n  });\n\n  afterEach(() => {\n    jasmine.clock().uninstall();\n  });\n});\n\ndescribe(\"The connectRetryMs option\", () => {\n  beforeEach(() => {\n    jasmine.clock().install();\n  });\n\n  it(\"if greater than zero, should wait appropriately between connection retries\", () => {\n    const opts = {\n      connectRetryMs: 1000\n    };\n    const harness = harnessFactory(opts);\n    const clientListener = harness.createClientListener();\n\n    // Begin connection attempt and have it fail\n    harness.client.connect();\n    harness.transport.state.and.returnValue(\"connecting\");\n    harness.transport.emit(\"connecting\");\n    harness.transport.state.and.returnValue(\"disconnected\");\n    harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n    // Advance to immediately before the retry and verify that\n    // transport.connect() was not called\n    harness.transport.spyClear();\n    jasmine.clock().tick(opts.connectRetryMs - epsilon);\n    expect(harness.transport.connect.calls.count()).toBe(0);\n    expect(harness.transport.send.calls.count()).toBe(0);\n    expect(harness.transport.disconnect.calls.count()).toBe(0);\n    expect(harness.transport.state.calls.count()).toBe(0);\n\n    // Advance to immediately after the retry and ensure that\n    // transport.connect() was called\n    harness.transport.spyClear();\n    jasmine.clock().tick(2 * epsilon);\n    expect(harness.transport.connect.calls.count()).toBe(1);\n    expect(harness.transport.connect.calls.argsFor(0).length).toBe(0);\n    expect(harness.transport.send.calls.count()).toBe(0);\n    expect(harness.transport.disconnect.calls.count()).toBe(0);\n    for (let i = 0; i < harness.transport.state.calls.count(); i += 1) {\n      expect(harness.transport.state.calls.argsFor(i).length).toBe(0);\n    }\n\n    // Emit transport connecting and check the client connecting event\n    clientListener.spyClear();\n    harness.transport.state.and.returnValue(\"connecting\");\n    harness.transport.emit(\"connecting\");\n    expect(clientListener.connecting.calls.count()).toBe(1);\n    expect(clientListener.connecting.calls.argsFor(0).length).toBe(0);\n    expect(clientListener.connect.calls.count()).toBe(0);\n    expect(clientListener.disconnect.calls.count()).toBe(0);\n    expect(clientListener.badServerMessage.calls.count()).toBe(0);\n    expect(clientListener.badClientMessage.calls.count()).toBe(0);\n    expect(clientListener.transportError.calls.count()).toBe(0);\n  });\n\n  it(\"if zero, should immediately attempt a connection retry\", () => {\n    const opts = {\n      connectRetryMs: 0\n    };\n    const harness = harnessFactory(opts);\n    const clientListener = harness.createClientListener();\n\n    // Begin connection attempt\n    harness.client.connect();\n    harness.transport.state.and.returnValue(\"connecting\");\n    harness.transport.emit(\"connecting\");\n\n    // Have the connection attempt fail, and verify that there is an\n    // immediate call to transport.connect()\n    harness.transport.spyClear();\n    harness.transport.state.and.returnValue(\"disconnected\");\n    harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n    jasmine.clock().tick(0); // The retry is async\n    expect(harness.transport.connect.calls.count()).toBe(1);\n    expect(harness.transport.connect.calls.argsFor(0).length).toBe(0);\n    expect(harness.transport.send.calls.count()).toBe(0);\n    expect(harness.transport.disconnect.calls.count()).toBe(0);\n    for (let i = 0; i < harness.transport.state.calls.count(); i += 1) {\n      expect(harness.transport.state.calls.argsFor(i).length).toBe(0);\n    }\n\n    // Emit transport connecting and check the client connecting event\n    clientListener.spyClear();\n    harness.transport.state.and.returnValue(\"connecting\");\n    harness.transport.emit(\"connecting\");\n    expect(clientListener.connecting.calls.count()).toBe(1);\n    expect(clientListener.connecting.calls.argsFor(0).length).toBe(0);\n    expect(clientListener.connect.calls.count()).toBe(0);\n    expect(clientListener.disconnect.calls.count()).toBe(0);\n    expect(clientListener.badServerMessage.calls.count()).toBe(0);\n    expect(clientListener.badClientMessage.calls.count()).toBe(0);\n    expect(clientListener.transportError.calls.count()).toBe(0);\n  });\n\n  it(\"if less than zero, should not attempt a connection retry\", () => {\n    const opts = {\n      connectRetryMs: -1\n    };\n    const harness = harnessFactory(opts);\n    const clientListener = harness.createClientListener();\n\n    // Begin connection attempt\n    harness.client.connect();\n    harness.transport.state.and.returnValue(\"connecting\");\n    harness.transport.emit(\"connecting\");\n\n    // Have the connection attempt fail and verify that there is no subsequent\n    // call to transport.connect()\n    harness.transport.spyClear();\n    clientListener.spyClear();\n    harness.transport.state.and.returnValue(\"disconnected\");\n    harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n    jasmine.clock().tick(Number.MAX_SAFE_INTEGER);\n    expect(harness.transport.connect.calls.count()).toBe(0);\n    expect(harness.transport.send.calls.count()).toBe(0);\n    expect(harness.transport.disconnect.calls.count()).toBe(0);\n    for (let i = 0; i < harness.transport.state.calls.count(); i += 1) {\n      expect(harness.transport.state.calls.argsFor(i).length).toBe(0);\n    }\n  });\n\n  it(\"should not attempt a reconnect on HANDSHAKE_REJECTED failure\", () => {\n    const opts = {\n      connectRetryMs: 1000\n    };\n    const harness = harnessFactory(opts);\n\n    // Connect the transport\n    harness.client.connect();\n    harness.transport.state.and.returnValue(\"connecting\");\n    harness.transport.emit(\"connecting\");\n    harness.transport.state.and.returnValue(\"connected\");\n    harness.transport.emit(\"connect\");\n\n    // Have the trensport reject the handshake and verify that there is\n    // a subsequent call to transport.disconnect(err) and no call to\n    // transport.connect()\n    harness.transport.spyClear();\n    harness.transport.emit(\n      \"message\",\n      JSON.stringify({\n        MessageType: \"HandshakeResponse\",\n        Success: false\n      })\n    );\n    expect(harness.transport.connect.calls.count()).toBe(0);\n    expect(harness.transport.send.calls.count()).toBe(0);\n    expect(harness.transport.disconnect.calls.count()).toBe(1);\n    expect(harness.transport.disconnect.calls.argsFor(0).length).toBe(1);\n    expect(harness.transport.disconnect.calls.argsFor(0)[0]).toEqual(\n      jasmine.any(Error)\n    );\n    expect(harness.transport.disconnect.calls.argsFor(0)[0].message).toBe(\n      \"HANDSHAKE_REJECTED: The server rejected the handshake.\"\n    );\n    for (let i = 0; i <= harness.transport.state.calls.count(); i += 1) {\n      expect(harness.transport.state.calls.argsFor(i).length).toBe(0);\n    }\n\n    // Emit transport disconnect, advance forever, and check that\n    // transport.connect() is never called\n    harness.transport.spyClear();\n    harness.transport.state.and.returnValue(\"disconnected\");\n    harness.transport.emit(\n      \"disconnect\",\n      new Error(\"HANDSHAKE_REJECTED: The server rejected the handshake.\")\n    );\n    jasmine.clock().tick(Number.MAX_SAFE_INTEGER);\n    expect(harness.transport.connect.calls.count()).toBe(0);\n    expect(harness.transport.send.calls.count()).toBe(0);\n    expect(harness.transport.disconnect.calls.count()).toBe(0);\n    for (let i = 0; i <= harness.transport.state.calls.count(); i += 1) {\n      expect(harness.transport.state.calls.argsFor(i).length).toBe(0);\n    }\n  });\n\n  afterEach(() => {\n    jasmine.clock().uninstall();\n  });\n});\n\ndescribe(\"The connectRetryBackoffMs and connectRetryMaxMs options\", () => {\n  beforeEach(() => {\n    jasmine.clock().install();\n  });\n\n  it(\"should back off as configured\", () => {\n    const opts = {\n      connectRetryMs: 1000,\n      connectRetryBackoffMs: 1000,\n      connectRetryMaxMs: 10000\n    };\n    const harness = harnessFactory(opts);\n\n    // Run a bunch of retries\n    harness.client.connect();\n    for (let i = 0; i < 20; i += 1) {\n      // How long should it wait?\n      const ms = Math.min(\n        opts.connectRetryMs + i * opts.connectRetryBackoffMs,\n        opts.connectRetryMaxMs\n      );\n\n      // Begin connection attempt and have it fail\n      harness.transport.state.and.returnValue(\"connecting\");\n      harness.transport.emit(\"connecting\");\n      harness.transport.state.and.returnValue(\"disconnected\");\n      harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n      // Advance to immediately before the retry and verify that\n      // transport.connect() was not called\n      harness.transport.spyClear();\n      jasmine.clock().tick(ms - epsilon);\n      expect(harness.transport.connect.calls.count()).toBe(0);\n      expect(harness.transport.send.calls.count()).toBe(0);\n      expect(harness.transport.disconnect.calls.count()).toBe(0);\n      expect(harness.transport.state.calls.count()).toBe(0);\n\n      // Advance to immediately after the retry and ensure that\n      // transport.connect() was called\n      harness.transport.spyClear();\n      jasmine.clock().tick(2 * epsilon);\n      expect(harness.transport.connect.calls.count()).toBe(1);\n      expect(harness.transport.connect.calls.argsFor(0).length).toBe(0);\n      expect(harness.transport.send.calls.count()).toBe(0);\n      expect(harness.transport.disconnect.calls.count()).toBe(0);\n      for (let j = 0; j < harness.transport.state.calls.count(); j += 1) {\n        expect(harness.transport.state.calls.argsFor(j).length).toBe(0);\n      }\n    }\n  });\n\n  afterEach(() => {\n    jasmine.clock().uninstall();\n  });\n});\n\ndescribe(\"The connectRetryMaxAttempts option\", () => {\n  beforeEach(() => {\n    jasmine.clock().install();\n  });\n\n  it(\"if greater than zero, should stop connection retries as configured\", () => {\n    const opts = {\n      connectRetryMs: 0,\n      connectRetryBackoffMs: 0,\n      connectRetryMaxAttempts: 10\n    };\n    const harness = harnessFactory(opts);\n\n    // Run a bunch of retries\n    harness.client.connect();\n    for (let i = 0; i <= opts.connectRetryMaxAttempts; i += 1) {\n      // Begin connection attempt and have it fail\n      harness.transport.state.and.returnValue(\"connecting\");\n      harness.transport.emit(\"connecting\");\n      harness.transport.state.and.returnValue(\"disconnected\");\n      harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n      // Advance to immediately after the retry and ensure that\n      // transport.connect() was called if fewer than max retries and\n      // not called otherwise\n      harness.transport.spyClear();\n      jasmine.clock().tick(0); // async\n      if (i < opts.connectRetryMaxAttempts) {\n        expect(harness.transport.connect.calls.count()).toBe(1);\n        expect(harness.transport.connect.calls.argsFor(0).length).toBe(0);\n      } else {\n        expect(harness.transport.connect.calls.count()).toBe(0);\n      }\n      expect(harness.transport.send.calls.count()).toBe(0);\n      expect(harness.transport.disconnect.calls.count()).toBe(0);\n      for (let j = 0; j < harness.transport.state.calls.count(); j += 1) {\n        expect(harness.transport.state.calls.argsFor(j).length).toBe(0);\n      }\n    }\n  });\n\n  it(\"if zero, should always make connection retries\", () => {\n    const opts = {\n      connectRetryMs: 0,\n      connectRetryBackoffMs: 0,\n      connectRetryMaxAttempts: 0\n    };\n    const harness = harnessFactory(opts);\n\n    // Run a bunch of retries\n    harness.client.connect();\n    for (let i = 0; i <= 100; i += 1) {\n      // Begin connection attempt and have it fail\n      harness.transport.state.and.returnValue(\"connecting\");\n      harness.transport.emit(\"connecting\");\n      harness.transport.state.and.returnValue(\"disconnected\");\n      harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n      // Advance to immediately after the retry and ensure that\n      // transport.connect() was called\n      harness.transport.spyClear();\n      jasmine.clock().tick(0); // async\n      expect(harness.transport.connect.calls.count()).toBe(1);\n      expect(harness.transport.connect.calls.argsFor(0).length).toBe(0);\n      expect(harness.transport.send.calls.count()).toBe(0);\n      expect(harness.transport.disconnect.calls.count()).toBe(0);\n      for (let j = 0; j < harness.transport.state.calls.count(); j += 1) {\n        expect(harness.transport.state.calls.argsFor(j).length).toBe(0);\n      }\n    }\n  });\n\n  afterEach(() => {\n    jasmine.clock().uninstall();\n  });\n});\n\ndescribe(\"The actionTimeoutMs option\", () => {\n  beforeEach(() => {\n    jasmine.clock().install();\n  });\n\n  it(\"if greater than zero, should timeout as configured\", () => {\n    const opts = {\n      actionTimeoutMs: 1000\n    };\n    const harness = harnessFactory(opts);\n    harness.connectClient();\n\n    // Invoke the action\n    const cb = jasmine.createSpy();\n    const cbLate = jasmine.createSpy();\n    harness.client.action(\"SomeAction\", { Some: \"Args\" }, cb, cbLate);\n\n    // Advance to immediately before the timeout and ensure that\n    // neither callback was called\n    jasmine.clock().tick(opts.actionTimeoutMs - epsilon);\n    expect(cb.calls.count()).toBe(0);\n    expect(cbLate.calls.count()).toBe(0);\n\n    // Advance to immediately after the timeout and ensure that cb was called\n    jasmine.clock().tick(2 * epsilon);\n    expect(cb.calls.count()).toBe(1);\n    expect(cb.calls.argsFor(0).length).toBe(1);\n    expect(cb.calls.argsFor(0)[0]).toEqual(jasmine.any(Error));\n    expect(cb.calls.argsFor(0)[0].message).toBe(\n      \"TIMEOUT: The server did not respond within the allocated time.\"\n    );\n    expect(cbLate.calls.count()).toBe(0);\n  });\n\n  it(\"if zero, should never timeout\", () => {\n    const opts = {\n      actionTimeoutMs: 0\n    };\n    const harness = harnessFactory(opts);\n    harness.connectClient();\n\n    // Invoke the action\n    const cb = jasmine.createSpy();\n    const cbLate = jasmine.createSpy();\n    harness.client.action(\"SomeAction\", { Some: \"Args\" }, cb, cbLate);\n\n    // Advance to the end of time and ensure no callbacks\n    jasmine.clock().tick(Number.MAX_SAFE_INTEGER);\n    expect(cb.calls.count()).toBe(0);\n    expect(cbLate.calls.count()).toBe(0);\n  });\n\n  afterEach(() => {\n    jasmine.clock().uninstall();\n  });\n});\n\ndescribe(\"The feedTimeoutMs option\", () => {\n  beforeEach(() => {\n    jasmine.clock().install();\n  });\n\n  it(\"if greater than zero, should timeout as configured\", () => {\n    const opts = {\n      feedTimeoutMs: 1000\n    };\n    const harness = harnessFactory(opts);\n    harness.connectClient();\n\n    // Ask to open the feed\n    const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Args\" });\n    feed.desireOpen();\n\n    // Advance to immediately before the timeout and ensure that no events have fired\n    const feedListener = harness.createFeedListener(feed);\n    jasmine.clock().tick(opts.feedTimeoutMs - epsilon);\n    expect(feedListener.opening.calls.count()).toBe(0);\n    expect(feedListener.open.calls.count()).toBe(0);\n    expect(feedListener.close.calls.count()).toBe(0);\n    expect(feedListener.action.calls.count()).toBe(0);\n\n    // Advance to immediately after the timeout and ensure that close was fired\n    jasmine.clock().tick(2 * epsilon);\n    expect(feedListener.opening.calls.count()).toBe(0);\n    expect(feedListener.open.calls.count()).toBe(0);\n    expect(feedListener.close.calls.count()).toBe(1);\n    expect(feedListener.close.calls.argsFor(0).length).toBe(1);\n    expect(feedListener.close.calls.argsFor(0)[0]).toEqual(jasmine.any(Error));\n    expect(feedListener.close.calls.argsFor(0)[0].message).toBe(\n      \"TIMEOUT: The server did not respond to feed open request within the allocated time.\"\n    );\n    expect(feedListener.action.calls.count()).toBe(0);\n  });\n\n  it(\"if zero, should never timeout\", () => {\n    const opts = {\n      feedTimeoutMs: 0\n    };\n    const harness = harnessFactory(opts);\n    harness.connectClient();\n\n    // Ask to open the feed\n    const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Args\" });\n    feed.desireOpen();\n\n    // Advance to the end of time and ensure that no events have fired\n    const feedListener = harness.createFeedListener(feed);\n    jasmine.clock().tick(Math.MAX_SAFE_INTEGER);\n    expect(feedListener.opening.calls.count()).toBe(0);\n    expect(feedListener.open.calls.count()).toBe(0);\n    expect(feedListener.close.calls.count()).toBe(0);\n    expect(feedListener.action.calls.count()).toBe(0);\n  });\n\n  afterEach(() => {\n    jasmine.clock().uninstall();\n  });\n});\n\ndescribe(\"The reconnect option\", () => {\n  beforeEach(() => {\n    jasmine.clock().install();\n  });\n\n  it(\"if true, should reconnect if the connection fails\", () => {\n    const opts = {\n      reconnect: true\n    };\n    const harness = harnessFactory(opts);\n    harness.connectClient();\n\n    // Disconnect the transport and ensure that transport.connect() is called\n    harness.transport.spyClear();\n    harness.transport.state.and.returnValue(\"disconnected\");\n    harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n    expect(harness.transport.connect.calls.count()).toBe(1);\n    expect(harness.transport.connect.calls.argsFor(0).length).toBe(0);\n    expect(harness.transport.send.calls.count()).toBe(0);\n    expect(harness.transport.disconnect.calls.count()).toBe(0);\n    for (let i = 0; i < harness.transport.state.calls.count(); i += 1) {\n      expect(harness.transport.state.calls.argsFor(i).length).toBe(0);\n    }\n  });\n\n  it(\"if false, should not reconnect if the connection fails\", () => {\n    const opts = {\n      reconnect: false\n    };\n    const harness = harnessFactory(opts);\n    harness.connectClient();\n\n    // Disconnect the transport and ensure that transport.connect() is not called\n    harness.transport.spyClear();\n    harness.transport.state.and.returnValue(\"disconnected\");\n    harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n    expect(harness.transport.connect.calls.count()).toBe(0);\n    expect(harness.transport.send.calls.count()).toBe(0);\n    expect(harness.transport.disconnect.calls.count()).toBe(0);\n    for (let i = 0; i < harness.transport.state.calls.count(); i += 1) {\n      expect(harness.transport.state.calls.argsFor(i).length).toBe(0);\n    }\n  });\n\n  afterEach(() => {\n    jasmine.clock().uninstall();\n  });\n});\n\ndescribe(\"The reopenMaxAttempts and reopenTrailingMs options\", () => {\n  beforeEach(() => {\n    jasmine.clock().install();\n  });\n\n  it(\"if reopenMaxAttempts is negative, should always try to re-open the feed\", () => {\n    const opts = {\n      reopenMaxAttempts: -1\n    };\n    const harness = harnessFactory(opts);\n    harness.connectClient();\n\n    // Open the feed\n    const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Args\" });\n    feed.desireOpen();\n    harness.transport.emit(\n      \"message\",\n      JSON.stringify({\n        MessageType: \"FeedOpenResponse\",\n        Success: true,\n        FeedName: \"SomeFeed\",\n        FeedArgs: { Feed: \"Args\" },\n        FeedData: {}\n      })\n    );\n\n    const feedListener = harness.createFeedListener(feed);\n    for (let i = 0; i < 20; i += 1) {\n      feedListener.spyClear();\n\n      // Transmit a bad action revelation; the session will ask to close the feed\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"ActionRevelation\",\n          ActionName: \"SomeAction\",\n          ActionData: {},\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Args\" },\n          FeedDeltas: [{ Path: [], Operation: \"Delete\" }]\n        })\n      );\n\n      // Check that the feed is re-opened on success\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedCloseResponse\",\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Args\" }\n        })\n      );\n      expect(feedListener.opening.calls.count()).toBe(1);\n      expect(feedListener.opening.calls.argsFor(0).length).toBe(0);\n      expect(feedListener.open.calls.count()).toBe(0);\n      expect(feedListener.close.calls.count()).toBe(1);\n      expect(feedListener.close.calls.argsFor(0).length).toBe(1);\n      expect(feedListener.close.calls.argsFor(0)[0]).toEqual(\n        jasmine.any(Error)\n      );\n      expect(feedListener.close.calls.argsFor(0)[0].message).toBe(\n        \"BAD_ACTION_REVELATION: The server passed an invalid feed delta.\"\n      );\n      expect(feedListener.action.calls.count()).toBe(0);\n\n      // Successfully re-open the feed\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedOpenResponse\",\n          Success: true,\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Args\" },\n          FeedData: {}\n        })\n      );\n    }\n  });\n\n  it(\"if reopenMaxAttempts is zero, should not try to re-open the feed\", () => {\n    const opts = {\n      reopenMaxAttempts: 0\n    };\n    const harness = harnessFactory(opts);\n    harness.connectClient();\n\n    // Open the feed\n    const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Args\" });\n    feed.desireOpen();\n    harness.transport.emit(\n      \"message\",\n      JSON.stringify({\n        MessageType: \"FeedOpenResponse\",\n        Success: true,\n        FeedName: \"SomeFeed\",\n        FeedArgs: { Feed: \"Args\" },\n        FeedData: {}\n      })\n    );\n\n    const feedListener = harness.createFeedListener(feed);\n\n    // Transmit a bad action revelation; the session will ask to close the feed\n    harness.transport.emit(\n      \"message\",\n      JSON.stringify({\n        MessageType: \"ActionRevelation\",\n        ActionName: \"SomeAction\",\n        ActionData: {},\n        FeedName: \"SomeFeed\",\n        FeedArgs: { Feed: \"Args\" },\n        FeedDeltas: [{ Path: [], Operation: \"Delete\" }]\n      })\n    );\n\n    // Check that the feed is not re-opened on success\n    harness.transport.emit(\n      \"message\",\n      JSON.stringify({\n        MessageType: \"FeedCloseResponse\",\n        FeedName: \"SomeFeed\",\n        FeedArgs: { Feed: \"Args\" }\n      })\n    );\n    expect(feedListener.opening.calls.count()).toBe(0);\n    expect(feedListener.open.calls.count()).toBe(0);\n    expect(feedListener.close.calls.count()).toBe(1);\n    expect(feedListener.close.calls.argsFor(0).length).toBe(1);\n    expect(feedListener.close.calls.argsFor(0)[0]).toEqual(jasmine.any(Error));\n    expect(feedListener.close.calls.argsFor(0)[0].message).toBe(\n      \"BAD_ACTION_REVELATION: The server passed an invalid feed delta.\"\n    );\n    expect(feedListener.action.calls.count()).toBe(0);\n  });\n\n  it(\"if reopenMaxAttempts is positive and reopenTrailingMs is positive, should respect that limit\", () => {\n    const opts = {\n      reopenMaxAttempts: 5,\n      reopenTrailingMs: 1000\n    };\n    const harness = harnessFactory(opts);\n    harness.connectClient();\n\n    // Open the feed\n    const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Args\" });\n    feed.desireOpen();\n    harness.transport.emit(\n      \"message\",\n      JSON.stringify({\n        MessageType: \"FeedOpenResponse\",\n        Success: true,\n        FeedName: \"SomeFeed\",\n        FeedArgs: { Feed: \"Args\" },\n        FeedData: {}\n      })\n    );\n\n    // Have the feed fail reopenMaxAttempts times\n    const feedListener = harness.createFeedListener(feed);\n    for (let i = 0; i < opts.reopenMaxAttempts; i += 1) {\n      // Transmit a bad action revelation; the session will ask to close the feed\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"ActionRevelation\",\n          ActionName: \"SomeAction\",\n          ActionData: {},\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Args\" },\n          FeedDeltas: [{ Path: [], Operation: \"Delete\" }]\n        })\n      );\n\n      // Check that the feed is re-opened on success\n      feedListener.spyClear();\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedCloseResponse\",\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Args\" }\n        })\n      );\n      expect(feedListener.opening.calls.count()).toBe(1);\n      expect(feedListener.opening.calls.argsFor(0).length).toBe(0);\n      expect(feedListener.open.calls.count()).toBe(0);\n      expect(feedListener.close.calls.count()).toBe(0);\n      expect(feedListener.action.calls.count()).toBe(0);\n\n      // Successfully re-open the feed\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedOpenResponse\",\n          Success: true,\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Args\" },\n          FeedData: {}\n        })\n      );\n    }\n\n    // Transmit a final bad action revelation; the session will ask to close the feed\n    harness.transport.emit(\n      \"message\",\n      JSON.stringify({\n        MessageType: \"ActionRevelation\",\n        ActionName: \"SomeAction\",\n        ActionData: {},\n        FeedName: \"SomeFeed\",\n        FeedArgs: { Feed: \"Args\" },\n        FeedDeltas: [{ Path: [], Operation: \"Delete\" }]\n      })\n    );\n\n    // Check that the feed is NOT re-opened on success\n    feedListener.spyClear();\n    harness.transport.emit(\n      \"message\",\n      JSON.stringify({\n        MessageType: \"FeedCloseResponse\",\n        FeedName: \"SomeFeed\",\n        FeedArgs: { Feed: \"Args\" }\n      })\n    );\n    expect(feedListener.opening.calls.count()).toBe(0);\n    expect(feedListener.open.calls.count()).toBe(0);\n    expect(feedListener.close.calls.count()).toBe(0);\n    expect(feedListener.action.calls.count()).toBe(0);\n\n    // Advance reopenTrailingMs and ensure the feed is reopened\n    feedListener.spyClear();\n    jasmine.clock().tick(opts.reopenTrailingMs);\n    expect(feedListener.opening.calls.count()).toBe(1);\n    expect(feedListener.opening.calls.argsFor(0).length).toBe(0);\n    expect(feedListener.open.calls.count()).toBe(0);\n    expect(feedListener.close.calls.count()).toBe(0);\n    expect(feedListener.action.calls.count()).toBe(0);\n  });\n\n  it(\"if reopenMaxAttempts is positive and reopenTrailingMs is zero, should respect that limit over the duration of the connection\", () => {\n    const opts = {\n      reopenMaxAttempts: 5,\n      reopenTrailingMs: 0\n    };\n    const harness = harnessFactory(opts);\n    harness.connectClient();\n\n    // Open the feed\n    const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Args\" });\n    feed.desireOpen();\n    harness.transport.emit(\n      \"message\",\n      JSON.stringify({\n        MessageType: \"FeedOpenResponse\",\n        Success: true,\n        FeedName: \"SomeFeed\",\n        FeedArgs: { Feed: \"Args\" },\n        FeedData: {}\n      })\n    );\n\n    // Have the feed fail reopenMaxAttempts times\n    const feedListener = harness.createFeedListener(feed);\n    for (let i = 0; i < opts.reopenMaxAttempts; i += 1) {\n      // Transmit a bad action revelation; the session will ask to close the feed\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"ActionRevelation\",\n          ActionName: \"SomeAction\",\n          ActionData: {},\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Args\" },\n          FeedDeltas: [{ Path: [], Operation: \"Delete\" }]\n        })\n      );\n\n      // Check that the feed is re-opened on success\n      feedListener.spyClear();\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedCloseResponse\",\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Args\" }\n        })\n      );\n      expect(feedListener.opening.calls.count()).toBe(1);\n      expect(feedListener.opening.calls.argsFor(0).length).toBe(0);\n      expect(feedListener.open.calls.count()).toBe(0);\n      expect(feedListener.close.calls.count()).toBe(0);\n      expect(feedListener.action.calls.count()).toBe(0);\n\n      // Successfully re-open the feed\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedOpenResponse\",\n          Success: true,\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Args\" },\n          FeedData: {}\n        })\n      );\n    }\n\n    // Transmit a final bad action revelation; the session will ask to close the feed\n    harness.transport.emit(\n      \"message\",\n      JSON.stringify({\n        MessageType: \"ActionRevelation\",\n        ActionName: \"SomeAction\",\n        ActionData: {},\n        FeedName: \"SomeFeed\",\n        FeedArgs: { Feed: \"Args\" },\n        FeedDeltas: [{ Path: [], Operation: \"Delete\" }]\n      })\n    );\n\n    // Check that the feed is NOT re-opened on success\n    feedListener.spyClear();\n    harness.transport.emit(\n      \"message\",\n      JSON.stringify({\n        MessageType: \"FeedCloseResponse\",\n        FeedName: \"SomeFeed\",\n        FeedArgs: { Feed: \"Args\" }\n      })\n    );\n    expect(feedListener.opening.calls.count()).toBe(0);\n    expect(feedListener.open.calls.count()).toBe(0);\n    expect(feedListener.close.calls.count()).toBe(0);\n    expect(feedListener.action.calls.count()).toBe(0);\n\n    // Run all timers and make sure the feed is not reopened\n    feedListener.spyClear();\n    jasmine.clock().tick(Math.MAX_SAFE_INTEGER);\n    expect(feedListener.opening.calls.count()).toBe(0);\n    expect(feedListener.open.calls.count()).toBe(0);\n    expect(feedListener.close.calls.count()).toBe(0);\n    expect(feedListener.action.calls.count()).toBe(0);\n\n    // Disconnect and reconnect and make sure the feed is reopened\n    harness.client.disconnect();\n    harness.transport.state.and.returnValue(\"disconnected\");\n    harness.transport.emit(\"disconnect\");\n    feedListener.spyClear();\n    harness.connectClient();\n    expect(feedListener.opening.calls.count()).toBe(1);\n    expect(feedListener.opening.calls.argsFor(0).length).toBe(0);\n    expect(feedListener.open.calls.count()).toBe(0);\n    expect(feedListener.close.calls.count()).toBe(0);\n    expect(feedListener.action.calls.count()).toBe(0);\n  });\n\n  afterEach(() => {\n    jasmine.clock().uninstall();\n  });\n});\n\n/*\n\nApp-initiated operations.\n\nIncludes all client and feed functions except for basic state-retrieving\nfunctions (listed below). Tested only under the default configuration.\n\nEach app-initiated operation has a group of tests that check all the way through\nto conclusion, emulating any direct transport responses.\n\nFor each operation, check\n  - Error and return values\n  - Client and feed state function return values/errors\n      client.state()\n      client.id()\n      feed.desiredState()\n      feed.state()\n      feed.data()\n  - Client and feed events\n  - Transport calls\n  - Callbacks\n\n*/\n\ndescribe(\"The client.connect() function\", () => {\n  beforeEach(() => {\n    jasmine.clock().install();\n  });\n\n  // Errors and return values\n\n  describe(\"throw and return\", () => {\n    it(\"should throw if connecting\", () => {\n      const harness = harnessFactory();\n      harness.client.connect();\n      harness.transport.state.and.returnValue(\"connecting\");\n      harness.transport.emit(\"connecting\");\n      expect(() => {\n        harness.client.connect();\n      }).toThrow(new Error(\"INVALID_STATE: Already connecting or connected.\"));\n    });\n\n    it(\"should throw if connected\", () => {\n      const harness = harnessFactory();\n      harness.connectClient();\n      expect(() => {\n        harness.client.connect();\n      }).toThrow(new Error(\"INVALID_STATE: Already connecting or connected.\"));\n    });\n\n    it(\"should return nothing on success\", () => {\n      const harness = harnessFactory();\n      expect(harness.client.connect()).toBeUndefined();\n    });\n  });\n\n  // Client and feed state functions\n\n  describe(\"client and feed state function effects\", () => {\n    it(\"should work correctly through a successful connection cycle\", () => {\n      // Create a disconnected client and feed objects\n      const harness = harnessFactory();\n      const feedWantedOpen = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      feedWantedOpen.desireOpen();\n      const feedWantedClosed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n\n      // Check all state functions\n      expect(harness.client.state()).toBe(\"disconnected\");\n      expect(() => {\n        harness.client.id();\n      }).toThrow(new Error(\"INVALID_STATE: Not connected.\"));\n      expect(feedWantedOpen.desiredState()).toBe(\"open\");\n      expect(feedWantedOpen.state()).toBe(\"closed\");\n      expect(() => {\n        feedWantedOpen.data();\n      }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n      expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n      expect(feedWantedClosed.state()).toBe(\"closed\");\n      expect(() => {\n        feedWantedClosed.data();\n      }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n\n      // Call client.connect() and have the transport emit connecting\n      harness.client.connect();\n      harness.transport.state.and.returnValue(\"connecting\");\n      harness.transport.emit(\"connecting\");\n\n      // Check all state functions\n      expect(harness.client.state()).toBe(\"connecting\");\n      expect(() => {\n        harness.client.id();\n      }).toThrow(new Error(\"INVALID_STATE: Not connected.\"));\n      expect(feedWantedOpen.desiredState()).toBe(\"open\");\n      expect(feedWantedOpen.state()).toBe(\"closed\");\n      expect(() => {\n        feedWantedOpen.data();\n      }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n      expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n      expect(feedWantedClosed.state()).toBe(\"closed\");\n      expect(() => {\n        feedWantedClosed.data();\n      }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n\n      // Have the transport emit connect and emit a successful handshake response\n      // so that the client becomes connected\n      harness.transport.state.and.returnValue(\"connected\");\n      harness.transport.emit(\"connect\");\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"HandshakeResponse\",\n          Success: true,\n          Version: \"0.1\",\n          ClientId: \"SOME_CLIENT_ID\"\n        })\n      );\n\n      // Check all state functions\n      expect(harness.client.state()).toBe(\"connected\");\n      expect(harness.client.id()).toBe(\"SOME_CLIENT_ID\");\n      expect(feedWantedOpen.desiredState()).toBe(\"open\");\n      expect(feedWantedOpen.state()).toBe(\"opening\");\n      expect(() => {\n        feedWantedOpen.data();\n      }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n      expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n      expect(feedWantedClosed.state()).toBe(\"closed\");\n      expect(() => {\n        feedWantedClosed.data();\n      }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n\n      // Have the transport return success to feed open request\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedOpenResponse\",\n          Success: true,\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Arg\" },\n          FeedData: { Feed: \"Data\" }\n        })\n      );\n\n      // Check all state functions\n      expect(harness.client.state()).toBe(\"connected\");\n      expect(harness.client.id()).toBe(\"SOME_CLIENT_ID\");\n      expect(feedWantedOpen.desiredState()).toBe(\"open\");\n      expect(feedWantedOpen.state()).toBe(\"open\");\n      expect(feedWantedOpen.data()).toEqual({ Feed: \"Data\" });\n      expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n      expect(feedWantedClosed.state()).toBe(\"closed\");\n      expect(() => {\n        feedWantedClosed.data();\n      }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n    });\n\n    describe(\"should work correctly through a failing connection cycle\", () => {\n      let harness;\n      let feedWantedOpen;\n      let feedWantedClosed;\n      beforeEach(() => {\n        // Create a connecting client and two feeds\n        harness = harnessFactory();\n        feedWantedOpen = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n        feedWantedOpen.desireOpen();\n        feedWantedClosed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n        harness.client.connect();\n        harness.transport.state.and.returnValue(\"connecting\");\n        harness.transport.emit(\"connecting\");\n      });\n\n      it(\"if due to timeout, should update appropriately\", () => {\n        // Trigger the timeout\n        jasmine\n          .clock()\n          .tick(harness.client._options.connectTimeoutMs + epsilon);\n        // The client will disconnect the transport\n        harness.transport.state.and.returnValue(\"disconnected\");\n        harness.transport.emit(\n          \"disconnect\",\n          harness.transport.disconnect.calls.argsFor(0)[0]\n        );\n\n        // Check all state functions\n        expect(harness.client.state()).toBe(\"disconnected\");\n        expect(() => {\n          harness.client.id();\n        }).toThrow(new Error(\"INVALID_STATE: Not connected.\"));\n        expect(feedWantedOpen.desiredState()).toBe(\"open\");\n        expect(feedWantedOpen.state()).toBe(\"closed\");\n        expect(() => {\n          feedWantedOpen.data();\n        }).toThrow(\n          new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n        );\n        expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n        expect(feedWantedClosed.state()).toBe(\"closed\");\n        expect(() => {\n          feedWantedClosed.data();\n        }).toThrow(\n          new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n        );\n      });\n\n      it(\"if due to app call to client.disconnect(), should update appropriately\", () => {\n        // Have the client disconnect\n        harness.client.disconnect();\n        harness.transport.state.and.returnValue(\"disconnected\");\n        harness.transport.emit(\"disconnect\"); // Requested\n\n        // Check all state functions\n        expect(harness.client.state()).toBe(\"disconnected\");\n        expect(() => {\n          harness.client.id();\n        }).toThrow(new Error(\"INVALID_STATE: Not connected.\"));\n        expect(feedWantedOpen.desiredState()).toBe(\"open\");\n        expect(feedWantedOpen.state()).toBe(\"closed\");\n        expect(() => {\n          feedWantedOpen.data();\n        }).toThrow(\n          new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n        );\n        expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n        expect(feedWantedClosed.state()).toBe(\"closed\");\n        expect(() => {\n          feedWantedClosed.data();\n        }).toThrow(\n          new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n        );\n      });\n\n      it(\"if due to transport internal failure, should update appropriately\", () => {\n        // Have the transport disconnect\n        harness.transport.state.and.returnValue(\"disconnected\");\n        harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n        // Check all state functions\n        expect(harness.client.state()).toBe(\"disconnected\");\n        expect(() => {\n          harness.client.id();\n        }).toThrow(new Error(\"INVALID_STATE: Not connected.\"));\n        expect(feedWantedOpen.desiredState()).toBe(\"open\");\n        expect(feedWantedOpen.state()).toBe(\"closed\");\n        expect(() => {\n          feedWantedOpen.data();\n        }).toThrow(\n          new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n        );\n        expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n        expect(feedWantedClosed.state()).toBe(\"closed\");\n        expect(() => {\n          feedWantedClosed.data();\n        }).toThrow(\n          new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n        );\n      });\n\n      it(\"if due to handshake rejection, should update appropriately\", () => {\n        // Have the transport connect and emit a handshake failure\n        harness.transport.state.and.returnValue(\"connected\");\n        harness.transport.emit(\"connect\");\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"HandshakeResponse\",\n            Success: false\n          })\n        ); // The client will disconnect the transport\n        harness.transport.state.and.returnValue(\"disconnected\");\n        harness.transport.emit(\n          \"disconnect\",\n          harness.transport.disconnect.calls.argsFor(0)[0]\n        );\n\n        // Check all state functions\n        expect(harness.client.state()).toBe(\"disconnected\");\n        expect(() => {\n          harness.client.id();\n        }).toThrow(new Error(\"INVALID_STATE: Not connected.\"));\n        expect(feedWantedOpen.desiredState()).toBe(\"open\");\n        expect(feedWantedOpen.state()).toBe(\"closed\");\n        expect(() => {\n          feedWantedOpen.data();\n        }).toThrow(\n          new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n        );\n        expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n        expect(feedWantedClosed.state()).toBe(\"closed\");\n        expect(() => {\n          feedWantedClosed.data();\n        }).toThrow(\n          new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n        );\n      });\n    });\n  });\n\n  // Client and feed events\n\n  describe(\"client and feed event effects\", () => {\n    it(\"should work correctly through a successful connection cycle\", () => {\n      // Create a disconnected client and feed objects\n      const harness = harnessFactory();\n      const feedWantedOpen = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      feedWantedOpen.desireOpen();\n      const feedWantedClosed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n\n      // Create listeners\n      const clientListener = harness.createClientListener();\n      const feedWantedOpenListener = harness.createFeedListener(feedWantedOpen);\n      const feedWantedClosedListener = harness.createFeedListener(\n        feedWantedClosed\n      );\n\n      // Call client.connect() and have the transport emit connecting\n      harness.client.connect();\n      harness.transport.state.and.returnValue(\"connecting\");\n      harness.transport.emit(\"connecting\");\n\n      // Check all client and feed events\n      expect(clientListener.connecting.calls.count()).toBe(1);\n      expect(clientListener.connecting.calls.argsFor(0).length).toBe(0);\n      expect(clientListener.connect.calls.count()).toBe(0);\n      expect(clientListener.disconnect.calls.count()).toBe(0);\n      expect(clientListener.badServerMessage.calls.count()).toBe(0);\n      expect(clientListener.badClientMessage.calls.count()).toBe(0);\n      expect(clientListener.transportError.calls.count()).toBe(0);\n      expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n      expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n      expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n      expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n      // Reset listeners\n      clientListener.spyClear();\n      feedWantedOpenListener.spyClear();\n      feedWantedClosedListener.spyClear();\n\n      // Have the transport emit connect and emit a successful handshake response\n      // so that the client becomes connected\n      harness.transport.state.and.returnValue(\"connected\");\n      harness.transport.emit(\"connect\");\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"HandshakeResponse\",\n          Success: true,\n          Version: \"0.1\",\n          ClientId: \"SOME_CLIENT_ID\"\n        })\n      );\n\n      // Check all client and feed events\n      expect(clientListener.connecting.calls.count()).toBe(0);\n      expect(clientListener.connect.calls.count()).toBe(1);\n      expect(clientListener.connect.calls.argsFor(0).length).toBe(0);\n      expect(clientListener.disconnect.calls.count()).toBe(0);\n      expect(clientListener.badServerMessage.calls.count()).toBe(0);\n      expect(clientListener.badClientMessage.calls.count()).toBe(0);\n      expect(clientListener.transportError.calls.count()).toBe(0);\n      expect(feedWantedOpenListener.opening.calls.count()).toBe(1);\n      expect(feedWantedOpenListener.opening.calls.argsFor(0).length).toBe(0);\n      expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n      expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n      expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n      // Reset listeners\n      clientListener.spyClear();\n      feedWantedOpenListener.spyClear();\n      feedWantedClosedListener.spyClear();\n\n      // Have the transport return success to feed open request\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedOpenResponse\",\n          Success: true,\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Arg\" },\n          FeedData: { Feed: \"Data\" }\n        })\n      );\n\n      // Check all client and feed events\n      expect(clientListener.connecting.calls.count()).toBe(0);\n      expect(clientListener.connect.calls.count()).toBe(0);\n      expect(clientListener.disconnect.calls.count()).toBe(0);\n      expect(clientListener.badServerMessage.calls.count()).toBe(0);\n      expect(clientListener.badClientMessage.calls.count()).toBe(0);\n      expect(clientListener.transportError.calls.count()).toBe(0);\n      expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n      expect(feedWantedOpenListener.open.calls.count(1)).toBe(1);\n      expect(feedWantedOpenListener.open.calls.argsFor(0).length).toBe(0);\n      expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n      expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n    });\n\n    describe(\"should work correctly through a failing connection cycle\", () => {\n      let harness;\n      let feedWantedOpen;\n      let feedWantedClosed;\n      beforeEach(() => {\n        // Create a connecting client and two feeds\n        harness = harnessFactory();\n        feedWantedOpen = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n        feedWantedOpen.desireOpen();\n        feedWantedClosed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n        harness.client.connect();\n        harness.transport.state.and.returnValue(\"connecting\");\n        harness.transport.emit(\"connecting\");\n      });\n\n      it(\"if due to timeout, should update appropriately\", () => {\n        // Create listeners\n        const clientListener = harness.createClientListener();\n        const feedWantedOpenListener = harness.createFeedListener(\n          feedWantedOpen\n        );\n        const feedWantedClosedListener = harness.createFeedListener(\n          feedWantedClosed\n        );\n\n        // Trigger the timeout\n        jasmine\n          .clock()\n          .tick(harness.client._options.connectTimeoutMs + epsilon);\n        // The client will disconnect the transport\n        harness.transport.state.and.returnValue(\"disconnected\");\n        harness.transport.emit(\n          \"disconnect\",\n          harness.transport.disconnect.calls.argsFor(0)[0]\n        );\n\n        // Check all client and feed events\n        expect(clientListener.connecting.calls.count()).toBe(0);\n        expect(clientListener.connect.calls.count()).toBe(0);\n        expect(clientListener.disconnect.calls.count()).toBe(1);\n        expect(clientListener.disconnect.calls.argsFor(0).length).toBe(1);\n        expect(clientListener.disconnect.calls.argsFor(0)[0]).toEqual(\n          jasmine.any(Error)\n        );\n        expect(clientListener.disconnect.calls.argsFor(0)[0].message).toBe(\n          harness.transport.disconnect.calls.argsFor(0)[0].message\n        );\n        expect(clientListener.badServerMessage.calls.count()).toBe(0);\n        expect(clientListener.badClientMessage.calls.count()).toBe(0);\n        expect(clientListener.transportError.calls.count()).toBe(0);\n        expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n        expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n        expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n        expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n      });\n\n      it(\"if due to app call to client.disconnect(), should update appropriately\", () => {\n        // Create listeners\n        const clientListener = harness.createClientListener();\n        const feedWantedOpenListener = harness.createFeedListener(\n          feedWantedOpen\n        );\n        const feedWantedClosedListener = harness.createFeedListener(\n          feedWantedClosed\n        );\n\n        // Have the client disconnect\n        harness.client.disconnect();\n        harness.transport.state.and.returnValue(\"disconnected\");\n        harness.transport.emit(\"disconnect\"); // Requested\n\n        // Check all client and feed events\n        expect(clientListener.connecting.calls.count()).toBe(0);\n        expect(clientListener.connect.calls.count()).toBe(0);\n        expect(clientListener.disconnect.calls.count()).toBe(1);\n        expect(clientListener.disconnect.calls.argsFor(0).length).toBe(0);\n        expect(clientListener.badServerMessage.calls.count()).toBe(0);\n        expect(clientListener.badClientMessage.calls.count()).toBe(0);\n        expect(clientListener.transportError.calls.count()).toBe(0);\n        expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n        expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n        expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n        expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n      });\n\n      it(\"if due to transport internal failure, should update appropriately\", () => {\n        // Create listeners\n        const clientListener = harness.createClientListener();\n        const feedWantedOpenListener = harness.createFeedListener(\n          feedWantedOpen\n        );\n        const feedWantedClosedListener = harness.createFeedListener(\n          feedWantedClosed\n        );\n\n        // Have the transport disconnect\n        harness.transport.state.and.returnValue(\"disconnected\");\n        harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n        // Check all client and feed events\n        expect(clientListener.connecting.calls.count()).toBe(0);\n        expect(clientListener.connect.calls.count()).toBe(0);\n        expect(clientListener.disconnect.calls.count()).toBe(1);\n        expect(clientListener.disconnect.calls.argsFor(0).length).toBe(1);\n        expect(clientListener.disconnect.calls.argsFor(0)[0]).toEqual(\n          jasmine.any(Error)\n        );\n        expect(clientListener.disconnect.calls.argsFor(0)[0].message).toBe(\n          \"FAILURE: ...\"\n        );\n        expect(clientListener.badServerMessage.calls.count()).toBe(0);\n        expect(clientListener.badClientMessage.calls.count()).toBe(0);\n        expect(clientListener.transportError.calls.count()).toBe(0);\n        expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n        expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n        expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n        expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n      });\n\n      it(\"if due to handshake rejection, should update appropriately\", () => {\n        // Create listeners\n        const clientListener = harness.createClientListener();\n        const feedWantedOpenListener = harness.createFeedListener(\n          feedWantedOpen\n        );\n        const feedWantedClosedListener = harness.createFeedListener(\n          feedWantedClosed\n        );\n\n        // Have the transport connect and emit a handshake failure\n        harness.transport.state.and.returnValue(\"connected\");\n        harness.transport.emit(\"connect\");\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"HandshakeResponse\",\n            Success: false\n          })\n        ); // The client will disconnect the transport\n        harness.transport.state.and.returnValue(\"disconnected\");\n        harness.transport.emit(\n          \"disconnect\",\n          harness.transport.disconnect.calls.argsFor(0)[0]\n        );\n\n        // Check all client and feed events\n        expect(clientListener.connecting.calls.count()).toBe(0);\n        expect(clientListener.connect.calls.count()).toBe(0);\n        expect(clientListener.disconnect.calls.count()).toBe(1);\n        expect(clientListener.disconnect.calls.argsFor(0).length).toBe(1);\n        expect(clientListener.disconnect.calls.argsFor(0)[0]).toEqual(\n          jasmine.any(Error)\n        );\n        expect(clientListener.disconnect.calls.argsFor(0)[0].message).toBe(\n          \"HANDSHAKE_REJECTED: The server rejected the handshake.\"\n        );\n        expect(clientListener.badServerMessage.calls.count()).toBe(0);\n        expect(clientListener.badClientMessage.calls.count()).toBe(0);\n        expect(clientListener.transportError.calls.count()).toBe(0);\n        expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n        expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n        expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n        expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n      });\n    });\n  });\n\n  // Transport calls\n\n  describe(\"transport calls\", () => {\n    describe(\"should work correctly through a successful connection cycle\", () => {\n      it(\"if a feed is desired open, make appropriate transport calls\", () => {\n        // Create a disconnected client and feed objects\n        const harness = harnessFactory();\n        const feedWantedOpen = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n        feedWantedOpen.desireOpen();\n        harness.client.feed(\"SomeFeed\", {\n          Feed: \"Arg\"\n        });\n\n        // Call client.connect()\n        harness.client.connect();\n\n        // Check all transport calls\n        expect(harness.transport.connect.calls.count()).toBe(1);\n        expect(harness.transport.connect.calls.argsFor(0).length).toBe(0);\n        expect(harness.transport.disconnect.calls.count()).toBe(0);\n        expect(harness.transport.send.calls.count()).toBe(0);\n        expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n        // Reset transport spies\n        harness.transport.spyClear();\n\n        // Have the transport emit connecting\n        harness.transport.state.and.returnValue(\"connecting\");\n        harness.transport.emit(\"connecting\");\n\n        // Check all transport calls\n        expect(harness.transport.connect.calls.count()).toBe(0);\n        expect(harness.transport.disconnect.calls.count()).toBe(0);\n        expect(harness.transport.send.calls.count()).toBe(0);\n        expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n        // Reset transport spies\n        harness.transport.spyClear();\n\n        // Have the transport emit connect\n        harness.transport.state.and.returnValue(\"connected\");\n        harness.transport.emit(\"connect\");\n\n        // Check all transport calls\n        expect(harness.transport.connect.calls.count()).toBe(0);\n        expect(harness.transport.disconnect.calls.count()).toBe(0);\n        expect(harness.transport.send.calls.count()).toBe(1);\n        expect(harness.transport.send.calls.argsFor(0).length).toBe(1);\n        expect(harness.transport.send.calls.argsFor(0)[0]).toBe(\n          JSON.stringify({\n            MessageType: \"Handshake\",\n            Versions: [\"0.1\"]\n          })\n        );\n        expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n        // Reset transport spies\n        harness.transport.spyClear();\n\n        // Have the transport emit a successful handshake response\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"HandshakeResponse\",\n            Success: true,\n            Version: \"0.1\",\n            ClientId: \"SOME_CLIENT_ID\"\n          })\n        );\n\n        // Check all transport calls\n        expect(harness.transport.connect.calls.count()).toBe(0);\n        expect(harness.transport.disconnect.calls.count()).toBe(0);\n        expect(harness.transport.send.calls.count()).toBe(1);\n        expect(harness.transport.send.calls.argsFor(0).length).toBe(1);\n        expect(harness.transport.send.calls.argsFor(0)[0]).toBe(\n          JSON.stringify({\n            MessageType: \"FeedOpen\",\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" }\n          })\n        );\n        expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n        // Reset transport spies\n        harness.transport.spyClear();\n\n        // // Have the transport return success to feed open request\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"FeedOpenResponse\",\n            Success: true,\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" },\n            FeedData: { Feed: \"Data\" }\n          })\n        );\n\n        // Check all transport calls\n        expect(harness.transport.connect.calls.count()).toBe(0);\n        expect(harness.transport.disconnect.calls.count()).toBe(0);\n        expect(harness.transport.send.calls.count()).toBe(0);\n        expect(harness.transport.state.calls.count() >= 0).toBe(true);\n      });\n\n      it(\"if no feeds are desired open, make appropriate transport calls\", () => {\n        // Create a disconnected client and feed objects\n        const harness = harnessFactory();\n        harness.client.feed(\"SomeFeed\", {\n          Feed: \"Arg\"\n        });\n\n        // Call client.connect()\n        harness.client.connect();\n\n        // Check all transport calls\n        expect(harness.transport.connect.calls.count()).toBe(1);\n        expect(harness.transport.connect.calls.argsFor(0).length).toBe(0);\n        expect(harness.transport.disconnect.calls.count()).toBe(0);\n        expect(harness.transport.send.calls.count()).toBe(0);\n        expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n        // Reset transport spies\n        harness.transport.spyClear();\n\n        // Have the transport emit connecting\n        harness.transport.state.and.returnValue(\"connecting\");\n        harness.transport.emit(\"connecting\");\n\n        // Check all transport calls\n        expect(harness.transport.connect.calls.count()).toBe(0);\n        expect(harness.transport.disconnect.calls.count()).toBe(0);\n        expect(harness.transport.send.calls.count()).toBe(0);\n        expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n        // Reset transport spies\n        harness.transport.spyClear();\n\n        // Have the transport emit connect\n        harness.transport.state.and.returnValue(\"connected\");\n        harness.transport.emit(\"connect\");\n\n        // Check all transport calls\n        expect(harness.transport.connect.calls.count()).toBe(0);\n        expect(harness.transport.disconnect.calls.count()).toBe(0);\n        expect(harness.transport.send.calls.count()).toBe(1);\n        expect(harness.transport.send.calls.argsFor(0).length).toBe(1);\n        expect(harness.transport.send.calls.argsFor(0)[0]).toBe(\n          JSON.stringify({\n            MessageType: \"Handshake\",\n            Versions: [\"0.1\"]\n          })\n        );\n        expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n        // Reset transport spies\n        harness.transport.spyClear();\n\n        // Have the transport emit a successful handshake response\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"HandshakeResponse\",\n            Success: true,\n            Version: \"0.1\",\n            ClientId: \"SOME_CLIENT_ID\"\n          })\n        );\n\n        // Check all transport calls\n        expect(harness.transport.connect.calls.count()).toBe(0);\n        expect(harness.transport.disconnect.calls.count()).toBe(0);\n        expect(harness.transport.send.calls.count()).toBe(0);\n        expect(harness.transport.state.calls.count() >= 0).toBe(true);\n      });\n    });\n\n    describe(\"should work correctly through a failing connection cycle\", () => {\n      let harness;\n      let feedWantedOpen;\n      beforeEach(() => {\n        // Create a connecting client and two feeds\n        harness = harnessFactory();\n        feedWantedOpen = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n        feedWantedOpen.desireOpen();\n        harness.client.connect();\n        harness.transport.state.and.returnValue(\"connecting\");\n        harness.transport.emit(\"connecting\");\n      });\n\n      it(\"if due to timeout, should be appropriate\", () => {\n        // Reset transport spies\n        harness.transport.spyClear();\n\n        // Trigger the timeout\n        jasmine\n          .clock()\n          .tick(harness.client._options.connectTimeoutMs + epsilon);\n        // The client will disconnect the transport\n        harness.transport.state.and.returnValue(\"disconnected\");\n        harness.transport.emit(\n          \"disconnect\",\n          harness.transport.disconnect.calls.argsFor(0)[0]\n        );\n\n        // Check all transport calls\n        expect(harness.transport.connect.calls.count()).toBe(0);\n        expect(harness.transport.disconnect.calls.count()).toBe(1);\n        expect(harness.transport.disconnect.calls.argsFor(0).length).toBe(1);\n        expect(harness.transport.disconnect.calls.argsFor(0)[0]).toEqual(\n          jasmine.any(Error)\n        );\n        expect(harness.transport.disconnect.calls.argsFor(0)[0].message).toBe(\n          \"TIMEOUT: The connection attempt timed out.\"\n        );\n        expect(harness.transport.send.calls.count()).toBe(0);\n        expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n        // Connection retries are tested alongside configuration\n      });\n\n      it(\"if due to app call to client.disconnect(), should be appropriate\", () => {\n        // Reset transport spies\n        harness.transport.spyClear();\n\n        // Have the client disconnect\n        harness.client.disconnect();\n        harness.transport.state.and.returnValue(\"disconnected\");\n        harness.transport.emit(\"disconnect\"); // Requested\n\n        // Check all transport calls\n        expect(harness.transport.connect.calls.count()).toBe(0);\n        expect(harness.transport.disconnect.calls.count()).toBe(1);\n        expect(harness.transport.disconnect.calls.argsFor(0).length).toBe(0); // Requested\n        expect(harness.transport.send.calls.count()).toBe(0);\n        expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n        // Connection retries are tested alongside configuration\n      });\n\n      it(\"if due to transport internal failure, should be appropriate\", () => {\n        // Reset transport spies\n        harness.transport.spyClear();\n\n        // Have the transport disconnect\n        harness.transport.state.and.returnValue(\"disconnected\");\n        harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n        // Check all transport calls\n        expect(harness.transport.connect.calls.count()).toBe(0);\n        expect(harness.transport.disconnect.calls.count()).toBe(0);\n        expect(harness.transport.send.calls.count()).toBe(0);\n        expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n        // Connection retries are tested alongside configuration\n      });\n\n      it(\"if due to handshake rejection, should be appropriate\", () => {\n        // Reset transport spies\n        harness.transport.spyClear();\n\n        // Have the transport connect so the client submits a handshake\n        harness.transport.state.and.returnValue(\"connected\");\n        harness.transport.emit(\"connect\");\n\n        // Check all transport calls\n        expect(harness.transport.connect.calls.count()).toBe(0);\n        expect(harness.transport.disconnect.calls.count()).toBe(0);\n        expect(harness.transport.send.calls.count()).toBe(1);\n        expect(harness.transport.send.calls.argsFor(0).length).toBe(1);\n        expect(harness.transport.send.calls.argsFor(0)[0]).toBe(\n          JSON.stringify({\n            MessageType: \"Handshake\",\n            Versions: [\"0.1\"]\n          })\n        );\n        expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n        // Reset transport spies\n        harness.transport.spyClear();\n\n        // Have the transport handshake failure\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"HandshakeResponse\",\n            Success: false\n          })\n        ); // The client will call transport.disconnect()\n\n        // Check all transport calls\n        expect(harness.transport.connect.calls.count()).toBe(0);\n        expect(harness.transport.disconnect.calls.count()).toBe(1);\n        expect(harness.transport.disconnect.calls.argsFor(0).length).toBe(1);\n        expect(harness.transport.disconnect.calls.argsFor(0)[0]).toEqual(\n          jasmine.any(Error)\n        );\n        expect(harness.transport.disconnect.calls.argsFor(0)[0].message).toBe(\n          \"HANDSHAKE_REJECTED: The server rejected the handshake.\"\n        );\n        expect(harness.transport.send.calls.count()).toBe(0);\n        expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n        // Absence of connection retry are tested alongside configuration\n      });\n    });\n  });\n\n  // Callbacks - N/A\n\n  afterEach(() => {\n    jasmine.clock().uninstall();\n  });\n});\n\ndescribe(\"The client.disconnect() function\", () => {\n  beforeEach(() => {\n    jasmine.clock().install();\n  });\n\n  // Errors and return values\n\n  describe(\"throw and return\", () => {\n    it(\"should throw if disconnected\", () => {\n      const harness = harnessFactory();\n      expect(() => {\n        harness.client.disconnect();\n      }).toThrow(new Error(\"INVALID_STATE: Already disconnected.\"));\n    });\n\n    it(\"should return void if not disconnected\", () => {\n      const harness = harnessFactory();\n      harness.client.connect();\n      harness.transport.state.and.returnValue(\"connecting\");\n      harness.transport.emit(\"connecting\");\n      expect(harness.client.disconnect()).toBeUndefined();\n    });\n  });\n\n  // Client and feed state functions\n\n  describe(\"client and feed state function effects\", () => {\n    it(\"should work correctly if called while transport connecting\", () => {\n      // Create a disconnected client and two feeds\n      const harness = harnessFactory();\n      const feedWantedOpen = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      feedWantedOpen.desireOpen();\n      const feedWantedClosed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n\n      // Put the client in a connecting state\n      harness.client.connect();\n      harness.transport.state.and.returnValue(\"connecting\");\n      harness.transport.emit(\"connecting\");\n\n      // Check all state functions\n      expect(harness.client.state()).toBe(\"connecting\");\n      expect(() => {\n        harness.client.id();\n      }).toThrow(new Error(\"INVALID_STATE: Not connected.\"));\n      expect(feedWantedOpen.desiredState()).toBe(\"open\");\n      expect(feedWantedOpen.state()).toBe(\"closed\");\n      expect(() => {\n        feedWantedOpen.data();\n      }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n      expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n      expect(feedWantedClosed.state()).toBe(\"closed\");\n      expect(() => {\n        feedWantedClosed.data();\n      }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n\n      // Call disconnect and have the transport emit disconnect\n      harness.client.disconnect();\n      harness.transport.state.and.returnValue(\"disconnected\");\n      harness.transport.emit(\"disconnect\");\n\n      // Check all state functions\n      expect(harness.client.state()).toBe(\"disconnected\");\n      expect(() => {\n        harness.client.id();\n      }).toThrow(new Error(\"INVALID_STATE: Not connected.\"));\n      expect(feedWantedOpen.desiredState()).toBe(\"open\");\n      expect(feedWantedOpen.state()).toBe(\"closed\");\n      expect(() => {\n        feedWantedOpen.data();\n      }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n      expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n      expect(feedWantedClosed.state()).toBe(\"closed\");\n      expect(() => {\n        feedWantedClosed.data();\n      }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n    });\n\n    it(\"should work correctly if called while awaiting handshake response\", () => {\n      // Create a disconnected client and two feeds\n      const harness = harnessFactory();\n      const feedWantedOpen = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      feedWantedOpen.desireOpen();\n      const feedWantedClosed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n\n      // Get the client so it is awaiting a handshake response\n      harness.client.connect();\n      harness.transport.state.and.returnValue(\"connecting\");\n      harness.transport.emit(\"connecting\");\n      harness.transport.state.and.returnValue(\"connected\");\n      harness.transport.emit(\"connect\"); // Transport will send Handshake message\n\n      // Check all state functions\n      expect(harness.client.state()).toBe(\"connecting\");\n      expect(() => {\n        harness.client.id();\n      }).toThrow(new Error(\"INVALID_STATE: Not connected.\"));\n      expect(feedWantedOpen.desiredState()).toBe(\"open\");\n      expect(feedWantedOpen.state()).toBe(\"closed\");\n      expect(() => {\n        feedWantedOpen.data();\n      }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n      expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n      expect(feedWantedClosed.state()).toBe(\"closed\");\n      expect(() => {\n        feedWantedClosed.data();\n      }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n\n      // Call disconnect and have the transport emit disconnect\n      harness.client.disconnect();\n      harness.transport.state.and.returnValue(\"disconnected\");\n      harness.transport.emit(\"disconnect\");\n\n      // Check all state functions\n      expect(harness.client.state()).toBe(\"disconnected\");\n      expect(() => {\n        harness.client.id();\n      }).toThrow(new Error(\"INVALID_STATE: Not connected.\"));\n      expect(feedWantedOpen.desiredState()).toBe(\"open\");\n      expect(feedWantedOpen.state()).toBe(\"closed\");\n      expect(() => {\n        feedWantedOpen.data();\n      }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n      expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n      expect(feedWantedClosed.state()).toBe(\"closed\");\n      expect(() => {\n        feedWantedClosed.data();\n      }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n    });\n\n    it(\"should work correctly if called while while client is connected\", () => {\n      // Create a connected client and two feeds\n      const harness = harnessFactory();\n      const feedWantedOpen = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      feedWantedOpen.desireOpen();\n      const feedWantedClosed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      harness.connectClient();\n\n      // Check all state functions\n      expect(harness.client.state()).toBe(\"connected\");\n      expect(harness.client.id()).toBe(\"SOME_CLIENT_ID\");\n      expect(feedWantedOpen.desiredState()).toBe(\"open\");\n      expect(feedWantedOpen.state()).toBe(\"opening\");\n      expect(() => {\n        feedWantedOpen.data();\n      }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n      expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n      expect(feedWantedClosed.state()).toBe(\"closed\");\n      expect(() => {\n        feedWantedClosed.data();\n      }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n\n      // Call disconnect and have the transport emit disconnect\n      harness.client.disconnect();\n      harness.transport.state.and.returnValue(\"disconnected\");\n      harness.transport.emit(\"disconnect\");\n\n      // Check all state functions\n      expect(harness.client.state()).toBe(\"disconnected\");\n      expect(() => {\n        harness.client.id();\n      }).toThrow(new Error(\"INVALID_STATE: Not connected.\"));\n      expect(feedWantedOpen.desiredState()).toBe(\"open\");\n      expect(feedWantedOpen.state()).toBe(\"closed\");\n      expect(() => {\n        feedWantedOpen.data();\n      }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n      expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n      expect(feedWantedClosed.state()).toBe(\"closed\");\n      expect(() => {\n        feedWantedClosed.data();\n      }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n    });\n  });\n\n  // Client and feed events\n\n  describe(\"client and feed event effects\", () => {\n    it(\"should work correctly if called while transport connecting\", () => {\n      // Create a disconnected client and two feeds\n      const harness = harnessFactory();\n      const feedWantedOpen = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      feedWantedOpen.desireOpen();\n      const feedWantedClosed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n\n      // Put the client in a connecting state\n      harness.client.connect();\n      harness.transport.state.and.returnValue(\"connecting\");\n      harness.transport.emit(\"connecting\");\n\n      // Create listeners\n      const clientListener = harness.createClientListener();\n      const feedWantedOpenListener = harness.createFeedListener(feedWantedOpen);\n      const feedWantedClosedListener = harness.createFeedListener(\n        feedWantedClosed\n      );\n\n      // Call disconnect and have the transport emit disconnect\n      harness.client.disconnect();\n      harness.transport.state.and.returnValue(\"disconnected\");\n      harness.transport.emit(\"disconnect\");\n\n      // Check all client and feed events\n      expect(clientListener.connecting.calls.count()).toBe(0);\n      expect(clientListener.connect.calls.count()).toBe(0);\n      expect(clientListener.disconnect.calls.count()).toBe(1);\n      expect(clientListener.disconnect.calls.argsFor(0).length).toBe(0); // Requested\n      expect(clientListener.badServerMessage.calls.count()).toBe(0);\n      expect(clientListener.badClientMessage.calls.count()).toBe(0);\n      expect(clientListener.transportError.calls.count()).toBe(0);\n      expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n      expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n      expect(feedWantedOpenListener.close.calls.count()).toBe(0); // Feed was never opening (no handshake)\n      expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n    });\n\n    it(\"should work correctly if called while awaiting handshake response\", () => {\n      // Create a disconnected client and two feeds\n      const harness = harnessFactory();\n      const feedWantedOpen = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      feedWantedOpen.desireOpen();\n      const feedWantedClosed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n\n      // Get the client so it is awaiting a handshake response\n      harness.client.connect();\n      harness.transport.state.and.returnValue(\"connecting\");\n      harness.transport.emit(\"connecting\");\n      harness.transport.state.and.returnValue(\"connected\");\n      harness.transport.emit(\"connect\"); // Transport will send Handshake message\n\n      // Create listeners\n      const clientListener = harness.createClientListener();\n      const feedWantedOpenListener = harness.createFeedListener(feedWantedOpen);\n      const feedWantedClosedListener = harness.createFeedListener(\n        feedWantedClosed\n      );\n\n      // Call disconnect and have the transport emit disconnect\n      harness.client.disconnect();\n      harness.transport.state.and.returnValue(\"disconnected\");\n      harness.transport.emit(\"disconnect\");\n\n      // Check all client and feed events\n      expect(clientListener.connecting.calls.count()).toBe(0);\n      expect(clientListener.connect.calls.count()).toBe(0);\n      expect(clientListener.disconnect.calls.count()).toBe(1);\n      expect(clientListener.disconnect.calls.argsFor(0).length).toBe(0); // Requested\n      expect(clientListener.badServerMessage.calls.count()).toBe(0);\n      expect(clientListener.badClientMessage.calls.count()).toBe(0);\n      expect(clientListener.transportError.calls.count()).toBe(0);\n      expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n      expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n      expect(feedWantedOpenListener.close.calls.count()).toBe(0); // Feed was never opening (no handshake)\n      expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n      // Reset listeners\n      clientListener.spyClear();\n      feedWantedOpenListener.spyClear();\n      feedWantedClosedListener.spyClear();\n    });\n\n    it(\"should work correctly if called while while client is connected\", () => {\n      // Create a connected client and two feeds\n      const harness = harnessFactory();\n      harness.connectClient();\n      const feedWantedOpen = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      feedWantedOpen.desireOpen();\n      const feedWantedClosed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n\n      // Create listeners\n      const clientListener = harness.createClientListener();\n      const feedWantedOpenListener = harness.createFeedListener(feedWantedOpen);\n      const feedWantedClosedListener = harness.createFeedListener(\n        feedWantedClosed\n      );\n\n      // Call disconnect and have the transport emit disconnect\n      harness.client.disconnect();\n      harness.transport.state.and.returnValue(\"disconnected\");\n      harness.transport.emit(\"disconnect\");\n\n      // Check all client and feed events\n      expect(clientListener.connecting.calls.count()).toBe(0);\n      expect(clientListener.connect.calls.count()).toBe(0);\n      expect(clientListener.disconnect.calls.count()).toBe(1);\n      expect(clientListener.disconnect.calls.argsFor(0).length).toBe(0); // Requested\n      expect(clientListener.badServerMessage.calls.count()).toBe(0);\n      expect(clientListener.badClientMessage.calls.count()).toBe(0);\n      expect(clientListener.transportError.calls.count()).toBe(0);\n      expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n      expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n      expect(feedWantedOpenListener.close.calls.count()).toBe(1); // Feed was opening\n      expect(feedWantedOpenListener.close.calls.argsFor(0).length).toBe(1);\n      expect(feedWantedOpenListener.close.calls.argsFor(0)[0]).toEqual(\n        jasmine.any(Error)\n      );\n      expect(feedWantedOpenListener.close.calls.argsFor(0)[0].message).toBe(\n        \"DISCONNECTED: The transport disconnected.\"\n      );\n      expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n      // Reset listeners\n      clientListener.spyClear();\n      feedWantedOpenListener.spyClear();\n      feedWantedClosedListener.spyClear();\n    });\n  });\n\n  // Transport calls\n\n  describe(\"transport calls\", () => {\n    it(\"should work correctly if called while transport connecting\", () => {\n      // Create a disconnected client and two feeds\n      const harness = harnessFactory();\n\n      // Put the client in a connecting state\n      harness.client.connect();\n      harness.transport.state.and.returnValue(\"connecting\");\n      harness.transport.emit(\"connecting\");\n\n      // Reset transport spies\n      harness.transport.spyClear();\n\n      // Call disconnect and have the transport emit disconnect\n      harness.client.disconnect();\n      harness.transport.state.and.returnValue(\"disconnected\");\n      harness.transport.emit(\"disconnect\");\n\n      // Check all transport calls\n      expect(harness.transport.connect.calls.count()).toBe(0);\n      expect(harness.transport.disconnect.calls.count()).toBe(1);\n      expect(harness.transport.disconnect.calls.argsFor(0).length).toBe(0);\n      expect(harness.transport.send.calls.count()).toBe(0);\n      expect(harness.transport.state.calls.count() >= 0).toBe(true);\n    });\n\n    it(\"should work correctly if called while awaiting handshake response\", () => {\n      // Create a disconnected client and two feeds\n      const harness = harnessFactory();\n\n      // Get the client so it is awaiting a handshake response\n      harness.client.connect();\n      harness.transport.state.and.returnValue(\"connecting\");\n      harness.transport.emit(\"connecting\");\n      harness.transport.state.and.returnValue(\"connected\");\n      harness.transport.emit(\"connect\"); // Transport will send Handshake message\n\n      // Reset transport spies\n      harness.transport.spyClear();\n\n      // Call disconnect and have the transport emit disconnect\n      harness.client.disconnect();\n      harness.transport.state.and.returnValue(\"disconnected\");\n      harness.transport.emit(\"disconnect\");\n\n      // Check all transport calls\n      expect(harness.transport.connect.calls.count()).toBe(0);\n      expect(harness.transport.disconnect.calls.count()).toBe(1);\n      expect(harness.transport.disconnect.calls.argsFor(0).length).toBe(0);\n      expect(harness.transport.send.calls.count()).toBe(0);\n      expect(harness.transport.state.calls.count() >= 0).toBe(true);\n    });\n\n    it(\"should work correctly if called while while client is connected\", () => {\n      // Create a connected client and two feeds\n      const harness = harnessFactory();\n      harness.connectClient();\n\n      // Reset transport spies\n      harness.transport.spyClear();\n\n      // Call disconnect and have the transport emit disconnect\n      harness.client.disconnect();\n      harness.transport.state.and.returnValue(\"disconnected\");\n      harness.transport.emit(\"disconnect\");\n\n      // Check all transport calls\n      expect(harness.transport.connect.calls.count()).toBe(0);\n      expect(harness.transport.disconnect.calls.count()).toBe(1);\n      expect(harness.transport.disconnect.calls.argsFor(0).length).toBe(0);\n      expect(harness.transport.send.calls.count()).toBe(0);\n      expect(harness.transport.state.calls.count() >= 0).toBe(true);\n    });\n  });\n\n  // Callbacks - N/A\n\n  afterEach(() => {\n    jasmine.clock().uninstall();\n  });\n});\n\ndescribe(\"The client.action() function\", () => {\n  beforeEach(() => {\n    jasmine.clock().install();\n  });\n\n  // Errors and return values\n\n  describe(\"throw and return - callback style\", () => {\n    it(\"should throw on bad argument (just test one)\", () => {\n      const harness = harnessFactory();\n      harness.connectClient();\n      expect(() => {\n        harness.client.action(\"some_action\", { action: \"args\" }, \"junk\");\n      }).toThrow(new Error(\"INVALID_ARGUMENT: Invalid callback.\"));\n    });\n\n    it(\"should throw if not connected\", () => {\n      const harness = harnessFactory();\n      expect(() => {\n        harness.client.action(\"SomeAction\", {}, () => {});\n      }).toThrow(new Error(\"INVALID_STATE: Not connected.\"));\n    });\n\n    it(\"should return void on success\", () => {\n      const harness = harnessFactory();\n      harness.connectClient();\n      expect(harness.client.action(\"SomeAction\", {}, () => {})).toBeUndefined();\n    });\n  });\n\n  // describe(\"throw and return - promise style\", function() {\n  //   it(\"should throw on bad argument (just test one)\", function() {\n  //     var harness = harnessFactory();\n  //     harness.connectClient();\n  //     expect(function() {\n  //       harness.client.action(\"some_action\", 123);\n  //     }).toThrow(\n  //       new Error(\"INVALID_ARGUMENT: Invalid action arguments object.\")\n  //     );\n  //   });\n\n  //   it(\"should throw if not connected\", function() {\n  //     var harness = harnessFactory();\n  //     expect(function() {\n  //       harness.client.action(\"SomeAction\", {});\n  //     }).toThrow(new Error(\"INVALID_STATE: Not connected.\"));\n  //   });\n\n  //   it(\"should return promise on success\", function() {\n  //     var harness = harnessFactory();\n  //     harness.connectClient();\n  //     expect(harness.client.action(\"SomeAction\", {})).toEqual(\n  //       jasmine.any(Promise)\n  //     );\n  //   });\n  // });\n\n  // Client and feed state functions - N/A\n\n  // Client and feed events - N/A\n\n  // Transport calls\n\n  describe(\"transport calls - callback style\", () => {\n    it(\"should send an Action message on the transport\", () => {\n      const harness = harnessFactory();\n      harness.connectClient();\n\n      // Reset transport spies\n      harness.transport.spyClear();\n\n      // Invoke an action\n      harness.client.action(\"SomeAction\", { Action: \"Arg\" }, () => {});\n\n      // Check all transport calls\n      expect(harness.transport.connect.calls.count()).toBe(0);\n      expect(harness.transport.disconnect.calls.count()).toBe(0);\n      expect(harness.transport.send.calls.count()).toBe(1);\n      expect(harness.transport.send.calls.argsFor(0).length).toBe(1);\n      // You can't check the whole message in one go, since callback id is created internally\n      const msg = JSON.parse(harness.transport.send.calls.argsFor(0)[0]);\n      expect(msg.MessageType).toBe(\"Action\");\n      expect(msg.ActionName).toBe(\"SomeAction\");\n      expect(msg.ActionArgs).toEqual({ Action: \"Arg\" });\n      expect(\n        typeof msg.CallbackId === \"string\" || msg.CallbackId instanceof String\n      ).toBe(true);\n      expect(harness.transport.state.calls.count() >= 0).toBe(true);\n    });\n  });\n\n  // describe(\"transport calls - promise style\", function() {\n  //   it(\"should send an Action message on the transport\", function() {\n  //     var harness = harnessFactory();\n  //     harness.connectClient();\n\n  //     // Reset transport spies\n  //     harness.transport.spyClear();\n\n  //     // Invoke an action\n  //     harness.client.action(\"SomeAction\", { Action: \"Arg\" });\n\n  //     // Check all transport calls\n  //     expect(harness.transport.connect.calls.count()).toBe(0);\n  //     expect(harness.transport.disconnect.calls.count()).toBe(0);\n  //     expect(harness.transport.send.calls.count()).toBe(1);\n  //     expect(harness.transport.send.calls.argsFor(0).length).toBe(1);\n  //     // You can't check the whole message in one go, since callback id is created internally\n  //     var msg = JSON.parse(harness.transport.send.calls.argsFor(0)[0]);\n  //     expect(msg.MessageType).toBe(\"Action\");\n  //     expect(msg.ActionName).toBe(\"SomeAction\");\n  //     expect(msg.ActionArgs).toEqual({ Action: \"Arg\" });\n  //     expect(\n  //       typeof msg.CallbackId === \"string\" || msg.CallbackId instanceof String\n  //     ).toBe(true);\n  //     expect(harness.transport.state.calls.count() >= 0).toBe(true);\n  //   });\n  // });\n\n  // Callbacks\n\n  describe(\"callbacks - callback style\", () => {\n    it(\"should operate correctly through a timeout cycle to final success\", () => {\n      const harness = harnessFactory();\n      harness.connectClient();\n\n      // Reset the transport so you can get the callback\n      harness.transport.spyClear();\n\n      // Create callbacks and invoke an action\n      const cb = jasmine.createSpy();\n      const cbLate = jasmine.createSpy();\n      harness.client.action(\"SomeAction\", { Action: \"Arg\" }, cb, cbLate);\n\n      // Get the CallbackId sent with the Action message\n      const serverCb = JSON.parse(harness.transport.send.calls.argsFor(0)[0])\n        .CallbackId;\n\n      // Check callbacks\n      expect(cb.calls.count()).toBe(0);\n      expect(cbLate.calls.count()).toBe(0);\n\n      // Run the timeout\n      jasmine.clock().tick(harness.client._options.actionTimeoutMs);\n\n      // Check callbacks\n      expect(cb.calls.count()).toBe(1);\n      expect(cb.calls.argsFor(0).length).toBe(1);\n      expect(cb.calls.argsFor(0)[0]).toEqual(jasmine.any(Error));\n      expect(cb.calls.argsFor(0)[0].message).toBe(\n        \"TIMEOUT: The server did not respond within the allocated time.\"\n      );\n      expect(cbLate.calls.count()).toBe(0);\n\n      // Reset the callbacks\n      cb.calls.reset();\n      cbLate.calls.reset();\n\n      // Have the server return success\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"ActionResponse\",\n          CallbackId: serverCb,\n          Success: true,\n          ActionData: { Action: \"Data\" }\n        })\n      );\n\n      // Check callbacks\n      expect(cb.calls.count()).toBe(0);\n      expect(cbLate.calls.count()).toBe(1);\n      expect(cbLate.calls.argsFor(0).length).toBe(2);\n      expect(cbLate.calls.argsFor(0)[0]).toBeUndefined();\n      expect(cbLate.calls.argsFor(0)[1]).toEqual({ Action: \"Data\" });\n    });\n\n    it(\"should operate correctly through a timeout cycle to final disconnect\", () => {\n      const harness = harnessFactory();\n      harness.connectClient();\n\n      // Reset the transport so you can get the callback\n      harness.transport.spyClear();\n\n      // Create callbacks and invoke an action\n      const cb = jasmine.createSpy();\n      const cbLate = jasmine.createSpy();\n      harness.client.action(\"SomeAction\", { Action: \"Arg\" }, cb, cbLate);\n\n      // Check callbacks\n      expect(cb.calls.count()).toBe(0);\n      expect(cbLate.calls.count()).toBe(0);\n\n      // Run the timeout\n      jasmine.clock().tick(harness.client._options.actionTimeoutMs);\n\n      // Check callbacks\n      expect(cb.calls.count()).toBe(1);\n      expect(cb.calls.argsFor(0).length).toBe(1);\n      expect(cb.calls.argsFor(0)[0]).toEqual(jasmine.any(Error));\n      expect(cb.calls.argsFor(0)[0].message).toBe(\n        \"TIMEOUT: The server did not respond within the allocated time.\"\n      );\n      expect(cbLate.calls.count()).toBe(0);\n\n      // Reset the callbacks\n      cb.calls.reset();\n      cbLate.calls.reset();\n\n      // Have the client disconnect (requested in this case)\n      harness.client.disconnect();\n      harness.transport.state.and.returnValue(\"disconnected\");\n      harness.transport.emit(\"disconnect\");\n\n      // Check callbacks\n      expect(cb.calls.count()).toBe(0);\n      expect(cbLate.calls.count()).toBe(1);\n      expect(cbLate.calls.argsFor(0).length).toBe(1);\n      expect(cbLate.calls.argsFor(0)[0]).toEqual(jasmine.any(Error));\n      expect(cbLate.calls.argsFor(0)[0].message).toBe(\n        \"DISCONNECTED: The transport disconnected.\"\n      );\n    });\n\n    it(\"should operate correctly through a timeout cycle to final reject\", () => {\n      const harness = harnessFactory();\n      harness.connectClient();\n\n      // Reset the transport so you can get the callback\n      harness.transport.spyClear();\n\n      // Create callbacks and invoke an action\n      const cb = jasmine.createSpy();\n      const cbLate = jasmine.createSpy();\n      harness.client.action(\"SomeAction\", { Action: \"Arg\" }, cb, cbLate);\n\n      // Get the CallbackId sent with the Action message\n      const serverCb = JSON.parse(harness.transport.send.calls.argsFor(0)[0])\n        .CallbackId;\n\n      // Check callbacks\n      expect(cb.calls.count()).toBe(0);\n      expect(cbLate.calls.count()).toBe(0);\n\n      // Run the timeout\n      jasmine.clock().tick(harness.client._options.actionTimeoutMs);\n\n      // Check callbacks\n      expect(cb.calls.count()).toBe(1);\n      expect(cb.calls.argsFor(0).length).toBe(1);\n      expect(cb.calls.argsFor(0)[0]).toEqual(jasmine.any(Error));\n      expect(cb.calls.argsFor(0)[0].message).toBe(\n        \"TIMEOUT: The server did not respond within the allocated time.\"\n      );\n      expect(cbLate.calls.count()).toBe(0);\n\n      // Reset the callbacks\n      cb.calls.reset();\n      cbLate.calls.reset();\n\n      // Have the server reject the action\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"ActionResponse\",\n          CallbackId: serverCb,\n          Success: false,\n          ErrorCode: \"SERVER_ERROR_CODE\",\n          ErrorData: { Server: \"Data\" }\n        })\n      );\n\n      // Check callbacks\n      expect(cb.calls.count()).toBe(0);\n      expect(cbLate.calls.count()).toBe(1);\n      expect(cbLate.calls.argsFor(0).length).toBe(1);\n      expect(cbLate.calls.argsFor(0)[0]).toEqual(jasmine.any(Error));\n      expect(cbLate.calls.argsFor(0)[0].message).toBe(\n        \"REJECTED: Server rejected the action request.\"\n      );\n      expect(cbLate.calls.argsFor(0)[0].serverErrorCode).toBe(\n        \"SERVER_ERROR_CODE\"\n      );\n      expect(cbLate.calls.argsFor(0)[0].serverErrorData).toEqual({\n        Server: \"Data\"\n      });\n    });\n\n    it(\"should operate correctly on success\", () => {\n      const harness = harnessFactory();\n      harness.connectClient();\n\n      // Reset the transport so you can get the callback\n      harness.transport.spyClear();\n\n      // Create callbacks and invoke an action\n      const cb = jasmine.createSpy();\n      const cbLate = jasmine.createSpy();\n      harness.client.action(\"SomeAction\", { Action: \"Arg\" }, cb, cbLate);\n\n      // Get the CallbackId sent with the Action message\n      const serverCb = JSON.parse(harness.transport.send.calls.argsFor(0)[0])\n        .CallbackId;\n\n      // Check callbacks\n      expect(cb.calls.count()).toBe(0);\n      expect(cbLate.calls.count()).toBe(0);\n\n      // Have the server return success\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"ActionResponse\",\n          CallbackId: serverCb,\n          Success: true,\n          ActionData: { Action: \"Data\" }\n        })\n      );\n\n      // Check callbacks\n      expect(cb.calls.count()).toBe(1);\n      expect(cb.calls.argsFor(0).length).toBe(2);\n      expect(cb.calls.argsFor(0)[0]).toBeUndefined();\n      expect(cb.calls.argsFor(0)[1]).toEqual({ Action: \"Data\" });\n      expect(cbLate.calls.count()).toBe(0);\n    });\n\n    it(\"should operate correctly on disconnect\", () => {\n      const harness = harnessFactory();\n      harness.connectClient();\n\n      // Reset the transport so you can get the callback\n      harness.transport.spyClear();\n\n      // Create callbacks and invoke an action\n      const cb = jasmine.createSpy();\n      const cbLate = jasmine.createSpy();\n      harness.client.action(\"SomeAction\", { Action: \"Arg\" }, cb, cbLate);\n\n      // Check callbacks\n      expect(cb.calls.count()).toBe(0);\n      expect(cbLate.calls.count()).toBe(0);\n\n      // Have the client disconnect (requested in this case)\n      harness.client.disconnect();\n      harness.transport.state.and.returnValue(\"disconnected\");\n      harness.transport.emit(\"disconnect\");\n\n      // Check callbacks\n      expect(cb.calls.count()).toBe(1);\n      expect(cb.calls.argsFor(0).length).toBe(1);\n      expect(cb.calls.argsFor(0)[0]).toEqual(jasmine.any(Error));\n      expect(cb.calls.argsFor(0)[0].message).toBe(\n        \"DISCONNECTED: The transport disconnected.\"\n      );\n      expect(cbLate.calls.count()).toBe(0);\n    });\n\n    it(\"should operate correctly on reject\", () => {\n      const harness = harnessFactory();\n      harness.connectClient();\n\n      // Reset the transport so you can get the callback\n      harness.transport.spyClear();\n\n      // Create callbacks and invoke an action\n      const cb = jasmine.createSpy();\n      const cbLate = jasmine.createSpy();\n      harness.client.action(\"SomeAction\", { Action: \"Arg\" }, cb, cbLate);\n\n      // Get the CallbackId sent with the Action message\n      const serverCb = JSON.parse(harness.transport.send.calls.argsFor(0)[0])\n        .CallbackId;\n\n      // Check callbacks\n      expect(cb.calls.count()).toBe(0);\n      expect(cbLate.calls.count()).toBe(0);\n\n      // Have the server reject the action\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"ActionResponse\",\n          CallbackId: serverCb,\n          Success: false,\n          ErrorCode: \"SERVER_ERROR_CODE\",\n          ErrorData: { Server: \"Data\" }\n        })\n      );\n\n      // Check callbacks\n      expect(cb.calls.count()).toBe(1);\n      expect(cb.calls.argsFor(0).length).toBe(1);\n      expect(cb.calls.argsFor(0)[0]).toEqual(jasmine.any(Error));\n      expect(cb.calls.argsFor(0)[0].message).toBe(\n        \"REJECTED: Server rejected the action request.\"\n      );\n      expect(cb.calls.argsFor(0)[0].serverErrorCode).toBe(\"SERVER_ERROR_CODE\");\n      expect(cb.calls.argsFor(0)[0].serverErrorData).toEqual({\n        Server: \"Data\"\n      });\n      expect(cbLate.calls.count()).toBe(0);\n    });\n  });\n\n  describe(\"callbacks - promise style\", () => {\n    it(\"should operate correctly on action success\", done => {\n      const harness = harnessFactory();\n      harness.connectClient();\n\n      // Reset the transport so you can get the callback\n      harness.transport.spyClear();\n\n      // Create callbacks and invoke an action\n      harness.client\n        .action(\"SomeAction\", { Action: \"Arg\" })\n        .then(actionData => {\n          expect(actionData).toEqual({ Action: \"Data\" });\n          done();\n        });\n\n      // Get the CallbackId sent with the Action message and return success\n      const serverCb = JSON.parse(harness.transport.send.calls.argsFor(0)[0])\n        .CallbackId;\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"ActionResponse\",\n          CallbackId: serverCb,\n          Success: true,\n          ActionData: { Action: \"Data\" }\n        })\n      );\n    });\n\n    it(\"should operate correctly on action rejection\", done => {\n      const harness = harnessFactory();\n      harness.connectClient();\n\n      // Reset the transport so you can get the callback\n      harness.transport.spyClear();\n\n      // Create callbacks and invoke an action\n      harness.client.action(\"SomeAction\", { Action: \"Arg\" }).catch(err => {\n        expect(err).toEqual(jasmine.any(Error));\n        expect(err.message).toEqual(\n          \"REJECTED: Server rejected the action request.\"\n        );\n        expect(err.serverErrorCode).toBe(\"SOME_ERROR\");\n        expect(err.serverErrorData).toEqual({ Error: \"Data\" });\n        done();\n      });\n\n      // Get the CallbackId sent with the Action message and return success\n      const serverCb = JSON.parse(harness.transport.send.calls.argsFor(0)[0])\n        .CallbackId;\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"ActionResponse\",\n          CallbackId: serverCb,\n          Success: false,\n          ErrorCode: \"SOME_ERROR\",\n          ErrorData: { Error: \"Data\" }\n        })\n      );\n    });\n\n    it(\"should operate correctly on timeout\", done => {\n      const harness = harnessFactory();\n      harness.connectClient();\n\n      // Reset the transport so you can get the callback\n      harness.transport.spyClear();\n\n      // Create callbacks and invoke an action\n      harness.client.action(\"SomeAction\", { Action: \"Arg\" }).catch(err => {\n        expect(err).toEqual(jasmine.any(Error));\n        expect(err.message).toBe(\n          \"TIMEOUT: The server did not respond within the allocated time.\"\n        );\n        done();\n      });\n\n      // Run the timeout\n      jasmine.clock().tick(harness.client._options.actionTimeoutMs);\n    });\n\n    it(\"should operate correctly on disconnect\", done => {\n      const harness = harnessFactory();\n      harness.connectClient();\n\n      // Reset the transport so you can get the callback\n      harness.transport.spyClear();\n\n      // Create callbacks and invoke an action\n      harness.client.action(\"SomeAction\", { Action: \"Arg\" }).catch(err => {\n        expect(err).toEqual(jasmine.any(Error));\n        expect(err.message).toBe(\"DISCONNECTED: The transport disconnected.\");\n        done();\n      });\n\n      // Have the client disconnect (requested in this case)\n      harness.client.disconnect();\n      harness.transport.state.and.returnValue(\"disconnected\");\n      harness.transport.emit(\"disconnect\");\n    });\n  });\n\n  afterEach(() => {\n    jasmine.clock().uninstall();\n  });\n});\n\ndescribe(\"The client.feed() function\", () => {\n  // Errors and return values\n\n  describe(\"throw and return\", () => {\n    it(\"should throw on bad argument (check one)\", () => {\n      const harness = harnessFactory();\n      expect(() => {\n        harness.client.feed(); // No args\n      }).toThrow(new Error(\"INVALID_ARGUMENT: Invalid feed name.\"));\n    });\n\n    it(\"should return an object on success\", () => {\n      const harness = harnessFactory();\n      expect(harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" })).toEqual(\n        jasmine.any(Object)\n      );\n    });\n  });\n\n  // Client and feed state functions - N/A\n\n  // Client and feed events - N/A\n\n  // Transport calls - N/A\n\n  // Callbacks - N/A\n});\n\n/*\n\nThe feed.desireOpen() and feed.desireClosed() functions are tested using\na somewhat different approach than other functions. Instead of branching\ninto state functions, events, and transport calls at the root, the root\nis used to branch into the various possible cases of (1) whether any other\nfeeds are desired open, and (2) the current state of the server feed. State\nfunctions, events, and transport calls are then tested internally for each.\n\n*/\n\ndescribe(\"The feed.desireOpen() function\", () => {\n  beforeEach(() => {\n    jasmine.clock().install();\n  });\n\n  describe(\"throw and return\", () => {\n    it(\"should throw if already desired open\", () => {\n      const harness = harnessFactory();\n      const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      feed.desireOpen();\n      expect(() => {\n        feed.desireOpen();\n      }).toThrow(\n        new Error(\"INVALID_FEED_STATE: The feed is already desired open.\")\n      );\n    });\n\n    it(\"should throw if destroyed\", () => {\n      const harness = harnessFactory();\n      const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      feed.destroy();\n      expect(() => {\n        feed.desireOpen();\n      }).toThrow(new Error(\"DESTROYED: The feed object has been destroyed.\"));\n    });\n\n    it(\"should return void on success\", () => {\n      const harness = harnessFactory();\n      const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      expect(feed.desireOpen()).toBeUndefined();\n    });\n  });\n\n  describe(\"if disconnected\", () => {\n    let harness;\n    beforeEach(() => {\n      harness = harnessFactory();\n    });\n\n    it(\"state functions\", () => {\n      const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n\n      // Check state functions\n      expect(feed.desiredState()).toBe(\"closed\");\n      expect(feed.state()).toBe(\"closed\");\n      expect(() => {\n        feed.data();\n      }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n\n      // Desire open\n      feed.desireOpen();\n\n      // Check state functions\n      expect(feed.desiredState()).toBe(\"open\");\n      expect(feed.state()).toBe(\"closed\");\n      expect(() => {\n        feed.data();\n      }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n    });\n\n    it(\"events\", () => {\n      const feedWantedOpen = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      const feedWantedClosed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      const feedWantedOpenListener = harness.createFeedListener(feedWantedOpen);\n      const feedWantedClosedListener = harness.createFeedListener(\n        feedWantedClosed\n      );\n\n      feedWantedOpen.desireOpen();\n\n      expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n      expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n      expect(feedWantedOpenListener.close.calls.count()).toBe(1);\n      expect(feedWantedOpenListener.close.calls.argsFor(0).length).toBe(1);\n      expect(feedWantedOpenListener.close.calls.argsFor(0)[0]).toEqual(\n        jasmine.any(Error)\n      );\n      expect(feedWantedOpenListener.close.calls.argsFor(0)[0].message).toBe(\n        \"DISCONNECTED: The client is not connected.\"\n      );\n      expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n    });\n\n    it(\"transport calls\", () => {\n      const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n\n      harness.transport.spyClear();\n\n      feed.desireOpen();\n\n      expect(harness.transport.connect.calls.count()).toBe(0);\n      expect(harness.transport.disconnect.calls.count()).toBe(0);\n      expect(harness.transport.send.calls.count()).toBe(0);\n      expect(harness.transport.state.calls.count() >= 0).toBe(true);\n    });\n  });\n\n  describe(\"if connected and no other feed objects are desired open\", () => {\n    describe(\"if the server feed is closed\", () => {\n      let harness;\n      beforeEach(() => {\n        harness = harnessFactory();\n        harness.connectClient();\n      });\n\n      describe(\"if the server responds to FeedOpen with success\", () => {\n        it(\"state functions\", () => {\n          // Desire feed open\n          const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n          feed.desireOpen();\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"open\");\n          expect(feed.state()).toBe(\"opening\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server return success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: true,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              FeedData: { Feed: \"Data\" }\n            })\n          );\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"open\");\n          expect(feed.state()).toBe(\"open\");\n          expect(feed.data()).toEqual({ Feed: \"Data\" });\n        });\n\n        it(\"events\", () => {\n          const feedWantedOpen = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedWantedClosed = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedWantedOpenListener = harness.createFeedListener(\n            feedWantedOpen\n          );\n          const feedWantedClosedListener = harness.createFeedListener(\n            feedWantedClosed\n          );\n\n          feedWantedOpen.desireOpen();\n\n          // Check events\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.opening.calls.argsFor(0).length).toBe(\n            0\n          );\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedWantedOpenListener.spyClear();\n          feedWantedClosedListener.spyClear();\n\n          // Have the server return success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: true,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              FeedData: { Feed: \"Data\" }\n            })\n          );\n\n          // Check events\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.open.calls.argsFor(0).length).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed open\n          feed.desireOpen();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0).length).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0)[0]).toBe(\n            JSON.stringify({\n              MessageType: \"FeedOpen\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server return success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: true,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              FeedData: { Feed: \"Data\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n\n      describe(\"if the server responds to FeedOpen with failure\", () => {\n        it(\"state functions\", () => {\n          // Desire feed open\n          const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n          feed.desireOpen();\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"open\");\n          expect(feed.state()).toBe(\"opening\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server return failure\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: false,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              ErrorCode: \"SOME_ERROR_CODE\",\n              ErrorData: { Error: \"Data\" }\n            })\n          );\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"open\");\n          expect(feed.state()).toBe(\"closed\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n        });\n\n        it(\"events\", () => {\n          const feedWantedOpen = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedWantedClosed = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedWantedOpenListener = harness.createFeedListener(\n            feedWantedOpen\n          );\n          const feedWantedClosedListener = harness.createFeedListener(\n            feedWantedClosed\n          );\n\n          feedWantedOpen.desireOpen();\n\n          // Check events\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.opening.calls.argsFor(0).length).toBe(\n            0\n          );\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedWantedOpenListener.spyClear();\n          feedWantedClosedListener.spyClear();\n\n          // Have the server return failure\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: false,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              ErrorCode: \"SOME_ERROR_CODE\",\n              ErrorData: { Error: \"Data\" }\n            })\n          );\n\n          // Check events\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0).length).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0]).toEqual(\n            jasmine.any(Error)\n          );\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0].message).toBe(\n            \"REJECTED: Server rejected the feed open request.\"\n          );\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed open\n          feed.desireOpen();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0).length).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0)[0]).toBe(\n            JSON.stringify({\n              MessageType: \"FeedOpen\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server return failure\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: false,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              ErrorCode: \"SOME_ERROR_CODE\",\n              ErrorData: { Error: \"Data\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n\n      describe(\"if the client disconnects before the server responds to FeedOpen\", () => {\n        it(\"state functions\", () => {\n          // Desire feed open\n          const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n          feed.desireOpen();\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"open\");\n          expect(feed.state()).toBe(\"opening\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"open\");\n          expect(feed.state()).toBe(\"closed\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n        });\n\n        it(\"events\", () => {\n          const feedWantedOpen = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedWantedClosed = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedWantedOpenListener = harness.createFeedListener(\n            feedWantedOpen\n          );\n          const feedWantedClosedListener = harness.createFeedListener(\n            feedWantedClosed\n          );\n\n          feedWantedOpen.desireOpen();\n\n          // Check events\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.opening.calls.argsFor(0).length).toBe(\n            0\n          );\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedWantedOpenListener.spyClear();\n          feedWantedClosedListener.spyClear();\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check events\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0).length).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0]).toEqual(\n            jasmine.any(Error)\n          );\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0].message).toBe(\n            \"DISCONNECTED: The transport disconnected.\"\n          );\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed open\n          feed.desireOpen();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0).length).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0)[0]).toBe(\n            JSON.stringify({\n              MessageType: \"FeedOpen\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count() >= 0).toBe(true); // Tries to reconnect by default\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n    });\n\n    describe(\"if the server feed is opening\", () => {\n      let harness;\n      beforeEach(() => {\n        harness = harnessFactory();\n        harness.connectClient();\n\n        // Get the server feed into the opening state\n        const earlierFeed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n        earlierFeed.desireOpen();\n      });\n\n      describe(\"if the server responds to earlier FeedOpen with success\", () => {\n        it(\"state functions\", () => {\n          // Desire feed open\n          const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n          feed.desireOpen();\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"open\");\n          expect(feed.state()).toBe(\"opening\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server return success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: true,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              FeedData: { Feed: \"Data\" }\n            })\n          );\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"open\");\n          expect(feed.state()).toBe(\"open\");\n          expect(feed.data()).toEqual({ Feed: \"Data\" });\n        });\n\n        it(\"events\", () => {\n          const feedWantedOpen = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedWantedClosed = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedWantedOpenListener = harness.createFeedListener(\n            feedWantedOpen\n          );\n          const feedWantedClosedListener = harness.createFeedListener(\n            feedWantedClosed\n          );\n\n          feedWantedOpen.desireOpen();\n\n          // Check events\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.opening.calls.argsFor(0).length).toBe(\n            0\n          );\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedWantedOpenListener.spyClear();\n          feedWantedClosedListener.spyClear();\n\n          // Have the server return success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: true,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              FeedData: { Feed: \"Data\" }\n            })\n          );\n\n          // Check events\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.open.calls.argsFor(0).length).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed open\n          feed.desireOpen();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server return success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: true,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              FeedData: { Feed: \"Data\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n\n      describe(\"if the server responds to earlier FeedOpen with failure\", () => {\n        it(\"state functions\", () => {\n          // Desire feed open\n          const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n          feed.desireOpen();\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"open\");\n          expect(feed.state()).toBe(\"opening\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server return failure\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: false,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              ErrorCode: \"SOME_ERROR_CODE\",\n              ErrorData: { Error: \"Data\" }\n            })\n          );\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"open\");\n          expect(feed.state()).toBe(\"closed\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n        });\n\n        it(\"events\", () => {\n          const feedWantedOpen = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedWantedClosed = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedWantedOpenListener = harness.createFeedListener(\n            feedWantedOpen\n          );\n          const feedWantedClosedListener = harness.createFeedListener(\n            feedWantedClosed\n          );\n\n          feedWantedOpen.desireOpen();\n\n          // Check events\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.opening.calls.argsFor(0).length).toBe(\n            0\n          );\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedWantedOpenListener.spyClear();\n          feedWantedClosedListener.spyClear();\n\n          // Have the server return failure\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: false,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              ErrorCode: \"SOME_ERROR_CODE\",\n              ErrorData: { Error: \"Data\" }\n            })\n          );\n\n          // Check events\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0).length).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0]).toEqual(\n            jasmine.any(Error)\n          );\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0].message).toBe(\n            \"REJECTED: Server rejected the feed open request.\"\n          );\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed open\n          feed.desireOpen();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server return failure\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: false,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              ErrorCode: \"SOME_ERROR_CODE\",\n              ErrorData: { Error: \"Data\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n\n      describe(\"if the client disconnects before the server responds to earlier FeedOpen\", () => {\n        it(\"state functions\", () => {\n          // Desire feed open\n          const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n          feed.desireOpen();\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"open\");\n          expect(feed.state()).toBe(\"opening\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"open\");\n          expect(feed.state()).toBe(\"closed\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n        });\n\n        it(\"events\", () => {\n          const feedWantedOpen = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedWantedClosed = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedWantedOpenListener = harness.createFeedListener(\n            feedWantedOpen\n          );\n          const feedWantedClosedListener = harness.createFeedListener(\n            feedWantedClosed\n          );\n\n          feedWantedOpen.desireOpen();\n\n          // Check events\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.opening.calls.argsFor(0).length).toBe(\n            0\n          );\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedWantedOpenListener.spyClear();\n          feedWantedClosedListener.spyClear();\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check events\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0).length).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0]).toEqual(\n            jasmine.any(Error)\n          );\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0].message).toBe(\n            \"DISCONNECTED: The transport disconnected.\"\n          );\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed open\n          feed.desireOpen();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count() >= 0).toBe(true); // Tries to reconnect by default\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n    });\n\n    describe(\"if the server feed is open\", () => {\n      // Can't happen - server feed would be closing if no other feeds objects desired open\n    });\n\n    describe(\"if the server feed is closing\", () => {\n      let harness;\n      beforeEach(() => {\n        // Get the server feed into the closing state\n        harness = harnessFactory();\n        harness.connectClient();\n\n        const earlierFeed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n        earlierFeed.desireOpen();\n\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"FeedOpenResponse\",\n            Success: true,\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" },\n            FeedData: { Feed: \"Data\" }\n          })\n        );\n\n        earlierFeed.desireClosed();\n      });\n\n      describe(\"if the server responds to earlier FeedClose with success and subsequent FeedOpen with success\", () => {\n        it(\"state functions\", () => {\n          // Desire feed open\n          const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n          feed.desireOpen();\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"open\");\n          expect(feed.state()).toBe(\"opening\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server return success to the earlier FeedClose\n          // Client will send FeedOpen message\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"open\");\n          expect(feed.state()).toBe(\"opening\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server respond to the FeedOpen message\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: true,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              FeedData: { Feed: \"Data\" }\n            })\n          );\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"open\");\n          expect(feed.state()).toBe(\"open\");\n          expect(feed.data()).toEqual({ Feed: \"Data\" });\n        });\n\n        it(\"events\", () => {\n          // Create feed listeners\n          const feedWantedOpen = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedWantedClosed = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedWantedOpenListener = harness.createFeedListener(\n            feedWantedOpen\n          );\n          const feedWantedClosedListener = harness.createFeedListener(\n            feedWantedClosed\n          );\n\n          // Desire feed open\n          feedWantedOpen.desireOpen();\n\n          // Check events\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.opening.calls.argsFor(0).length).toBe(\n            0\n          );\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedWantedOpenListener.spyClear();\n          feedWantedClosedListener.spyClear();\n\n          // Have the server return success to the earlier FeedClose\n          // Client will send FeedOpen message\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check events\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedWantedOpenListener.spyClear();\n          feedWantedClosedListener.spyClear();\n\n          // Have the server respond to the FeedOpen message\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: true,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              FeedData: { Feed: \"Data\" }\n            })\n          );\n\n          // Check events\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.open.calls.argsFor(0).length).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed open\n          feed.desireOpen();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server return success to the earlier FeedClose\n          // Client will send FeedOpen message\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0).length).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0)[0]).toBe(\n            JSON.stringify({\n              MessageType: \"FeedOpen\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server respond to the FeedOpen message\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: true,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              FeedData: { Feed: \"Data\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n\n      describe(\"if the server responds to earlier FeedClose with success and subsequent FeedOpen with failure\", () => {\n        it(\"state functions\", () => {\n          // Desire feed open\n          const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n          feed.desireOpen();\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"open\");\n          expect(feed.state()).toBe(\"opening\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server return success to the earlier FeedClose\n          // Client will send FeedOpen message\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"open\");\n          expect(feed.state()).toBe(\"opening\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server respond to the FeedOpen message\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: false,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              ErrorCode: \"SOME_ERROR_CODE\",\n              ErrorData: { Error: \"Data\" }\n            })\n          );\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"open\");\n          expect(feed.state()).toBe(\"closed\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n        });\n\n        it(\"events\", () => {\n          // Create feed listeners\n          const feedWantedOpen = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedWantedClosed = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedWantedOpenListener = harness.createFeedListener(\n            feedWantedOpen\n          );\n          const feedWantedClosedListener = harness.createFeedListener(\n            feedWantedClosed\n          );\n\n          // Desire feed open\n          feedWantedOpen.desireOpen();\n\n          // Check events\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.opening.calls.argsFor(0).length).toBe(\n            0\n          );\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedWantedOpenListener.spyClear();\n          feedWantedClosedListener.spyClear();\n\n          // Have the server return success to the earlier FeedClose\n          // Client will send FeedOpen message\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check events\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedWantedOpenListener.spyClear();\n          feedWantedClosedListener.spyClear();\n\n          // Have the server respond to the FeedOpen message\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: false,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              ErrorCode: \"SOME_ERROR_CODE\",\n              ErrorData: { Error: \"Data\" }\n            })\n          );\n\n          // Check events\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0).length).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0]).toEqual(\n            jasmine.any(Error)\n          );\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0].message).toBe(\n            \"REJECTED: Server rejected the feed open request.\"\n          );\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed open\n          feed.desireOpen();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server return success to the earlier FeedClose\n          // Client will send FeedOpen message\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0).length).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0)[0]).toBe(\n            JSON.stringify({\n              MessageType: \"FeedOpen\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server respond to the FeedOpen message\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: false,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              ErrorCode: \"SOME_ERROR_CODE\",\n              ErrorData: { Error: \"Data\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n\n      describe(\"if client disconnects before the server responds to the ealier FeedClose\", () => {\n        it(\"state functions\", () => {\n          // Desire feed open\n          const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n          feed.desireOpen();\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"open\");\n          expect(feed.state()).toBe(\"opening\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server return success to the earlier FeedClose\n          // Client will send FeedOpen message\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"open\");\n          expect(feed.state()).toBe(\"opening\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the transport disconnect\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"open\");\n          expect(feed.state()).toBe(\"closed\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n        });\n\n        it(\"events\", () => {\n          // Create feed listeners\n          const feedWantedOpen = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedWantedClosed = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedWantedOpenListener = harness.createFeedListener(\n            feedWantedOpen\n          );\n          const feedWantedClosedListener = harness.createFeedListener(\n            feedWantedClosed\n          );\n\n          // Desire feed open\n          feedWantedOpen.desireOpen();\n\n          // Check events\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.opening.calls.argsFor(0).length).toBe(\n            0\n          );\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedWantedOpenListener.spyClear();\n          feedWantedClosedListener.spyClear();\n\n          // Have the server return success to the earlier FeedClose\n          // Client will send FeedOpen message\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check events\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedWantedOpenListener.spyClear();\n          feedWantedClosedListener.spyClear();\n\n          // Have the transport disconnect\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check events\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0).length).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0]).toEqual(\n            jasmine.any(Error)\n          );\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0].message).toBe(\n            \"DISCONNECTED: The transport disconnected.\"\n          );\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed open\n          feed.desireOpen();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server return success to the earlier FeedClose\n          // Client will send FeedOpen message\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0).length).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0)[0]).toBe(\n            JSON.stringify({\n              MessageType: \"FeedOpen\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the transport disconnect\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count() >= 0).toBe(true); // Tries to reconnect by default\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n    });\n  });\n\n  describe(\"if connected and another feed object is desired open\", () => {\n    describe(\"if the server feed is closed\", () => {\n      let harness;\n      let feedAlreadyWantedOpen;\n      beforeEach(() => {\n        // Set up a connected client with a feed desired open but actually closed\n        harness = harnessFactory();\n        harness.connectClient();\n        feedAlreadyWantedOpen = harness.client.feed(\"SomeFeed\", {\n          Feed: \"Arg\"\n        });\n        feedAlreadyWantedOpen.desireOpen();\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"FeedOpenResponse\",\n            Success: false,\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" },\n            ErrorCode: \"SOME_ERROR_CODE\",\n            ErrorData: { Error: \"Data\" }\n          })\n        );\n      });\n\n      describe(\"if the server responds to FeedOpen with success\", () => {\n        it(\"state functions\", () => {\n          // Desire feed open\n          const feedWantedOpen = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          feedWantedOpen.desireOpen();\n\n          // Check state functions\n          expect(feedAlreadyWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedAlreadyWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedAlreadyWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server return success to FeedOpen\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: true,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              FeedData: { Feed: \"Data\" }\n            })\n          );\n\n          // Check state functions\n          expect(feedAlreadyWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedAlreadyWantedOpen.state()).toBe(\"open\");\n          expect(feedAlreadyWantedOpen.data()).toEqual({ Feed: \"Data\" });\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"open\");\n          expect(feedWantedOpen.data()).toEqual({ Feed: \"Data\" });\n        });\n\n        it(\"events\", () => {\n          // Create feed listeners\n          const feedWantedOpen = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedWantedClosed = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedAlreadyWantedOpenListener = harness.createFeedListener(\n            feedAlreadyWantedOpen\n          );\n          const feedWantedOpenListener = harness.createFeedListener(\n            feedWantedOpen\n          );\n          const feedWantedClosedListener = harness.createFeedListener(\n            feedWantedClosed\n          );\n\n          // Desire feed open\n          feedWantedOpen.desireOpen();\n\n          // Check events\n          expect(feedAlreadyWantedOpenListener.opening.calls.count()).toBe(1);\n          expect(\n            feedAlreadyWantedOpenListener.opening.calls.argsFor(0).length\n          ).toBe(0);\n          expect(feedAlreadyWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.opening.calls.argsFor(0).length).toBe(\n            0\n          );\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedAlreadyWantedOpenListener.spyClear();\n          feedWantedOpenListener.spyClear();\n          feedWantedClosedListener.spyClear();\n\n          // Have the server return success to FeedOpen\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: true,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              FeedData: { Feed: \"Data\" }\n            })\n          );\n\n          // Check events\n          expect(feedAlreadyWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.open.calls.count()).toBe(1);\n          expect(\n            feedAlreadyWantedOpenListener.open.calls.argsFor(0).length\n          ).toBe(0);\n          expect(feedAlreadyWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.open.calls.argsFor(0).length).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed open\n          feed.desireOpen();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0).length).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0)[0]).toBe(\n            JSON.stringify({\n              MessageType: \"FeedOpen\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server return success to FeedOpen\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: true,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              FeedData: { Feed: \"Data\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n\n      describe(\"if the server responds to FeedOpen with failure\", () => {\n        it(\"state functions\", () => {\n          // Desire feed open\n          const feedWantedOpen = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          feedWantedOpen.desireOpen();\n\n          // Check state functions\n          expect(feedAlreadyWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedAlreadyWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedAlreadyWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server return failure to FeedOpen\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: false,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              ErrorCode: \"SOME_ERROR_CODE\",\n              ErrorData: { Error: \"Data\" }\n            })\n          );\n\n          // Check state functions\n          expect(feedAlreadyWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedAlreadyWantedOpen.state()).toBe(\"closed\");\n          expect(() => {\n            feedAlreadyWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n        });\n\n        it(\"events\", () => {\n          // Create feed listeners\n          const feedWantedOpen = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedWantedClosed = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedAlreadyWantedOpenListener = harness.createFeedListener(\n            feedAlreadyWantedOpen\n          );\n          const feedWantedOpenListener = harness.createFeedListener(\n            feedWantedOpen\n          );\n          const feedWantedClosedListener = harness.createFeedListener(\n            feedWantedClosed\n          );\n\n          // Desire feed open\n          feedWantedOpen.desireOpen();\n\n          // Check events\n          expect(feedAlreadyWantedOpenListener.opening.calls.count()).toBe(1);\n          expect(\n            feedAlreadyWantedOpenListener.opening.calls.argsFor(0).length\n          ).toBe(0);\n          expect(feedAlreadyWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.opening.calls.argsFor(0).length).toBe(\n            0\n          );\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedAlreadyWantedOpenListener.spyClear();\n          feedWantedOpenListener.spyClear();\n          feedWantedClosedListener.spyClear();\n\n          // Have the server return failure to FeedOpen\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: false,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              ErrorCode: \"SOME_ERROR_CODE\",\n              ErrorData: { Error: \"Data\" }\n            })\n          );\n\n          // Check events\n          expect(feedAlreadyWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.close.calls.count()).toBe(1);\n          expect(\n            feedAlreadyWantedOpenListener.close.calls.argsFor(0).length\n          ).toBe(1);\n          expect(\n            feedAlreadyWantedOpenListener.close.calls.argsFor(0)[0]\n          ).toEqual(jasmine.any(Error));\n          expect(\n            feedAlreadyWantedOpenListener.close.calls.argsFor(0)[0].message\n          ).toBe(\"REJECTED: Server rejected the feed open request.\");\n          expect(feedAlreadyWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0).length).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0]).toEqual(\n            jasmine.any(Error)\n          );\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0].message).toBe(\n            \"REJECTED: Server rejected the feed open request.\"\n          );\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedWantedOpenListener.spyClear();\n          feedWantedClosedListener.spyClear();\n        });\n\n        it(\"transport calls\", () => {\n          const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed open\n          feed.desireOpen();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0).length).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0)[0]).toBe(\n            JSON.stringify({\n              MessageType: \"FeedOpen\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server return failure to FeedOpen\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: false,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              ErrorCode: \"SOME_ERROR_CODE\",\n              ErrorData: { Error: \"Data\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n\n      describe(\"if the client disconnects before the server responds to FeedOpen\", () => {\n        it(\"state functions\", () => {\n          // Desire feed open\n          const feedWantedOpen = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          feedWantedOpen.desireOpen();\n\n          // Check state functions\n          expect(feedAlreadyWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedAlreadyWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedAlreadyWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the client disconnect\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check state functions\n          expect(feedAlreadyWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedAlreadyWantedOpen.state()).toBe(\"closed\");\n          expect(() => {\n            feedAlreadyWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n        });\n\n        it(\"events\", () => {\n          // Create feed listeners\n          const feedWantedOpen = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedWantedClosed = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedAlreadyWantedOpenListener = harness.createFeedListener(\n            feedAlreadyWantedOpen\n          );\n          const feedWantedOpenListener = harness.createFeedListener(\n            feedWantedOpen\n          );\n          const feedWantedClosedListener = harness.createFeedListener(\n            feedWantedClosed\n          );\n\n          // Desire feed open\n          feedWantedOpen.desireOpen();\n\n          // Check events\n          expect(feedAlreadyWantedOpenListener.opening.calls.count()).toBe(1);\n          expect(\n            feedAlreadyWantedOpenListener.opening.calls.argsFor(0).length\n          ).toBe(0);\n          expect(feedAlreadyWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.opening.calls.argsFor(0).length).toBe(\n            0\n          );\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedAlreadyWantedOpenListener.spyClear();\n          feedWantedOpenListener.spyClear();\n          feedWantedClosedListener.spyClear();\n\n          // Have the client disconnect\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check events\n          expect(feedAlreadyWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.close.calls.count()).toBe(1);\n          expect(\n            feedAlreadyWantedOpenListener.close.calls.argsFor(0).length\n          ).toBe(1);\n          expect(\n            feedAlreadyWantedOpenListener.close.calls.argsFor(0)[0]\n          ).toEqual(jasmine.any(Error));\n          expect(\n            feedAlreadyWantedOpenListener.close.calls.argsFor(0)[0].message\n          ).toBe(\"DISCONNECTED: The transport disconnected.\");\n          expect(feedAlreadyWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0).length).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0]).toEqual(\n            jasmine.any(Error)\n          );\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0].message).toBe(\n            \"DISCONNECTED: The transport disconnected.\"\n          );\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedWantedOpenListener.spyClear();\n          feedWantedClosedListener.spyClear();\n        });\n\n        it(\"transport calls\", () => {\n          const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed open\n          feed.desireOpen();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0).length).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0)[0]).toBe(\n            JSON.stringify({\n              MessageType: \"FeedOpen\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the client disconnect\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count() >= 0).toBe(true); // Reconnects by default\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n    });\n\n    describe(\"if the server feed is opening\", () => {\n      let harness;\n      let feedAlreadyWantedOpen;\n      beforeEach(() => {\n        // Set up a connected client with a feed desired open and server feed opening\n        harness = harnessFactory();\n        harness.connectClient();\n        feedAlreadyWantedOpen = harness.client.feed(\"SomeFeed\", {\n          Feed: \"Arg\"\n        });\n        feedAlreadyWantedOpen.desireOpen();\n      });\n\n      describe(\"if the server responds to earlier FeedOpen with success\", () => {\n        it(\"state functions\", () => {\n          // Desire feed open\n          const feedWantedOpen = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          feedWantedOpen.desireOpen();\n\n          // Check state functions\n          expect(feedAlreadyWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedAlreadyWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedAlreadyWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server return success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: true,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              FeedData: { Feed: \"Data\" }\n            })\n          );\n\n          // Check state functions\n          expect(feedAlreadyWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedAlreadyWantedOpen.state()).toBe(\"open\");\n          expect(feedAlreadyWantedOpen.data()).toEqual({ Feed: \"Data\" });\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"open\");\n          expect(feedWantedOpen.data()).toEqual({ Feed: \"Data\" });\n        });\n\n        it(\"events\", () => {\n          // Create feed listeners\n          const feedWantedOpen = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedWantedClosed = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedAlreadyWantedOpenListener = harness.createFeedListener(\n            feedAlreadyWantedOpen\n          );\n          const feedWantedOpenListener = harness.createFeedListener(\n            feedWantedOpen\n          );\n          const feedWantedClosedListener = harness.createFeedListener(\n            feedWantedClosed\n          );\n\n          // Desire the feed open\n          feedWantedOpen.desireOpen();\n\n          // Check events\n          expect(feedAlreadyWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.opening.calls.argsFor(0).length).toBe(\n            0\n          );\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedAlreadyWantedOpenListener.spyClear();\n          feedWantedOpenListener.spyClear();\n          feedWantedClosedListener.spyClear();\n\n          // Have the server return success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: true,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              FeedData: { Feed: \"Data\" }\n            })\n          );\n\n          // Check events\n          expect(feedAlreadyWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.open.calls.count()).toBe(1);\n          expect(\n            feedAlreadyWantedOpenListener.open.calls.argsFor(0).length\n          ).toBe(0);\n          expect(feedAlreadyWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.open.calls.argsFor(0).length).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed open\n          feed.desireOpen();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.argsFor(0).length).toBe(0);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server return success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: true,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              FeedData: { Feed: \"Data\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n\n      describe(\"if the server responds to earlier FeedOpen with failure\", () => {\n        it(\"state functions\", () => {\n          // Desire feed open\n          const feedWantedOpen = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          feedWantedOpen.desireOpen();\n\n          // Check state functions\n          expect(feedAlreadyWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedAlreadyWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedAlreadyWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server return failure\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: false,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              ErrorCode: \"SOME_ERROR_CODE\",\n              ErrorData: { Error: \"Data\" }\n            })\n          );\n\n          // Check state functions\n          expect(feedAlreadyWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedAlreadyWantedOpen.state()).toBe(\"closed\");\n          expect(() => {\n            feedAlreadyWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n        });\n\n        it(\"events\", () => {\n          // Create feed listeners\n          const feedWantedOpen = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedWantedClosed = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedAlreadyWantedOpenListener = harness.createFeedListener(\n            feedAlreadyWantedOpen\n          );\n          const feedWantedOpenListener = harness.createFeedListener(\n            feedWantedOpen\n          );\n          const feedWantedClosedListener = harness.createFeedListener(\n            feedWantedClosed\n          );\n\n          // Desire feed open\n          feedWantedOpen.desireOpen();\n\n          // Check events\n          expect(feedAlreadyWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.opening.calls.argsFor(0).length).toBe(\n            0\n          );\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedAlreadyWantedOpenListener.spyClear();\n          feedWantedOpenListener.spyClear();\n          feedWantedClosedListener.spyClear();\n\n          // Have the server return failure\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: false,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              ErrorCode: \"SOME_ERROR_CODE\",\n              ErrorData: { Error: \"Data\" }\n            })\n          );\n\n          // Check events\n          expect(feedAlreadyWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.close.calls.count()).toBe(1);\n          expect(\n            feedAlreadyWantedOpenListener.close.calls.argsFor(0).length\n          ).toBe(1);\n          expect(\n            feedAlreadyWantedOpenListener.close.calls.argsFor(0)[0]\n          ).toEqual(jasmine.any(Error));\n          expect(\n            feedAlreadyWantedOpenListener.close.calls.argsFor(0)[0].message\n          ).toBe(\"REJECTED: Server rejected the feed open request.\");\n          expect(feedAlreadyWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0).length).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0]).toEqual(\n            jasmine.any(Error)\n          );\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0].message).toBe(\n            \"REJECTED: Server rejected the feed open request.\"\n          );\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed open\n          feed.desireOpen();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server return failure\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: false,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              ErrorCode: \"SOME_ERROR_CODE\",\n              ErrorData: { Error: \"Data\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n\n      describe(\"if the client disconnects before the server responds to earlier FeedOpen\", () => {\n        it(\"state functions\", () => {\n          // Desire feed open\n          const feedWantedOpen = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          feedWantedOpen.desireOpen();\n\n          // Check state functions\n          expect(feedAlreadyWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedAlreadyWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedAlreadyWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check state functions\n          expect(feedAlreadyWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedAlreadyWantedOpen.state()).toBe(\"closed\");\n          expect(() => {\n            feedAlreadyWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n        });\n\n        it(\"events\", () => {\n          // Create feed listeners\n          const feedWantedOpen = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedWantedClosed = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedAlreadyWantedOpenListener = harness.createFeedListener(\n            feedAlreadyWantedOpen\n          );\n          const feedWantedOpenListener = harness.createFeedListener(\n            feedWantedOpen\n          );\n          const feedWantedClosedListener = harness.createFeedListener(\n            feedWantedClosed\n          );\n\n          // Desire feed open\n          feedWantedOpen.desireOpen();\n\n          // Check events\n          expect(feedAlreadyWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.opening.calls.argsFor(0).length).toBe(\n            0\n          );\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedAlreadyWantedOpenListener.spyClear();\n          feedWantedOpenListener.spyClear();\n          feedWantedClosedListener.spyClear();\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check events\n          expect(feedAlreadyWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.close.calls.count()).toBe(1);\n          expect(\n            feedAlreadyWantedOpenListener.close.calls.argsFor(0).length\n          ).toBe(1);\n          expect(\n            feedAlreadyWantedOpenListener.close.calls.argsFor(0)[0]\n          ).toEqual(jasmine.any(Error));\n          expect(\n            feedAlreadyWantedOpenListener.close.calls.argsFor(0)[0].message\n          ).toBe(\"DISCONNECTED: The transport disconnected.\");\n          expect(feedAlreadyWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0).length).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0]).toEqual(\n            jasmine.any(Error)\n          );\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0].message).toBe(\n            \"DISCONNECTED: The transport disconnected.\"\n          );\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed open\n          feed.desireOpen();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count() >= 0).toBe(true); // Tries to reconnect by default\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n    });\n\n    describe(\"if the server feed is open\", () => {\n      let harness;\n      let feedAlreadyWantedOpen;\n      beforeEach(() => {\n        // Set up a connected client with a feed desired open and server feed open\n        harness = harnessFactory();\n        harness.connectClient();\n        feedAlreadyWantedOpen = harness.client.feed(\"SomeFeed\", {\n          Feed: \"Arg\"\n        });\n        feedAlreadyWantedOpen.desireOpen();\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"FeedOpenResponse\",\n            Success: true,\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" },\n            FeedData: { Feed: \"Data\" }\n          })\n        );\n      });\n\n      it(\"state functions\", () => {\n        // Desire feed open\n        const feedWantedOpen = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n        feedWantedOpen.desireOpen();\n\n        // Check state functions\n        expect(feedAlreadyWantedOpen.desiredState()).toBe(\"open\");\n        expect(feedAlreadyWantedOpen.state()).toBe(\"open\");\n        expect(feedAlreadyWantedOpen.data()).toEqual({ Feed: \"Data\" });\n        expect(feedWantedOpen.desiredState()).toBe(\"open\");\n        expect(feedWantedOpen.state()).toBe(\"open\");\n        expect(feedWantedOpen.data()).toEqual({ Feed: \"Data\" });\n      });\n\n      it(\"events\", () => {\n        // Create feed listeners\n        const feedWantedOpen = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n        const feedWantedClosed = harness.client.feed(\"SomeFeed\", {\n          Feed: \"Arg\"\n        });\n        const feedAlreadyWantedOpenListener = harness.createFeedListener(\n          feedAlreadyWantedOpen\n        );\n        const feedWantedOpenListener = harness.createFeedListener(\n          feedWantedOpen\n        );\n        const feedWantedClosedListener = harness.createFeedListener(\n          feedWantedClosed\n        );\n\n        // Desire the feed open\n        feedWantedOpen.desireOpen();\n\n        // Check events\n        expect(feedAlreadyWantedOpenListener.opening.calls.count()).toBe(0);\n        expect(feedAlreadyWantedOpenListener.open.calls.count()).toBe(0);\n        expect(feedAlreadyWantedOpenListener.close.calls.count()).toBe(0);\n        expect(feedAlreadyWantedOpenListener.action.calls.count()).toBe(0);\n        expect(feedWantedOpenListener.opening.calls.count()).toBe(1);\n        expect(feedWantedOpenListener.opening.calls.argsFor(0).length).toBe(0);\n        expect(feedWantedOpenListener.open.calls.count()).toBe(1);\n        expect(feedWantedOpenListener.open.calls.argsFor(0).length).toBe(0);\n        expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n        expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n      });\n\n      it(\"transport calls\", () => {\n        const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n\n        // Reset transport spies\n        harness.transport.spyClear();\n\n        // Desire feed open\n        feed.desireOpen();\n\n        // Check transport calls\n        expect(harness.transport.connect.calls.count()).toBe(0);\n        expect(harness.transport.disconnect.calls.count()).toBe(0);\n        expect(harness.transport.send.calls.count()).toBe(0);\n        expect(harness.transport.send.calls.argsFor(0).length).toBe(0);\n      });\n    });\n\n    describe(\"if the server feed is closing\", () => {\n      let harness;\n      let feedAlreadyWantedOpen;\n      beforeEach(() => {\n        // Get the server feed into the closing state with a feed desired open\n        harness = harnessFactory();\n        harness.connectClient();\n\n        feedAlreadyWantedOpen = harness.client.feed(\"SomeFeed\", {\n          Feed: \"Arg\"\n        });\n        feedAlreadyWantedOpen.desireOpen();\n\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"FeedOpenResponse\",\n            Success: true,\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" },\n            FeedData: { Feed: \"Data\" }\n          })\n        );\n\n        feedAlreadyWantedOpen.desireClosed();\n        feedAlreadyWantedOpen.desireOpen();\n      });\n\n      describe(\"if the server responds to earlier FeedClose with success and subsequent FeedOpen with success\", () => {\n        it(\"state functions\", () => {\n          // Desire feed open\n          const feedWantedOpen = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          feedWantedOpen.desireOpen();\n\n          // Check state functions\n          expect(feedAlreadyWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedAlreadyWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedAlreadyWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server return success to the earlier FeedClose\n          // Client will send FeedOpen message\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check state functions\n          expect(feedAlreadyWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedAlreadyWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedAlreadyWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server respond to the FeedOpen message\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: true,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              FeedData: { Feed: \"Data\" }\n            })\n          );\n\n          // Check state functions\n          expect(feedAlreadyWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedAlreadyWantedOpen.state()).toBe(\"open\");\n          expect(feedAlreadyWantedOpen.data()).toEqual({ Feed: \"Data\" });\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"open\");\n          expect(feedWantedOpen.data()).toEqual({ Feed: \"Data\" });\n        });\n\n        it(\"events\", () => {\n          // Create feed listeners\n          const feedWantedOpen = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedWantedClosed = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedAlreadyWantedOpenListener = harness.createFeedListener(\n            feedAlreadyWantedOpen\n          );\n          const feedWantedOpenListener = harness.createFeedListener(\n            feedWantedOpen\n          );\n          const feedWantedClosedListener = harness.createFeedListener(\n            feedWantedClosed\n          );\n\n          // Desire feed open\n          feedWantedOpen.desireOpen();\n\n          // Check events\n          expect(feedAlreadyWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.opening.calls.argsFor(0).length).toBe(\n            0\n          );\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedAlreadyWantedOpenListener.spyClear();\n          feedWantedOpenListener.spyClear();\n          feedWantedClosedListener.spyClear();\n\n          // Have the server return success to the earlier FeedClose\n          // Client will send FeedOpen message\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check events\n          expect(feedAlreadyWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedAlreadyWantedOpenListener.spyClear();\n          feedWantedOpenListener.spyClear();\n          feedWantedClosedListener.spyClear();\n\n          // Have the server respond to the FeedOpen message\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: true,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              FeedData: { Feed: \"Data\" }\n            })\n          );\n\n          // Check events\n          expect(feedAlreadyWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.open.calls.count()).toBe(1);\n          expect(\n            feedAlreadyWantedOpenListener.open.calls.argsFor(0).length\n          ).toBe(0);\n          expect(feedAlreadyWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.open.calls.argsFor(0).length).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed open\n          feed.desireOpen();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server return success to the earlier FeedClose\n          // Client will send FeedOpen message\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0).length).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0)[0]).toBe(\n            JSON.stringify({\n              MessageType: \"FeedOpen\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server respond to the FeedOpen message\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: true,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              FeedData: { Feed: \"Data\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n\n      describe(\"if the server responds to earlier FeedClose with success and subsequent FeedOpen with failure\", () => {\n        it(\"state functions\", () => {\n          // Desire feed open\n          const feedWantedOpen = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          feedWantedOpen.desireOpen();\n\n          // Check state functions\n          expect(feedAlreadyWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedAlreadyWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedAlreadyWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server return success to the earlier FeedClose\n          // Client will send FeedOpen message\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check state functions\n          expect(feedAlreadyWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedAlreadyWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedAlreadyWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server respond to the FeedOpen message\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: false,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              ErrorCode: \"SOME_ERROR_CODE\",\n              ErrorData: { Error: \"Data\" }\n            })\n          );\n\n          // Check state functions\n          expect(feedAlreadyWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedAlreadyWantedOpen.state()).toBe(\"closed\");\n          expect(() => {\n            feedAlreadyWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n        });\n\n        it(\"events\", () => {\n          // Create feed listeners\n          const feedWantedOpen = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedWantedClosed = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedAlreadyWantedOpenListener = harness.createFeedListener(\n            feedAlreadyWantedOpen\n          );\n          const feedWantedOpenListener = harness.createFeedListener(\n            feedWantedOpen\n          );\n          const feedWantedClosedListener = harness.createFeedListener(\n            feedWantedClosed\n          );\n\n          // Desire feed open\n          feedWantedOpen.desireOpen();\n\n          // Check events\n          expect(feedAlreadyWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.opening.calls.argsFor(0).length).toBe(\n            0\n          );\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedAlreadyWantedOpenListener.spyClear();\n          feedWantedOpenListener.spyClear();\n          feedWantedClosedListener.spyClear();\n\n          // Have the server return success to the earlier FeedClose\n          // Client will send FeedOpen message\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check events\n          expect(feedAlreadyWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedAlreadyWantedOpenListener.spyClear();\n          feedWantedOpenListener.spyClear();\n          feedWantedClosedListener.spyClear();\n\n          // Have the server respond to the FeedOpen message\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: false,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              ErrorCode: \"SOME_ERROR_CODE\",\n              ErrorData: { Error: \"Data\" }\n            })\n          );\n\n          // Check events\n          expect(feedAlreadyWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.close.calls.count()).toBe(1);\n          expect(\n            feedAlreadyWantedOpenListener.close.calls.argsFor(0).length\n          ).toBe(1);\n          expect(\n            feedAlreadyWantedOpenListener.close.calls.argsFor(0)[0]\n          ).toEqual(jasmine.any(Error));\n          expect(\n            feedAlreadyWantedOpenListener.close.calls.argsFor(0)[0].message\n          ).toBe(\"REJECTED: Server rejected the feed open request.\");\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0).length).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0]).toEqual(\n            jasmine.any(Error)\n          );\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0].message).toBe(\n            \"REJECTED: Server rejected the feed open request.\"\n          );\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed open\n          feed.desireOpen();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server return success to the earlier FeedClose\n          // Client will send FeedOpen message\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0).length).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0)[0]).toBe(\n            JSON.stringify({\n              MessageType: \"FeedOpen\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server respond to the FeedOpen message\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: false,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              ErrorCode: \"SOME_ERROR_CODE\",\n              ErrorData: { Error: \"Data\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n\n      describe(\"if client disconnects before the server responds to the ealier FeedClose\", () => {\n        it(\"state functions\", () => {\n          // Desire feed open\n          const feedWantedOpen = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          feedWantedOpen.desireOpen();\n\n          // Check state functions\n          expect(feedAlreadyWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedAlreadyWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedAlreadyWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server return success to the earlier FeedClose\n          // Client will send FeedOpen message\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check state functions\n          expect(feedAlreadyWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedAlreadyWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedAlreadyWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the transport disconnect\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check state functions\n          expect(feedAlreadyWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedAlreadyWantedOpen.state()).toBe(\"closed\");\n          expect(() => {\n            feedAlreadyWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n        });\n\n        it(\"events\", () => {\n          // Create feed listeners\n          const feedWantedOpen = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedWantedClosed = harness.client.feed(\"SomeFeed\", {\n            Feed: \"Arg\"\n          });\n          const feedAlreadyWantedOpenListener = harness.createFeedListener(\n            feedAlreadyWantedOpen\n          );\n          const feedWantedOpenListener = harness.createFeedListener(\n            feedWantedOpen\n          );\n          const feedWantedClosedListener = harness.createFeedListener(\n            feedWantedClosed\n          );\n\n          // Desire feed open\n          feedWantedOpen.desireOpen();\n\n          // Check events\n          expect(feedAlreadyWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.opening.calls.argsFor(0).length).toBe(\n            0\n          );\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedAlreadyWantedOpenListener.spyClear();\n          feedWantedOpenListener.spyClear();\n          feedWantedClosedListener.spyClear();\n\n          // Have the server return success to the earlier FeedClose\n          // Client will send FeedOpen message\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check events\n          expect(feedAlreadyWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedAlreadyWantedOpenListener.spyClear();\n          feedWantedOpenListener.spyClear();\n          feedWantedClosedListener.spyClear();\n\n          // Have the transport disconnect\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check events\n          expect(feedAlreadyWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedAlreadyWantedOpenListener.close.calls.count()).toBe(1);\n          expect(\n            feedAlreadyWantedOpenListener.close.calls.argsFor(0).length\n          ).toBe(1);\n          expect(\n            feedAlreadyWantedOpenListener.close.calls.argsFor(0)[0]\n          ).toEqual(jasmine.any(Error));\n          expect(\n            feedAlreadyWantedOpenListener.close.calls.argsFor(0)[0].message\n          ).toBe(\"DISCONNECTED: The transport disconnected.\");\n          expect(feedAlreadyWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0).length).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0]).toEqual(\n            jasmine.any(Error)\n          );\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0].message).toBe(\n            \"DISCONNECTED: The transport disconnected.\"\n          );\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed open\n          feed.desireOpen();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server return success to the earlier FeedClose\n          // Client will send FeedOpen message\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0).length).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0)[0]).toBe(\n            JSON.stringify({\n              MessageType: \"FeedOpen\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the transport disconnect\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count() >= 0).toBe(true); // Tries to reconnect by default\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n    });\n  });\n\n  afterEach(() => {\n    jasmine.clock().uninstall();\n  });\n});\n\ndescribe(\"The feed.desireClosed() function\", () => {\n  beforeEach(() => {\n    jasmine.clock().install();\n  });\n\n  describe(\"throw and return\", () => {\n    it(\"should throw if already desired closed\", () => {\n      const harness = harnessFactory();\n      const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      expect(() => {\n        feed.desireClosed();\n      }).toThrow(\n        new Error(\"INVALID_FEED_STATE: The feed is already desired closed.\")\n      );\n    });\n\n    it(\"should throw if destroyed\", () => {\n      const harness = harnessFactory();\n      const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      feed.destroy();\n      expect(() => {\n        feed.desireClosed();\n      }).toThrow(new Error(\"DESTROYED: The feed object has been destroyed.\"));\n    });\n\n    it(\"should return void on success\", () => {\n      const harness = harnessFactory();\n      const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      feed.desireOpen();\n      expect(feed.desireClosed()).toBeUndefined();\n    });\n  });\n\n  describe(\"if disconnected\", () => {\n    let harness;\n    let feedWantedOpen;\n    let feedWantedClosed;\n    beforeEach(() => {\n      harness = harnessFactory();\n      feedWantedOpen = harness.client.feed(\"SomeFeed\", {\n        Feed: \"Arg\"\n      });\n      feedWantedOpen.desireOpen();\n      feedWantedClosed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      feedWantedClosed.desireOpen();\n    });\n\n    it(\"state functions\", () => {\n      // Check state functions\n      expect(feedWantedOpen.desiredState()).toBe(\"open\");\n      expect(feedWantedOpen.state()).toBe(\"closed\");\n      expect(() => {\n        feedWantedOpen.data();\n      }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n      expect(feedWantedClosed.desiredState()).toBe(\"open\");\n      expect(feedWantedClosed.state()).toBe(\"closed\");\n      expect(() => {\n        feedWantedClosed.data();\n      }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n\n      // Desire closed\n      feedWantedClosed.desireClosed();\n\n      // Check state functions\n      expect(feedWantedOpen.desiredState()).toBe(\"open\");\n      expect(feedWantedOpen.state()).toBe(\"closed\");\n      expect(() => {\n        feedWantedOpen.data();\n      }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n      expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n      expect(feedWantedClosed.state()).toBe(\"closed\");\n      expect(() => {\n        feedWantedClosed.data();\n      }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n    });\n\n    it(\"events\", () => {\n      const feedWantedOpenListener = harness.createFeedListener(feedWantedOpen);\n      const feedWantedClosedListener = harness.createFeedListener(\n        feedWantedClosed\n      );\n\n      feedWantedClosed.desireClosed();\n\n      expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n      expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n      expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n      expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.close.calls.argsFor(0).length).toBe(0);\n      expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n    });\n\n    it(\"transport calls\", () => {\n      harness.transport.spyClear();\n\n      feedWantedClosed.desireClosed();\n\n      expect(harness.transport.connect.calls.count()).toBe(0);\n      expect(harness.transport.disconnect.calls.count()).toBe(0);\n      expect(harness.transport.send.calls.count()).toBe(0);\n      expect(harness.transport.state.calls.count() >= 0).toBe(true);\n    });\n  });\n\n  describe(\"if connected and no other feed objects are desired open\", () => {\n    describe(\"if the server feed is closed\", () => {\n      let harness;\n      let feed;\n      beforeEach(() => {\n        // Set up a feed object desired open but with the server feed closed (rejected)\n        harness = harnessFactory();\n        harness.connectClient();\n        feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n        feed.desireOpen();\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"FeedOpenResponse\",\n            Success: false,\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" },\n            ErrorCode: \"SOME_ERROR_CODE\",\n            ErrorData: { Error: \"Data\" }\n          })\n        );\n      });\n\n      it(\"state functions\", () => {\n        // Check state functions\n        expect(feed.desiredState()).toBe(\"open\");\n        expect(feed.state()).toBe(\"closed\");\n        expect(() => {\n          feed.data();\n        }).toThrow(\n          new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n        );\n\n        // Desire closed\n        feed.desireClosed();\n\n        // Check state functions\n        expect(feed.desiredState()).toBe(\"closed\");\n        expect(feed.state()).toBe(\"closed\");\n        expect(() => {\n          feed.data();\n        }).toThrow(\n          new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n        );\n      });\n\n      it(\"events\", () => {\n        const feedListener = harness.createFeedListener(feed);\n\n        feed.desireClosed();\n\n        // Check events\n        expect(feedListener.opening.calls.count()).toBe(0);\n        expect(feedListener.open.calls.count()).toBe(0);\n        expect(feedListener.close.calls.count()).toBe(1);\n        expect(feedListener.close.calls.argsFor(0).length).toBe(0);\n        expect(feedListener.action.calls.count()).toBe(0);\n      });\n\n      it(\"transport calls\", () => {\n        // Reset transport spies\n        harness.transport.spyClear();\n\n        // Desire feed closed\n        feed.desireClosed();\n\n        // Check transport calls\n        expect(harness.transport.connect.calls.count()).toBe(0);\n        expect(harness.transport.disconnect.calls.count()).toBe(0);\n        expect(harness.transport.send.calls.count()).toBe(0);\n        expect(harness.transport.state.calls.count() >= 0).toBe(true);\n      });\n    });\n\n    describe(\"if the server feed is opening\", () => {\n      let harness;\n      let feed;\n      beforeEach(() => {\n        // Set up an opening feed\n        harness = harnessFactory();\n        harness.connectClient();\n        feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n        feed.desireOpen();\n      });\n\n      describe(\"if the client disconnects before FeedOpenResponse\", () => {\n        it(\"state functions\", () => {\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"open\");\n          expect(feed.state()).toBe(\"opening\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Desire feed closed\n          feed.desireClosed();\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"closed\");\n          expect(feed.state()).toBe(\"closed\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"closed\");\n          expect(feed.state()).toBe(\"closed\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n        });\n\n        it(\"events\", () => {\n          const feedListener = harness.createFeedListener(feed);\n\n          feed.desireClosed();\n\n          // Check events\n          expect(feedListener.opening.calls.count()).toBe(0);\n          expect(feedListener.open.calls.count()).toBe(0);\n          expect(feedListener.close.calls.count()).toBe(1);\n          expect(feedListener.close.calls.argsFor(0).length).toBe(0);\n          expect(feedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedListener.spyClear();\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check events\n          expect(feedListener.opening.calls.count()).toBe(0);\n          expect(feedListener.open.calls.count()).toBe(0);\n          expect(feedListener.close.calls.count()).toBe(0);\n          expect(feedListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed closed\n          feed.desireClosed();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count() >= 0).toBe(true); // Reconnects by default\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n\n      describe(\"if the server responds to FeedOpen with failure\", () => {\n        it(\"state functions\", () => {\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"open\");\n          expect(feed.state()).toBe(\"opening\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Desire feed closed\n          feed.desireClosed();\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"closed\");\n          expect(feed.state()).toBe(\"closed\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server respond to FeedOpen with failure\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: false,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              ErrorCode: \"SOME_ERROR_CODE\",\n              ErrorData: { Error: \"Data\" }\n            })\n          );\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"closed\");\n          expect(feed.state()).toBe(\"closed\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n        });\n\n        it(\"events\", () => {\n          const feedListener = harness.createFeedListener(feed);\n\n          feed.desireClosed();\n\n          // Check events\n          expect(feedListener.opening.calls.count()).toBe(0);\n          expect(feedListener.open.calls.count()).toBe(0);\n          expect(feedListener.close.calls.count()).toBe(1);\n          expect(feedListener.close.calls.argsFor(0).length).toBe(0);\n          expect(feedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedListener.spyClear();\n\n          // Have the server respond to FeedOpen with failure\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: false,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              ErrorCode: \"SOME_ERROR_CODE\",\n              ErrorData: { Error: \"Data\" }\n            })\n          );\n\n          // Check events\n          expect(feedListener.opening.calls.count()).toBe(0);\n          expect(feedListener.open.calls.count()).toBe(0);\n          expect(feedListener.close.calls.count()).toBe(0);\n          expect(feedListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed closed\n          feed.desireClosed();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server respond to FeedOpen with failure\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: false,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              ErrorCode: \"SOME_ERROR_CODE\",\n              ErrorData: { Error: \"Data\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n\n      describe(\"if the server responds to FeedOpen with success and then disconnects before FeedCloseResponse\", () => {\n        it(\"state functions\", () => {\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"open\");\n          expect(feed.state()).toBe(\"opening\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Desire feed closed\n          feed.desireClosed();\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"closed\");\n          expect(feed.state()).toBe(\"closed\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server respond to FeedOpen with success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: true,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              FeedData: { Feed: \"Data\" }\n            })\n          );\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"closed\");\n          expect(feed.state()).toBe(\"closed\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"closed\");\n          expect(feed.state()).toBe(\"closed\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n        });\n\n        it(\"events\", () => {\n          const feedListener = harness.createFeedListener(feed);\n\n          feed.desireClosed();\n\n          // Check events\n          expect(feedListener.opening.calls.count()).toBe(0);\n          expect(feedListener.open.calls.count()).toBe(0);\n          expect(feedListener.close.calls.count()).toBe(1);\n          expect(feedListener.close.calls.argsFor(0).length).toBe(0);\n          expect(feedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedListener.spyClear();\n\n          // Have the server respond to FeedOpen with success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: true,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              FeedData: { Feed: \"Data\" }\n            })\n          );\n\n          // Check events\n          expect(feedListener.opening.calls.count()).toBe(0);\n          expect(feedListener.open.calls.count()).toBe(0);\n          expect(feedListener.close.calls.count()).toBe(0);\n          expect(feedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedListener.spyClear();\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check events\n          expect(feedListener.opening.calls.count()).toBe(0);\n          expect(feedListener.open.calls.count()).toBe(0);\n          expect(feedListener.close.calls.count()).toBe(0);\n          expect(feedListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed closed\n          feed.desireClosed();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server respond to FeedOpen with success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: true,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              FeedData: { Feed: \"Data\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0).length).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0)[0]).toBe(\n            JSON.stringify({\n              MessageType: \"FeedClose\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count() >= 0).toBe(true); // Reconnects by default\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n\n      describe(\"if the server responds to FeedOpen with success and FeedClose with success\", () => {\n        it(\"state functions\", () => {\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"open\");\n          expect(feed.state()).toBe(\"opening\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Desire feed closed\n          feed.desireClosed();\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"closed\");\n          expect(feed.state()).toBe(\"closed\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server respond to FeedOpen with success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: true,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              FeedData: { Feed: \"Data\" }\n            })\n          );\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"closed\");\n          expect(feed.state()).toBe(\"closed\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server respond to FeedClose with success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"closed\");\n          expect(feed.state()).toBe(\"closed\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n        });\n\n        it(\"events\", () => {\n          const feedListener = harness.createFeedListener(feed);\n\n          feed.desireClosed();\n\n          // Check events\n          expect(feedListener.opening.calls.count()).toBe(0);\n          expect(feedListener.open.calls.count()).toBe(0);\n          expect(feedListener.close.calls.count()).toBe(1);\n          expect(feedListener.close.calls.argsFor(0).length).toBe(0);\n          expect(feedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedListener.spyClear();\n\n          // Have the server respond to FeedOpen with success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: true,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              FeedData: { Feed: \"Data\" }\n            })\n          );\n\n          // Check events\n          expect(feedListener.opening.calls.count()).toBe(0);\n          expect(feedListener.open.calls.count()).toBe(0);\n          expect(feedListener.close.calls.count()).toBe(0);\n          expect(feedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedListener.spyClear();\n\n          // Have the server respond to FeedClose with success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check events\n          expect(feedListener.opening.calls.count()).toBe(0);\n          expect(feedListener.open.calls.count()).toBe(0);\n          expect(feedListener.close.calls.count()).toBe(0);\n          expect(feedListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed closed\n          feed.desireClosed();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server respond to FeedOpen with success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: true,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              FeedData: { Feed: \"Data\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0).length).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0)[0]).toBe(\n            JSON.stringify({\n              MessageType: \"FeedClose\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server respond to FeedClose with success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n    });\n\n    describe(\"if the server feed is open\", () => {\n      let harness;\n      let feed;\n      beforeEach(() => {\n        // Set up an open feed\n        harness = harnessFactory();\n        harness.connectClient();\n        feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n        feed.desireOpen();\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"FeedOpenResponse\",\n            Success: true,\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" },\n            FeedData: { Feed: \"Data\" }\n          })\n        );\n      });\n\n      describe(\"if the server disconnects before FeedCloseResponse\", () => {\n        it(\"state functions\", () => {\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"open\");\n          expect(feed.state()).toBe(\"open\");\n          expect(feed.data()).toEqual({ Feed: \"Data\" });\n\n          // Desire feed closed\n          feed.desireClosed();\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"closed\");\n          expect(feed.state()).toBe(\"closed\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"closed\");\n          expect(feed.state()).toBe(\"closed\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n        });\n\n        it(\"events\", () => {\n          const feedListener = harness.createFeedListener(feed);\n\n          feed.desireClosed();\n\n          // Check events\n          expect(feedListener.opening.calls.count()).toBe(0);\n          expect(feedListener.open.calls.count()).toBe(0);\n          expect(feedListener.close.calls.count()).toBe(1);\n          expect(feedListener.close.calls.argsFor(0).length).toBe(0);\n          expect(feedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedListener.spyClear();\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check events\n          expect(feedListener.opening.calls.count()).toBe(0);\n          expect(feedListener.open.calls.count()).toBe(0);\n          expect(feedListener.close.calls.count()).toBe(0);\n          expect(feedListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed closed\n          feed.desireClosed();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0).length).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0)[0]).toBe(\n            JSON.stringify({\n              MessageType: \"FeedClose\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count() >= 0).toBe(true); // Reconnects by default\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n\n      describe(\"if the server responds to FeedClose with success\", () => {\n        it(\"state functions\", () => {\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"open\");\n          expect(feed.state()).toBe(\"open\");\n          expect(feed.data()).toEqual({ Feed: \"Data\" });\n\n          // Desire feed closed\n          feed.desireClosed();\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"closed\");\n          expect(feed.state()).toBe(\"closed\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server respond to FeedClose with success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"closed\");\n          expect(feed.state()).toBe(\"closed\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n        });\n\n        it(\"events\", () => {\n          const feedListener = harness.createFeedListener(feed);\n\n          feed.desireClosed();\n\n          // Check events\n          expect(feedListener.opening.calls.count()).toBe(0);\n          expect(feedListener.open.calls.count()).toBe(0);\n          expect(feedListener.close.calls.count()).toBe(1);\n          expect(feedListener.close.calls.argsFor(0).length).toBe(0);\n          expect(feedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedListener.spyClear();\n\n          // Have the server respond to FeedClose with success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check events\n          expect(feedListener.opening.calls.count()).toBe(0);\n          expect(feedListener.open.calls.count()).toBe(0);\n          expect(feedListener.close.calls.count()).toBe(0);\n          expect(feedListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed closed\n          feed.desireClosed();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0).length).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0)[0]).toBe(\n            JSON.stringify({\n              MessageType: \"FeedClose\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server respond to FeedClose with success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n    });\n\n    describe(\"if the server feed is closing\", () => {\n      let harness;\n      let feed;\n      beforeEach(() => {\n        // Set up a closing feed desired open\n        harness = harnessFactory();\n        harness.connectClient();\n        feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n        feed.desireOpen();\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"FeedOpenResponse\",\n            Success: true,\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" },\n            FeedData: { Feed: \"Data\" }\n          })\n        );\n        feed.desireClosed();\n        feed.desireOpen();\n      });\n\n      describe(\"if the server disconnects before FeedCloseResponse\", () => {\n        it(\"state functions\", () => {\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"open\");\n          expect(feed.state()).toBe(\"opening\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Desire feed closed\n          feed.desireClosed();\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"closed\");\n          expect(feed.state()).toBe(\"closed\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"closed\");\n          expect(feed.state()).toBe(\"closed\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n        });\n\n        it(\"events\", () => {\n          const feedListener = harness.createFeedListener(feed);\n\n          feed.desireClosed();\n\n          // Check events\n          expect(feedListener.opening.calls.count()).toBe(0);\n          expect(feedListener.open.calls.count()).toBe(0);\n          expect(feedListener.close.calls.count()).toBe(1);\n          expect(feedListener.close.calls.argsFor(0).length).toBe(0);\n          expect(feedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedListener.spyClear();\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check events\n          expect(feedListener.opening.calls.count()).toBe(0);\n          expect(feedListener.open.calls.count()).toBe(0);\n          expect(feedListener.close.calls.count()).toBe(0);\n          expect(feedListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed closed\n          feed.desireClosed();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count() >= 0).toBe(true); // Reconnects by default\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n\n      describe(\"if the server responds to FeedClose with success\", () => {\n        it(\"state functions\", () => {\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"open\");\n          expect(feed.state()).toBe(\"opening\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Desire feed closed\n          feed.desireClosed();\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"closed\");\n          expect(feed.state()).toBe(\"closed\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server respond to FeedClose with success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check state functions\n          expect(feed.desiredState()).toBe(\"closed\");\n          expect(feed.state()).toBe(\"closed\");\n          expect(() => {\n            feed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n        });\n\n        it(\"events\", () => {\n          const feedListener = harness.createFeedListener(feed);\n\n          feed.desireClosed();\n\n          // Check events\n          expect(feedListener.opening.calls.count()).toBe(0);\n          expect(feedListener.open.calls.count()).toBe(0);\n          expect(feedListener.close.calls.count()).toBe(1);\n          expect(feedListener.close.calls.argsFor(0).length).toBe(0);\n          expect(feedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedListener.spyClear();\n\n          // Have the server respond to FeedClose with success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check events\n          expect(feedListener.opening.calls.count()).toBe(0);\n          expect(feedListener.open.calls.count()).toBe(0);\n          expect(feedListener.close.calls.count()).toBe(0);\n          expect(feedListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed closed\n          feed.desireClosed();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server respond to FeedClose with success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n    });\n  });\n\n  describe(\"if connected and another feed object is desired open\", () => {\n    describe(\"if the server feed is closed\", () => {\n      let harness;\n      let feedWantedClosed;\n      let feedWantedOpen;\n      beforeEach(() => {\n        // Set up a feed object desired open but with the server feed closed (rejected)\n        harness = harnessFactory();\n        harness.connectClient();\n        feedWantedOpen = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n        feedWantedOpen.desireOpen();\n        feedWantedClosed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n        feedWantedClosed.desireOpen();\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"FeedOpenResponse\",\n            Success: false,\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" },\n            ErrorCode: \"SOME_ERROR_CODE\",\n            ErrorData: { Error: \"Data\" }\n          })\n        );\n      });\n\n      it(\"state functions\", () => {\n        // Check state functions\n        expect(feedWantedClosed.desiredState()).toBe(\"open\");\n        expect(feedWantedClosed.state()).toBe(\"closed\");\n        expect(() => {\n          feedWantedClosed.data();\n        }).toThrow(\n          new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n        );\n        expect(feedWantedOpen.desiredState()).toBe(\"open\");\n        expect(feedWantedOpen.state()).toBe(\"closed\");\n        expect(() => {\n          feedWantedOpen.data();\n        }).toThrow(\n          new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n        );\n\n        // Desire closed\n        feedWantedClosed.desireClosed();\n\n        // Check state functions\n        expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n        expect(feedWantedClosed.state()).toBe(\"closed\");\n        expect(() => {\n          feedWantedClosed.data();\n        }).toThrow(\n          new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n        );\n        expect(feedWantedOpen.desiredState()).toBe(\"open\");\n        expect(feedWantedOpen.state()).toBe(\"closed\");\n        expect(() => {\n          feedWantedOpen.data();\n        }).toThrow(\n          new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n        );\n      });\n\n      it(\"events\", () => {\n        const feedWantedClosedListener = harness.createFeedListener(\n          feedWantedClosed\n        );\n        const feedWantedOpenListener = harness.createFeedListener(\n          feedWantedOpen\n        );\n\n        feedWantedClosed.desireClosed();\n\n        // Check events\n        expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.close.calls.count()).toBe(1);\n        expect(feedWantedClosedListener.close.calls.argsFor(0).length).toBe(0);\n        expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n        expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n        expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n        expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n        expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n      });\n\n      it(\"transport calls\", () => {\n        // Reset transport spies\n        harness.transport.spyClear();\n\n        // Desire feed closed\n        feedWantedClosed.desireClosed();\n\n        // Check transport calls\n        expect(harness.transport.connect.calls.count()).toBe(0);\n        expect(harness.transport.disconnect.calls.count()).toBe(0);\n        expect(harness.transport.send.calls.count()).toBe(0);\n        expect(harness.transport.state.calls.count() >= 0).toBe(true);\n      });\n    });\n\n    describe(\"if the server feed is opening\", () => {\n      let harness;\n      let feedWantedClosed;\n      let feedWantedOpen;\n      beforeEach(() => {\n        // Set up an opening feed\n        harness = harnessFactory();\n        harness.connectClient();\n        feedWantedClosed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n        feedWantedClosed.desireOpen();\n        feedWantedOpen = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n        feedWantedOpen.desireOpen();\n      });\n\n      describe(\"if the client disconnects before FeedOpenResponse\", () => {\n        it(\"state functions\", () => {\n          // Check state functions\n          expect(feedWantedClosed.desiredState()).toBe(\"open\");\n          expect(feedWantedClosed.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedClosed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Desire feed closed\n          feedWantedClosed.desireClosed();\n\n          // Check state functions\n          expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n          expect(feedWantedClosed.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedClosed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check state functions\n          expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n          expect(feedWantedClosed.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedClosed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n        });\n\n        it(\"events\", () => {\n          const feedWantedClosedListener = harness.createFeedListener(\n            feedWantedClosed\n          );\n          const feedWantedOpenListener = harness.createFeedListener(\n            feedWantedOpen\n          );\n\n          feedWantedClosed.desireClosed();\n\n          // Check events\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(1);\n          expect(feedWantedClosedListener.close.calls.argsFor(0).length).toBe(\n            0\n          );\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedWantedClosedListener.spyClear();\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check events\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0).length).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0]).toEqual(\n            jasmine.any(Error)\n          );\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0].message).toBe(\n            \"DISCONNECTED: The transport disconnected.\"\n          );\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed closed\n          feedWantedClosed.desireClosed();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count() >= 0).toBe(true); // Reconnects by default\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n\n      describe(\"if the server responds to FeedOpen with failure\", () => {\n        it(\"state functions\", () => {\n          // Check state functions\n          expect(feedWantedClosed.desiredState()).toBe(\"open\");\n          expect(feedWantedClosed.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedClosed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Desire feed closed\n          feedWantedClosed.desireClosed();\n\n          // Check state functions\n          expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n          expect(feedWantedClosed.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedClosed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server respond to FeedOpen with failure\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: false,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              ErrorCode: \"SOME_ERROR_CODE\",\n              ErrorData: { Error: \"Data\" }\n            })\n          );\n\n          // Check state functions\n          expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n          expect(feedWantedClosed.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedClosed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n        });\n\n        it(\"events\", () => {\n          const feedWantedClosedListener = harness.createFeedListener(\n            feedWantedClosed\n          );\n          const feedWantedOpenListener = harness.createFeedListener(\n            feedWantedOpen\n          );\n\n          feedWantedClosed.desireClosed();\n\n          // Check events\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(1);\n          expect(feedWantedClosedListener.close.calls.argsFor(0).length).toBe(\n            0\n          );\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedWantedClosedListener.spyClear();\n\n          // Have the server respond to FeedOpen with failure\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: false,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              ErrorCode: \"SOME_ERROR_CODE\",\n              ErrorData: { Error: \"Data\" }\n            })\n          );\n\n          // Check events\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0).length).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0]).toEqual(\n            jasmine.any(Error)\n          );\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0].message).toBe(\n            \"REJECTED: Server rejected the feed open request.\"\n          );\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed closed\n          feedWantedClosed.desireClosed();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server respond to FeedOpen with failure\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: false,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              ErrorCode: \"SOME_ERROR_CODE\",\n              ErrorData: { Error: \"Data\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n\n      describe(\"if the server responds to FeedOpen with success and then eventually disconnects\", () => {\n        it(\"state functions\", () => {\n          // Check state functions\n          expect(feedWantedClosed.desiredState()).toBe(\"open\");\n          expect(feedWantedClosed.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedClosed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Desire feed closed\n          feedWantedClosed.desireClosed();\n\n          // Check state functions\n          expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n          expect(feedWantedClosed.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedClosed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server respond to FeedOpen with success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: true,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              FeedData: { Feed: \"Data\" }\n            })\n          );\n\n          // Check state functions\n          expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n          expect(feedWantedClosed.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedClosed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"open\");\n          expect(feedWantedOpen.data()).toEqual({ Feed: \"Data\" });\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check state functions\n          expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n          expect(feedWantedClosed.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedClosed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n        });\n\n        it(\"events\", () => {\n          const feedWantedClosedListener = harness.createFeedListener(\n            feedWantedClosed\n          );\n          const feedWantedOpenListener = harness.createFeedListener(\n            feedWantedOpen\n          );\n\n          feedWantedClosed.desireClosed();\n\n          // Check events\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(1);\n          expect(feedWantedClosedListener.close.calls.argsFor(0).length).toBe(\n            0\n          );\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedWantedClosedListener.spyClear();\n          feedWantedOpenListener.spyClear();\n\n          // Have the server respond to FeedOpen with success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: true,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              FeedData: { Feed: \"Data\" }\n            })\n          );\n\n          // Check events\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.open.calls.argsFor(0).length).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedWantedClosedListener.spyClear();\n          feedWantedOpenListener.spyClear();\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check events\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0).length).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0]).toEqual(\n            jasmine.any(Error)\n          );\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0].message).toBe(\n            \"DISCONNECTED: The transport disconnected.\"\n          );\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed closed\n          feedWantedClosed.desireClosed();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server respond to FeedOpen with success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: true,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              FeedData: { Feed: \"Data\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count() >= 0).toBe(true); // Reconnects by default\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n    });\n\n    describe(\"if the server feed is open\", () => {\n      let harness;\n      let feedWantedClosed;\n      let feedWantedOpen;\n      beforeEach(() => {\n        // Set up an open feed\n        harness = harnessFactory();\n        harness.connectClient();\n        feedWantedClosed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n        feedWantedClosed.desireOpen();\n        feedWantedOpen = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n        feedWantedOpen.desireOpen();\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"FeedOpenResponse\",\n            Success: true,\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" },\n            FeedData: { Feed: \"Data\" }\n          })\n        );\n      });\n\n      describe(\"when the client eventually disconnects\", () => {\n        it(\"state functions\", () => {\n          // Check state functions\n          expect(feedWantedClosed.desiredState()).toBe(\"open\");\n          expect(feedWantedClosed.state()).toBe(\"open\");\n          expect(feedWantedClosed.data()).toEqual({ Feed: \"Data\" });\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"open\");\n          expect(feedWantedOpen.data()).toEqual({ Feed: \"Data\" });\n\n          // Desire feed closed\n          feedWantedClosed.desireClosed();\n\n          // Check state functions\n          expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n          expect(feedWantedClosed.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedClosed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"open\");\n          expect(feedWantedOpen.data()).toEqual({ Feed: \"Data\" });\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check state functions\n          expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n          expect(feedWantedClosed.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedClosed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n        });\n\n        it(\"events\", () => {\n          const feedWantedClosedListener = harness.createFeedListener(\n            feedWantedClosed\n          );\n          const feedWantedOpenListener = harness.createFeedListener(\n            feedWantedOpen\n          );\n\n          feedWantedClosed.desireClosed();\n\n          // Check events\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(1);\n          expect(feedWantedClosedListener.close.calls.argsFor(0).length).toBe(\n            0\n          );\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedWantedClosedListener.spyClear();\n          feedWantedOpenListener.spyClear();\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check events\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0).length).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0]).toEqual(\n            jasmine.any(Error)\n          );\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0].message).toBe(\n            \"DISCONNECTED: The transport disconnected.\"\n          );\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed closed\n          feedWantedClosed.desireClosed();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count() >= 0).toBe(true); // Reconnects by default\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n    });\n\n    describe(\"if the server feed is closing\", () => {\n      let harness;\n      let feedWantedClosed;\n      let feedWantedOpen;\n      beforeEach(() => {\n        // Set up a closing feed desired open by two objects\n        harness = harnessFactory();\n        harness.connectClient();\n        feedWantedClosed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n        feedWantedClosed.desireOpen();\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"FeedOpenResponse\",\n            Success: true,\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" },\n            FeedData: { Feed: \"Data\" }\n          })\n        );\n        feedWantedClosed.desireClosed();\n        feedWantedClosed.desireOpen();\n        feedWantedOpen = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n        feedWantedOpen.desireOpen();\n      });\n\n      describe(\"if the client disconnects before receiving a response to earlier FeedClose\", () => {\n        it(\"state functions\", () => {\n          // Check state functions\n          expect(feedWantedClosed.desiredState()).toBe(\"open\");\n          expect(feedWantedClosed.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedClosed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Desire feed closed\n          feedWantedClosed.desireClosed();\n\n          // Check state functions\n          expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n          expect(feedWantedClosed.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedClosed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check state functions\n          expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n          expect(feedWantedClosed.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedClosed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n        });\n\n        it(\"events\", () => {\n          const feedWantedClosedListener = harness.createFeedListener(\n            feedWantedClosed\n          );\n          const feedWantedOpenListener = harness.createFeedListener(\n            feedWantedOpen\n          );\n\n          feedWantedClosed.desireClosed();\n\n          // Check events\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(1);\n          expect(feedWantedClosedListener.close.calls.argsFor(0).length).toBe(\n            0\n          );\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedWantedClosedListener.spyClear();\n          feedWantedOpenListener.spyClear();\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check events\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0).length).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0]).toEqual(\n            jasmine.any(Error)\n          );\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0].message).toBe(\n            \"DISCONNECTED: The transport disconnected.\"\n          );\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed closed\n          feedWantedClosed.desireClosed();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count() >= 0).toBe(true); // Reconnects by default\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n\n      describe(\"if the earlier FeedClose succeeds then client disconnects before FeedOpenResponse\", () => {\n        it(\"state functions\", () => {\n          // Check state functions\n          expect(feedWantedClosed.desiredState()).toBe(\"open\");\n          expect(feedWantedClosed.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedClosed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Desire feed closed\n          feedWantedClosed.desireClosed();\n\n          // Check state functions\n          expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n          expect(feedWantedClosed.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedClosed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server return FeedCloseResponse success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check state functions\n          expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n          expect(feedWantedClosed.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedClosed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check state functions\n          expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n          expect(feedWantedClosed.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedClosed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n        });\n\n        it(\"events\", () => {\n          const feedWantedClosedListener = harness.createFeedListener(\n            feedWantedClosed\n          );\n          const feedWantedOpenListener = harness.createFeedListener(\n            feedWantedOpen\n          );\n\n          feedWantedClosed.desireClosed();\n\n          // Check events\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(1);\n          expect(feedWantedClosedListener.close.calls.argsFor(0).length).toBe(\n            0\n          );\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedWantedClosedListener.spyClear();\n          feedWantedOpenListener.spyClear();\n\n          // Have the server return FeedCloseResponse success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check events\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedWantedClosedListener.spyClear();\n          feedWantedOpenListener.spyClear();\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check events\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0).length).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0]).toEqual(\n            jasmine.any(Error)\n          );\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0].message).toBe(\n            \"DISCONNECTED: The transport disconnected.\"\n          );\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed closed\n          feedWantedClosed.desireClosed();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server return FeedCloseResponse success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0).length).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0)[0]).toBe(\n            JSON.stringify({\n              MessageType: \"FeedOpen\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the transport disconnect from the server\n          harness.transport.state.and.returnValue(\"disconnected\");\n          harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count() >= 0).toBe(true); // Reconnects by default\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n\n      describe(\"if the earlier FeedClose succeeds and FeedOpen fails\", () => {\n        it(\"state functions\", () => {\n          // Check state functions\n          expect(feedWantedClosed.desiredState()).toBe(\"open\");\n          expect(feedWantedClosed.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedClosed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Desire feed closed\n          feedWantedClosed.desireClosed();\n\n          // Check state functions\n          expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n          expect(feedWantedClosed.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedClosed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server return FeedCloseResponse success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check state functions\n          expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n          expect(feedWantedClosed.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedClosed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server return failure to FeedOpen\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: false,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              ErrorCode: \"SOME_ERROR_CODE\",\n              ErrorData: { Error: \"Data\" }\n            })\n          );\n\n          // Check state functions\n          expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n          expect(feedWantedClosed.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedClosed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n        });\n\n        it(\"events\", () => {\n          const feedWantedClosedListener = harness.createFeedListener(\n            feedWantedClosed\n          );\n          const feedWantedOpenListener = harness.createFeedListener(\n            feedWantedOpen\n          );\n\n          feedWantedClosed.desireClosed();\n\n          // Check events\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(1);\n          expect(feedWantedClosedListener.close.calls.argsFor(0).length).toBe(\n            0\n          );\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedWantedClosedListener.spyClear();\n          feedWantedOpenListener.spyClear();\n\n          // Have the server return FeedCloseResponse success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check events\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedWantedClosedListener.spyClear();\n          feedWantedOpenListener.spyClear();\n\n          // Have the server return failure to FeedOpen\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: false,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              ErrorCode: \"SOME_ERROR_CODE\",\n              ErrorData: { Error: \"Data\" }\n            })\n          );\n\n          // Check events\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0).length).toBe(1);\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0]).toEqual(\n            jasmine.any(Error)\n          );\n          expect(feedWantedOpenListener.close.calls.argsFor(0)[0].message).toBe(\n            \"REJECTED: Server rejected the feed open request.\"\n          );\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed closed\n          feedWantedClosed.desireClosed();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server return FeedCloseResponse success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0).length).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0)[0]).toBe(\n            JSON.stringify({\n              MessageType: \"FeedOpen\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server return failure to FeedOpen\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: false,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              ErrorCode: \"SOME_ERROR_CODE\",\n              ErrorData: { Error: \"Data\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count() >= 0).toBe(true); // Reconnects by default\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n\n      describe(\"if the earlier FeedClose succeeds and FeedOpen succeeds\", () => {\n        it(\"state functions\", () => {\n          // Check state functions\n          expect(feedWantedClosed.desiredState()).toBe(\"open\");\n          expect(feedWantedClosed.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedClosed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Desire feed closed\n          feedWantedClosed.desireClosed();\n\n          // Check state functions\n          expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n          expect(feedWantedClosed.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedClosed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server return FeedCloseResponse success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check state functions\n          expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n          expect(feedWantedClosed.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedClosed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"opening\");\n          expect(() => {\n            feedWantedOpen.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n\n          // Have the server return success to FeedOpen\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: true,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              FeedData: { Feed: \"Data\" }\n            })\n          );\n\n          // Check state functions\n          expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n          expect(feedWantedClosed.state()).toBe(\"closed\");\n          expect(() => {\n            feedWantedClosed.data();\n          }).toThrow(\n            new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n          );\n          expect(feedWantedOpen.desiredState()).toBe(\"open\");\n          expect(feedWantedOpen.state()).toBe(\"open\");\n          expect(feedWantedOpen.data()).toEqual({ Feed: \"Data\" });\n        });\n\n        it(\"events\", () => {\n          const feedWantedClosedListener = harness.createFeedListener(\n            feedWantedClosed\n          );\n          const feedWantedOpenListener = harness.createFeedListener(\n            feedWantedOpen\n          );\n\n          feedWantedClosed.desireClosed();\n\n          // Check events\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(1);\n          expect(feedWantedClosedListener.close.calls.argsFor(0).length).toBe(\n            0\n          );\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedWantedClosedListener.spyClear();\n          feedWantedOpenListener.spyClear();\n\n          // Have the server return FeedCloseResponse success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check events\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n\n          // Reset listeners\n          feedWantedClosedListener.spyClear();\n          feedWantedOpenListener.spyClear();\n\n          // Have the server return success to FeedOpen\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: true,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              FeedData: { Feed: \"Data\" }\n            })\n          );\n\n          // Check events\n          expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n          expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.open.calls.count()).toBe(1);\n          expect(feedWantedOpenListener.open.calls.argsFor(0).length).toBe(0);\n          expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n          expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n        });\n\n        it(\"transport calls\", () => {\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Desire feed closed\n          feedWantedClosed.desireClosed();\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server return FeedCloseResponse success\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedCloseResponse\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count()).toBe(0);\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0).length).toBe(1);\n          expect(harness.transport.send.calls.argsFor(0)[0]).toBe(\n            JSON.stringify({\n              MessageType: \"FeedOpen\",\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" }\n            })\n          );\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n\n          // Reset transport spies\n          harness.transport.spyClear();\n\n          // Have the server return success to FeedOpen\n          harness.transport.emit(\n            \"message\",\n            JSON.stringify({\n              MessageType: \"FeedOpenResponse\",\n              Success: true,\n              FeedName: \"SomeFeed\",\n              FeedArgs: { Feed: \"Arg\" },\n              FeedData: { Feed: \"Data\" }\n            })\n          );\n\n          // Check transport calls\n          expect(harness.transport.connect.calls.count() >= 0).toBe(true); // Reconnects by default\n          expect(harness.transport.disconnect.calls.count()).toBe(0);\n          expect(harness.transport.send.calls.count()).toBe(0);\n          expect(harness.transport.state.calls.count() >= 0).toBe(true);\n        });\n      });\n    });\n  });\n\n  afterEach(() => {\n    jasmine.clock().uninstall();\n  });\n});\n\ndescribe(\"The feed.destroy() function\", () => {\n  // Errors and return values\n\n  describe(\"throw and return\", () => {\n    it(\"should throw if desired open\", () => {\n      const harness = harnessFactory();\n      const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      feed.desireOpen();\n      expect(() => {\n        feed.destroy();\n      }).toThrow(\n        new Error(\n          \"INVALID_FEED_STATE: Only feeds desired closed can be destroyed.\"\n        )\n      );\n    });\n\n    it(\"should throw if already destroyed\", () => {\n      const harness = harnessFactory();\n      const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      feed.destroy();\n      expect(() => {\n        feed.destroy();\n      }).toThrow(new Error(\"DESTROYED: The feed object has been destroyed.\"));\n    });\n\n    it(\"should return void\", () => {\n      const harness = harnessFactory();\n      const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      expect(feed.destroy()).toBeUndefined();\n    });\n  });\n\n  // Client and feed state functions - N/A\n\n  // Client and feed events - N/A\n\n  // Transport calls - N/A\n\n  // Callbacks - N/A\n});\n\ndescribe(\"The feed.client() function\", () => {\n  // Errors and return values\n\n  describe(\"throw and return\", () => {\n    it(\"should throw if already destroyed\", () => {\n      const harness = harnessFactory();\n      const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      feed.destroy();\n      expect(() => {\n        feed.client();\n      }).toThrow(new Error(\"DESTROYED: The feed object has been destroyed.\"));\n    });\n\n    it(\"should return the client\", () => {\n      const harness = harnessFactory();\n      const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      expect(feed.client()).toBe(harness.client);\n    });\n  });\n\n  // Client and feed state functions - N/A\n\n  // Client and feed events - N/A\n\n  // Transport calls - N/A\n\n  // Callbacks - N/A\n});\n\n/*\n\nState functions\n\nTested heavily above - just check a few error cases.\n\n*/\n\ndescribe(\"The client.state() function\", () => {\n  // No errors\n});\n\ndescribe(\"The client.id() function\", () => {\n  // INVALID_STATE tested through the connection cycle above\n});\n\ndescribe(\"The feed.desiredState() function\", () => {\n  it(\"should throw if destroyed\", () => {\n    const harness = harnessFactory();\n    const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n    feed.destroy();\n    expect(() => {\n      feed.desiredState();\n    }).toThrow(new Error(\"DESTROYED: The feed object has been destroyed.\"));\n  });\n});\n\ndescribe(\"The feed.state() function\", () => {\n  it(\"should throw if destroyed\", () => {\n    const harness = harnessFactory();\n    const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n    feed.destroy();\n    expect(() => {\n      feed.state();\n    }).toThrow(new Error(\"DESTROYED: The feed object has been destroyed.\"));\n  });\n});\n\ndescribe(\"The feed.data() function\", () => {\n  // INVALID_FEED_STATE tested through the connection cycle above\n  it(\"should throw if destroyed\", () => {\n    const harness = harnessFactory();\n    const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n    feed.destroy();\n    expect(() => {\n      feed.data();\n    }).toThrow(new Error(\"DESTROYED: The feed object has been destroyed.\"));\n  });\n});\n\n/*\n\nTransport-initiated operations.\n\nTransport operations that are the direct result of an app-initiated operation\nare tested above (but not unexpected messages).\n\nTested only under the default configuration; alternative configurations are\ntested above.\n\nTransport-initiated operations tested here include:\n \n  - Violation of the transport requirements (transportError)\n  - Transport disconnect event generated internally (disconnect)\n  - Transport message event that violates the spec (client badServerMessage)\n  - Transport message event with ViolationResponse (client badClientMessage)\n  - Transport message event with ActionRevelation (feed action)\n  - Transport message event with FeedTermination (feed close)\n\nFor each result path, test:\n\n  - Client and feed state function return values (listed above)\n  - Client and feed events\n  - Transport calls\n  - Callbacks\n\n*/\n\ndescribe(\"if the transport violates a library requirement\", () => {\n  // State functions - N/A\n\n  // Events\n\n  it(\"should emit transportError on the client\", () => {\n    // Just test one unexpected behavior - unit tests handle the rest\n    const harness = harnessFactory();\n    const clientListener = harness.createClientListener();\n    harness.transport.emit(\"disconnect\"); // Unexpected\n    expect(clientListener.connecting.calls.count()).toBe(0);\n    expect(clientListener.connect.calls.count()).toBe(0);\n    expect(clientListener.disconnect.calls.count()).toBe(0);\n    expect(clientListener.badServerMessage.calls.count()).toBe(0);\n    expect(clientListener.badClientMessage.calls.count()).toBe(0);\n    expect(clientListener.transportError.calls.count()).toBe(1);\n    expect(clientListener.transportError.calls.argsFor(0).length).toBe(1);\n    expect(clientListener.transportError.calls.argsFor(0)[0]).toEqual(\n      jasmine.any(Error)\n    );\n    expect(clientListener.transportError.calls.argsFor(0)[0].message).toBe(\n      \"UNEXPECTED_EVENT: Transport emitted a  'disconnect' event when the previous emission was 'disconnect'.\"\n    );\n  });\n\n  // Transport calls - N/A\n\n  // Callbacks - N/A\n});\n\ndescribe(\"if the transport unexpectedly disconnects\", () => {\n  beforeEach(() => {\n    jasmine.clock().install();\n  });\n  let harness;\n  let feedDesiredClosed;\n  let feedClosed;\n  let feedOpening;\n  let feedOpen;\n  let feedClosing;\n  beforeEach(() => {\n    // Set up a connected client and feeds in all states\n    harness = harnessFactory();\n    harness.connectClient();\n\n    feedDesiredClosed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n\n    feedClosed = harness.client.feed(\"SomeFeed2\", { Feed: \"Arg\" });\n    feedClosed.desireOpen();\n    harness.transport.emit(\n      \"message\",\n      JSON.stringify({\n        MessageType: \"FeedOpenResponse\",\n        Success: false,\n        FeedName: \"SomeFeed2\",\n        FeedArgs: { Feed: \"Arg\" },\n        ErrorCode: \"SOME_ERROR_CODE\",\n        ErrorData: { Error: \"Data\" }\n      })\n    );\n\n    feedOpening = harness.client.feed(\"SomeFeed3\", { Feed: \"Arg\" });\n    feedOpening.desireOpen();\n\n    feedOpen = harness.client.feed(\"SomeFeed4\", { Feed: \"Arg\" });\n    feedOpen.desireOpen();\n    harness.transport.emit(\n      \"message\",\n      JSON.stringify({\n        MessageType: \"FeedOpenResponse\",\n        Success: true,\n        FeedName: \"SomeFeed4\",\n        FeedArgs: { Feed: \"Arg\" },\n        FeedData: { Feed: \"Data\" }\n      })\n    );\n\n    feedClosing = harness.client.feed(\"SomeFeed5\", { Feed: \"Arg\" });\n    feedClosing.desireOpen();\n    harness.transport.emit(\n      \"message\",\n      JSON.stringify({\n        MessageType: \"FeedOpenResponse\",\n        Success: false,\n        FeedName: \"SomeFeed5\",\n        FeedArgs: { Feed: \"Arg\" },\n        FeedData: { Feed: \"Data\" }\n      })\n    );\n    feedClosing.desireClosed();\n    feedClosing.desireOpen();\n  });\n\n  // State functions\n\n  it(\"should update state functions\", () => {\n    // Check state functions\n    expect(harness.client.state()).toBe(\"connected\");\n    expect(harness.client.id()).toBe(\"SOME_CLIENT_ID\");\n    expect(feedDesiredClosed.desiredState()).toBe(\"closed\");\n    expect(feedDesiredClosed.state()).toBe(\"closed\");\n    expect(() => {\n      feedDesiredClosed.data();\n    }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n    expect(feedClosed.desiredState()).toBe(\"open\");\n    expect(feedClosed.state()).toBe(\"closed\");\n    expect(() => {\n      feedClosed.data();\n    }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n    expect(feedOpening.desiredState()).toBe(\"open\");\n    expect(feedOpening.state()).toBe(\"opening\");\n    expect(() => {\n      feedOpening.data();\n    }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n    expect(feedOpen.desiredState()).toBe(\"open\");\n    expect(feedOpen.state()).toBe(\"open\");\n    expect(feedOpen.data()).toEqual({ Feed: \"Data\" });\n    expect(feedClosing.desiredState()).toBe(\"open\");\n    expect(feedClosing.state()).toBe(\"opening\");\n    expect(() => {\n      feedClosing.data();\n    }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n\n    // Have the transport disconnect\n    harness.transport.state.and.returnValue(\"disconnected\");\n    harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n    // Check state functions\n    expect(harness.client.state()).toBe(\"disconnected\");\n    expect(() => {\n      harness.client.id();\n    }).toThrow(new Error(\"INVALID_STATE: Not connected.\"));\n    expect(feedDesiredClosed.desiredState()).toBe(\"closed\");\n    expect(feedDesiredClosed.state()).toBe(\"closed\");\n    expect(() => {\n      feedDesiredClosed.data();\n    }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n    expect(feedClosed.desiredState()).toBe(\"open\");\n    expect(feedClosed.state()).toBe(\"closed\");\n    expect(() => {\n      feedClosed.data();\n    }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n    expect(feedOpening.desiredState()).toBe(\"open\");\n    expect(feedOpening.state()).toBe(\"closed\");\n    expect(() => {\n      feedOpening.data();\n    }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n    expect(feedOpen.desiredState()).toBe(\"open\");\n    expect(feedOpen.state()).toBe(\"closed\");\n    expect(() => {\n      feedOpen.data();\n    }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n    expect(feedClosing.desiredState()).toBe(\"open\");\n    expect(feedClosing.state()).toBe(\"closed\");\n    expect(() => {\n      feedClosing.data();\n    }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n  });\n\n  // Events\n\n  it(\"should emit events\", () => {\n    // Create listeners\n    const clientListener = harness.createClientListener();\n    const feedDesiredClosedListener = harness.createFeedListener(\n      feedDesiredClosed\n    );\n    const feedClosedListener = harness.createFeedListener(feedClosed);\n    const feedOpeningListener = harness.createFeedListener(feedOpening);\n    const feedOpenListener = harness.createFeedListener(feedOpen);\n    const feedClosingListener = harness.createFeedListener(feedClosing);\n\n    // Have the transport disconnect\n    harness.transport.state.and.returnValue(\"disconnected\");\n    harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n    // Check events\n    expect(clientListener.connecting.calls.count()).toBe(0);\n    expect(clientListener.connect.calls.count()).toBe(0);\n    expect(clientListener.disconnect.calls.count()).toBe(1);\n    expect(clientListener.disconnect.calls.argsFor(0).length).toBe(1);\n    expect(clientListener.disconnect.calls.argsFor(0)[0]).toEqual(\n      jasmine.any(Error)\n    );\n    expect(clientListener.disconnect.calls.argsFor(0)[0].message).toBe(\n      \"FAILURE: ...\"\n    );\n    expect(clientListener.badServerMessage.calls.count()).toBe(0);\n    expect(clientListener.badClientMessage.calls.count()).toBe(0);\n    expect(clientListener.transportError.calls.count()).toBe(0);\n\n    expect(feedDesiredClosedListener.opening.calls.count()).toBe(0);\n    expect(feedDesiredClosedListener.open.calls.count()).toBe(0);\n    expect(feedDesiredClosedListener.close.calls.count()).toBe(0);\n    expect(feedDesiredClosedListener.action.calls.count()).toBe(0);\n\n    expect(feedClosedListener.opening.calls.count()).toBe(0);\n    expect(feedClosedListener.open.calls.count()).toBe(0);\n    expect(feedClosedListener.close.calls.count()).toBe(1);\n    expect(feedClosedListener.close.calls.argsFor(0).length).toBe(1);\n    expect(feedClosedListener.close.calls.argsFor(0)[0]).toEqual(\n      jasmine.any(Error)\n    );\n    expect(feedClosedListener.close.calls.argsFor(0)[0].message).toBe(\n      \"DISCONNECTED: The transport disconnected.\"\n    );\n    expect(feedClosedListener.action.calls.count()).toBe(0);\n\n    expect(feedOpeningListener.opening.calls.count()).toBe(0);\n    expect(feedOpeningListener.open.calls.count()).toBe(0);\n    expect(feedOpeningListener.close.calls.count()).toBe(1);\n    expect(feedOpeningListener.close.calls.argsFor(0).length).toBe(1);\n    expect(feedOpeningListener.close.calls.argsFor(0)[0]).toEqual(\n      jasmine.any(Error)\n    );\n    expect(feedOpeningListener.close.calls.argsFor(0)[0].message).toBe(\n      \"DISCONNECTED: The transport disconnected.\"\n    );\n    expect(feedOpeningListener.action.calls.count()).toBe(0);\n\n    expect(feedOpenListener.opening.calls.count()).toBe(0);\n    expect(feedOpenListener.open.calls.count()).toBe(0);\n    expect(feedOpenListener.close.calls.count()).toBe(1);\n    expect(feedOpenListener.close.calls.argsFor(0).length).toBe(1);\n    expect(feedOpenListener.close.calls.argsFor(0)[0]).toEqual(\n      jasmine.any(Error)\n    );\n    expect(feedOpenListener.close.calls.argsFor(0)[0].message).toBe(\n      \"DISCONNECTED: The transport disconnected.\"\n    );\n    expect(feedOpenListener.action.calls.count()).toBe(0);\n\n    expect(feedClosingListener.opening.calls.count()).toBe(0);\n    expect(feedClosingListener.open.calls.count()).toBe(0);\n    expect(feedClosingListener.close.calls.count()).toBe(1);\n    expect(feedClosingListener.close.calls.argsFor(0).length).toBe(1);\n    expect(feedClosingListener.close.calls.argsFor(0)[0]).toEqual(\n      jasmine.any(Error)\n    );\n    expect(feedClosingListener.close.calls.argsFor(0)[0].message).toBe(\n      \"DISCONNECTED: The transport disconnected.\"\n    );\n    expect(feedClosingListener.action.calls.count()).toBe(0);\n  });\n\n  // Transport calls - N/A (reconnecting tested above)\n\n  // Callbacks\n\n  it(\"should call client.action() callbacks\", () => {\n    harness = harnessFactory();\n    harness.connectClient();\n    const cb = jasmine.createSpy();\n    harness.client.action(\"SomeAction\", { Action: \"Arg\" }, cb);\n\n    // Have the transport disconnect\n    harness.transport.state.and.returnValue(\"disconnected\");\n    harness.transport.emit(\"disconnect\", new Error(\"FAILURE: ...\"));\n\n    expect(cb.calls.count()).toBe(1);\n    expect(cb.calls.argsFor(0).length).toBe(1);\n    expect(cb.calls.argsFor(0)[0]).toEqual(jasmine.any(Error));\n    expect(cb.calls.argsFor(0)[0].message).toBe(\n      \"DISCONNECTED: The transport disconnected.\"\n    );\n  });\n\n  afterEach(() => {\n    jasmine.clock().uninstall();\n  });\n});\n\n/*\n\nAll of the valid/expected message cases are tested thoroughly above, except\nfor ViolationResponse, ActionRevelation, and FeedTermination.\n\nTested here:\n  Structurally invalid server messages\n    Invalid JSON\n    Schema failure\n  Sequentially invalid server messages\n    HandshakeResponse\n    ActionResponse\n    FeedOpenResponse\n    FeedCloseResponse\n  ViolationResponse messages\n  ActionRevelation messages\n  FeedTermination messages\n\n*/\n\ndescribe(\"structurally invalid server messages\", () => {\n  describe(\"if the message is invalid JSON\", () => {\n    // State functions - N/A\n\n    // Events\n\n    it(\"should emit badServerMessage\", () => {\n      const harness = harnessFactory();\n      harness.connectClient();\n      const clientListener = harness.createClientListener();\n      harness.transport.emit(\"message\", \"bad json\");\n\n      expect(clientListener.connecting.calls.count()).toBe(0);\n      expect(clientListener.connect.calls.count()).toBe(0);\n      expect(clientListener.disconnect.calls.count()).toBe(0);\n      expect(clientListener.badServerMessage.calls.count()).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0).length).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0]).toEqual(\n        jasmine.any(Error)\n      );\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0].message).toBe(\n        \"INVALID_MESSAGE: Invalid JSON or schema violation.\"\n      );\n      expect(clientListener.badClientMessage.calls.count()).toBe(0);\n      expect(clientListener.transportError.calls.count()).toBe(0);\n    });\n\n    // Transport calls - N/A\n\n    // Callbacks - N/A\n  });\n\n  describe(\"if schema validation fails\", () => {\n    // State functions - N/A\n\n    // Events\n\n    it(\"should emit badServerMessage\", () => {\n      const harness = harnessFactory();\n      harness.connectClient();\n      const clientListener = harness.createClientListener();\n      harness.transport.emit(\"message\", \"{}\");\n\n      expect(clientListener.connecting.calls.count()).toBe(0);\n      expect(clientListener.connect.calls.count()).toBe(0);\n      expect(clientListener.disconnect.calls.count()).toBe(0);\n      expect(clientListener.badServerMessage.calls.count()).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0).length).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0]).toEqual(\n        jasmine.any(Error)\n      );\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0].message).toBe(\n        \"INVALID_MESSAGE: Invalid JSON or schema violation.\"\n      );\n      expect(clientListener.badClientMessage.calls.count()).toBe(0);\n      expect(clientListener.transportError.calls.count()).toBe(0);\n    });\n\n    // Transport calls - N/A\n\n    // Callbacks - N/A\n  });\n});\n\ndescribe(\"sequentially invalid server messages\", () => {\n  beforeEach(() => {\n    jasmine.clock().install();\n  });\n\n  describe(\"unexpected HandshakeResponse - before Handshake\", () => {\n    // Can't test, since Handshake is sent synchronously on transport connect\n  });\n\n  describe(\"unexpected HandshakeResponse - another after HandshakeResponse\", () => {\n    // State functions - N/A\n\n    // Events\n\n    it(\"should emit badServerMessage\", () => {\n      const harness = harnessFactory();\n      harness.connectClient();\n      const clientListener = harness.createClientListener();\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"HandshakeResponse\",\n          Success: true,\n          Version: \"0.1\",\n          ClientId: \"SOME_CLIENT_ID\"\n        })\n      );\n\n      expect(clientListener.connecting.calls.count()).toBe(0);\n      expect(clientListener.connect.calls.count()).toBe(0);\n      expect(clientListener.disconnect.calls.count()).toBe(0);\n      expect(clientListener.badServerMessage.calls.count()).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0).length).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0]).toEqual(\n        jasmine.any(Error)\n      );\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0].message).toBe(\n        \"UNEXPECTED_MESSAGE: Unexpected HandshakeResponse.\"\n      );\n      expect(clientListener.badClientMessage.calls.count()).toBe(0);\n      expect(clientListener.transportError.calls.count()).toBe(0);\n    });\n\n    // Transport calls - N/A\n\n    // Callbacks - N/A\n  });\n\n  describe(\"unexpected ActionResponse - before HandshakeResponse\", () => {\n    // State functions - N/A\n\n    // Events\n\n    it(\"should emit badServerMessage\", () => {\n      const harness = harnessFactory();\n      harness.client.connect();\n      harness.transport.state.and.returnValue(\"connecting\");\n      harness.transport.emit(\"connecting\");\n      harness.transport.state.and.returnValue(\"connected\");\n      harness.transport.emit(\"connect\");\n      const clientListener = harness.createClientListener();\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"ActionResponse\",\n          CallbackId: \"SOME_CALLBACK_ID\",\n          Success: true,\n          ActionData: { Action: \"Data\" }\n        })\n      );\n\n      expect(clientListener.connecting.calls.count()).toBe(0);\n      expect(clientListener.connect.calls.count()).toBe(0);\n      expect(clientListener.disconnect.calls.count()).toBe(0);\n      expect(clientListener.badServerMessage.calls.count()).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0).length).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0]).toEqual(\n        jasmine.any(Error)\n      );\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0].message).toBe(\n        \"UNEXPECTED_MESSAGE: Unexpected ActionResponse.\"\n      );\n      expect(clientListener.badClientMessage.calls.count()).toBe(0);\n      expect(clientListener.transportError.calls.count()).toBe(0);\n    });\n\n    // Transport calls - N/A\n\n    // Callbacks - N/A\n  });\n\n  describe(\"unexpected ActionResponse - unrecognized callback id\", () => {\n    // State functions - N/A\n\n    // Events\n\n    it(\"should emit badServerMessage\", () => {\n      const harness = harnessFactory();\n      harness.connectClient();\n      const clientListener = harness.createClientListener();\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"ActionResponse\",\n          CallbackId: \"SOME_CALLBACK_ID\",\n          Success: true,\n          ActionData: { Action: \"Data\" }\n        })\n      );\n\n      expect(clientListener.connecting.calls.count()).toBe(0);\n      expect(clientListener.connect.calls.count()).toBe(0);\n      expect(clientListener.disconnect.calls.count()).toBe(0);\n      expect(clientListener.badServerMessage.calls.count()).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0).length).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0]).toEqual(\n        jasmine.any(Error)\n      );\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0].message).toBe(\n        \"UNEXPECTED_MESSAGE: Unexpected ActionResponse.\"\n      );\n      expect(clientListener.badClientMessage.calls.count()).toBe(0);\n      expect(clientListener.transportError.calls.count()).toBe(0);\n    });\n\n    // Transport calls - N/A\n\n    // Callbacks - N/A\n  });\n\n  describe(\"unexpected FeedOpenResponse - before HandshakeResponse\", () => {\n    // State functions - N/A\n\n    // Events\n\n    it(\"should emit badServerMessage\", () => {\n      const harness = harnessFactory();\n      harness.client.connect();\n      harness.transport.state.and.returnValue(\"connecting\");\n      harness.transport.emit(\"connecting\");\n      harness.transport.state.and.returnValue(\"connected\");\n      harness.transport.emit(\"connect\");\n      const clientListener = harness.createClientListener();\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedOpenResponse\",\n          Success: true,\n          FeedName: \"SOME_FEED_NAME\",\n          FeedArgs: { Feed: \"Arg\" },\n          FeedData: { Feed: \"Data\" }\n        })\n      );\n\n      expect(clientListener.connecting.calls.count()).toBe(0);\n      expect(clientListener.connect.calls.count()).toBe(0);\n      expect(clientListener.disconnect.calls.count()).toBe(0);\n      expect(clientListener.badServerMessage.calls.count()).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0).length).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0]).toEqual(\n        jasmine.any(Error)\n      );\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0].message).toBe(\n        \"UNEXPECTED_MESSAGE: Unexpected FeedOpenResponse.\"\n      );\n      expect(clientListener.badClientMessage.calls.count()).toBe(0);\n      expect(clientListener.transportError.calls.count()).toBe(0);\n    });\n\n    // Transport calls - N/A\n\n    // Callbacks - N/A\n  });\n\n  describe(\"unexpected FeedOpenResponse - server feed was understood to be closed\", () => {\n    // State functions - N/A\n\n    // Events\n\n    it(\"should emit badServerMessage\", () => {\n      const harness = harnessFactory();\n      harness.connectClient();\n      const clientListener = harness.createClientListener();\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedOpenResponse\",\n          Success: true,\n          FeedName: \"SOME_FEED_NAME\",\n          FeedArgs: { Feed: \"Arg\" },\n          FeedData: { Feed: \"Data\" }\n        })\n      );\n\n      expect(clientListener.connecting.calls.count()).toBe(0);\n      expect(clientListener.connect.calls.count()).toBe(0);\n      expect(clientListener.disconnect.calls.count()).toBe(0);\n      expect(clientListener.badServerMessage.calls.count()).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0).length).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0]).toEqual(\n        jasmine.any(Error)\n      );\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0].message).toBe(\n        \"UNEXPECTED_MESSAGE: Unexpected FeedOpenResponse.\"\n      );\n      expect(clientListener.badClientMessage.calls.count()).toBe(0);\n      expect(clientListener.transportError.calls.count()).toBe(0);\n    });\n\n    // Transport calls - N/A\n\n    // Callbacks - N/A\n  });\n\n  describe(\"unexpected FeedOpenResponse - server feed was understood to be open\", () => {\n    // State functions - N/A\n\n    // Events\n\n    it(\"should emit badServerMessage\", () => {\n      const harness = harnessFactory();\n      harness.connectClient();\n      const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      feed.desireOpen();\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedOpenResponse\",\n          Success: true,\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Arg\" },\n          FeedData: { Feed: \"Data\" }\n        })\n      );\n      const clientListener = harness.createClientListener();\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedOpenResponse\",\n          Success: true,\n          FeedName: \"SOME_FEED_NAME\",\n          FeedArgs: { Feed: \"Arg\" },\n          FeedData: { Feed: \"Data\" }\n        })\n      );\n\n      expect(clientListener.connecting.calls.count()).toBe(0);\n      expect(clientListener.connect.calls.count()).toBe(0);\n      expect(clientListener.disconnect.calls.count()).toBe(0);\n      expect(clientListener.badServerMessage.calls.count()).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0).length).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0]).toEqual(\n        jasmine.any(Error)\n      );\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0].message).toBe(\n        \"UNEXPECTED_MESSAGE: Unexpected FeedOpenResponse.\"\n      );\n      expect(clientListener.badClientMessage.calls.count()).toBe(0);\n      expect(clientListener.transportError.calls.count()).toBe(0);\n    });\n\n    // Transport calls - N/A\n\n    // Callbacks - N/A\n  });\n\n  describe(\"unexpected FeedOpenResponse - server feed was understood to be closing\", () => {\n    // State functions - N/A\n\n    // Events\n\n    it(\"should emit badServerMessage\", () => {\n      const harness = harnessFactory();\n      harness.connectClient();\n      const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      feed.desireOpen();\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedOpenResponse\",\n          Success: true,\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Arg\" },\n          FeedData: { Feed: \"Data\" }\n        })\n      );\n      feed.desireClosed();\n      const clientListener = harness.createClientListener();\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedOpenResponse\",\n          Success: true,\n          FeedName: \"SOME_FEED_NAME\",\n          FeedArgs: { Feed: \"Arg\" },\n          FeedData: { Feed: \"Data\" }\n        })\n      );\n\n      expect(clientListener.connecting.calls.count()).toBe(0);\n      expect(clientListener.connect.calls.count()).toBe(0);\n      expect(clientListener.disconnect.calls.count()).toBe(0);\n      expect(clientListener.badServerMessage.calls.count()).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0).length).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0]).toEqual(\n        jasmine.any(Error)\n      );\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0].message).toBe(\n        \"UNEXPECTED_MESSAGE: Unexpected FeedOpenResponse.\"\n      );\n      expect(clientListener.badClientMessage.calls.count()).toBe(0);\n      expect(clientListener.transportError.calls.count()).toBe(0);\n    });\n\n    // Transport calls - N/A\n\n    // Callbacks - N/A\n  });\n\n  describe(\"unexpected FeedCloseResponse - before HandshakeResponse\", () => {\n    // State functions - N/A\n\n    // Events\n\n    it(\"should emit badServerMessage\", () => {\n      const harness = harnessFactory();\n      harness.client.connect();\n      harness.transport.state.and.returnValue(\"connecting\");\n      harness.transport.emit(\"connecting\");\n      harness.transport.state.and.returnValue(\"connected\");\n      harness.transport.emit(\"connect\");\n      const clientListener = harness.createClientListener();\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedCloseResponse\",\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Arg\" }\n        })\n      );\n\n      expect(clientListener.connecting.calls.count()).toBe(0);\n      expect(clientListener.connect.calls.count()).toBe(0);\n      expect(clientListener.disconnect.calls.count()).toBe(0);\n      expect(clientListener.badServerMessage.calls.count()).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0).length).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0]).toEqual(\n        jasmine.any(Error)\n      );\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0].message).toBe(\n        \"UNEXPECTED_MESSAGE: Unexpected FeedCloseResponse.\"\n      );\n      expect(clientListener.badClientMessage.calls.count()).toBe(0);\n      expect(clientListener.transportError.calls.count()).toBe(0);\n    });\n\n    // Transport calls - N/A\n\n    // Callbacks - N/A\n  });\n\n  describe(\"unexpected FeedCloseResponse - server feed was understood to be closed\", () => {\n    // State functions - N/A\n\n    // Events\n\n    it(\"should emit badServerMessage\", () => {\n      const harness = harnessFactory();\n      harness.connectClient();\n      const clientListener = harness.createClientListener();\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedCloseResponse\",\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Arg\" }\n        })\n      );\n\n      expect(clientListener.connecting.calls.count()).toBe(0);\n      expect(clientListener.connect.calls.count()).toBe(0);\n      expect(clientListener.disconnect.calls.count()).toBe(0);\n      expect(clientListener.badServerMessage.calls.count()).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0).length).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0]).toEqual(\n        jasmine.any(Error)\n      );\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0].message).toBe(\n        \"UNEXPECTED_MESSAGE: Unexpected FeedCloseResponse.\"\n      );\n      expect(clientListener.badClientMessage.calls.count()).toBe(0);\n      expect(clientListener.transportError.calls.count()).toBe(0);\n    });\n\n    // Transport calls - N/A\n\n    // Callbacks - N/A\n  });\n\n  describe(\"unexpected FeedCloseResponse - server feed was understood to be opening\", () => {\n    // State functions - N/A\n\n    // Events\n\n    it(\"should emit badServerMessage\", () => {\n      const harness = harnessFactory();\n      harness.connectClient();\n      const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      feed.desireOpen();\n      const clientListener = harness.createClientListener();\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedCloseResponse\",\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Arg\" }\n        })\n      );\n\n      expect(clientListener.connecting.calls.count()).toBe(0);\n      expect(clientListener.connect.calls.count()).toBe(0);\n      expect(clientListener.disconnect.calls.count()).toBe(0);\n      expect(clientListener.badServerMessage.calls.count()).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0).length).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0]).toEqual(\n        jasmine.any(Error)\n      );\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0].message).toBe(\n        \"UNEXPECTED_MESSAGE: Unexpected FeedCloseResponse.\"\n      );\n      expect(clientListener.badClientMessage.calls.count()).toBe(0);\n      expect(clientListener.transportError.calls.count()).toBe(0);\n    });\n\n    // Transport calls - N/A\n\n    // Callbacks - N/A\n  });\n\n  describe(\"unexpected FeedCloseResponse - server feed was understood to be open\", () => {\n    // State functions - N/A\n\n    // Events\n\n    it(\"should emit badServerMessage\", () => {\n      const harness = harnessFactory();\n      harness.connectClient();\n      const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      feed.desireOpen();\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedOpenResponse\",\n          Success: true,\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Arg\" },\n          FeedData: { Feed: \"Data\" }\n        })\n      );\n      const clientListener = harness.createClientListener();\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedCloseResponse\",\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Arg\" }\n        })\n      );\n\n      expect(clientListener.connecting.calls.count()).toBe(0);\n      expect(clientListener.connect.calls.count()).toBe(0);\n      expect(clientListener.disconnect.calls.count()).toBe(0);\n      expect(clientListener.badServerMessage.calls.count()).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0).length).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0]).toEqual(\n        jasmine.any(Error)\n      );\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0].message).toBe(\n        \"UNEXPECTED_MESSAGE: Unexpected FeedCloseResponse.\"\n      );\n      expect(clientListener.badClientMessage.calls.count()).toBe(0);\n      expect(clientListener.transportError.calls.count()).toBe(0);\n    });\n\n    // Transport calls - N/A\n\n    // Callbacks - N/A\n  });\n\n  describe(\"unexpected ActionRevelation - before HandshakeResponse\", () => {\n    // State functions - N/A\n\n    // Events\n\n    it(\"should emit badServerMessage\", () => {\n      const harness = harnessFactory();\n      harness.client.connect();\n      harness.transport.state.and.returnValue(\"connecting\");\n      harness.transport.emit(\"connecting\");\n      harness.transport.state.and.returnValue(\"connected\");\n      harness.transport.emit(\"connect\");\n      const clientListener = harness.createClientListener();\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"ActionRevelation\",\n          ActionName: \"SomeAction\",\n          ActionData: { Action: \"Data\" },\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Arg\" },\n          FeedDeltas: [],\n          FeedMd5: \"123451234512345123451234\"\n        })\n      );\n\n      expect(clientListener.connecting.calls.count()).toBe(0);\n      expect(clientListener.connect.calls.count()).toBe(0);\n      expect(clientListener.disconnect.calls.count()).toBe(0);\n      expect(clientListener.badServerMessage.calls.count()).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0).length).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0]).toEqual(\n        jasmine.any(Error)\n      );\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0].message).toBe(\n        \"UNEXPECTED_MESSAGE: Unexpected ActionRevelation.\"\n      );\n      expect(clientListener.badClientMessage.calls.count()).toBe(0);\n      expect(clientListener.transportError.calls.count()).toBe(0);\n    });\n\n    // Transport calls - N/A\n\n    // Callbacks - N/A\n  });\n\n  describe(\"unexpected ActionRevelation - server feed was understood to be closed\", () => {\n    // State functions - N/A\n\n    // Events\n\n    it(\"should emit badServerMessage\", () => {\n      const harness = harnessFactory();\n      harness.connectClient();\n      const clientListener = harness.createClientListener();\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"ActionRevelation\",\n          ActionName: \"SomeAction\",\n          ActionData: { Action: \"Data\" },\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Arg\" },\n          FeedDeltas: [],\n          FeedMd5: \"123451234512345123451234\"\n        })\n      );\n\n      expect(clientListener.connecting.calls.count()).toBe(0);\n      expect(clientListener.connect.calls.count()).toBe(0);\n      expect(clientListener.disconnect.calls.count()).toBe(0);\n      expect(clientListener.badServerMessage.calls.count()).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0).length).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0]).toEqual(\n        jasmine.any(Error)\n      );\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0].message).toBe(\n        \"UNEXPECTED_MESSAGE: Unexpected ActionRevelation.\"\n      );\n      expect(clientListener.badClientMessage.calls.count()).toBe(0);\n      expect(clientListener.transportError.calls.count()).toBe(0);\n    });\n\n    // Transport calls - N/A\n\n    // Callbacks - N/A\n  });\n\n  describe(\"unexpected ActionRevelation - server feed was understood to be opening\", () => {\n    // State functions - N/A\n\n    // Events\n\n    it(\"should emit badServerMessage\", () => {\n      const harness = harnessFactory();\n      harness.connectClient();\n      const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      feed.desireOpen();\n      const clientListener = harness.createClientListener();\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"ActionRevelation\",\n          ActionName: \"SomeAction\",\n          ActionData: { Action: \"Data\" },\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Arg\" },\n          FeedDeltas: [],\n          FeedMd5: \"123451234512345123451234\"\n        })\n      );\n\n      expect(clientListener.connecting.calls.count()).toBe(0);\n      expect(clientListener.connect.calls.count()).toBe(0);\n      expect(clientListener.disconnect.calls.count()).toBe(0);\n      expect(clientListener.badServerMessage.calls.count()).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0).length).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0]).toEqual(\n        jasmine.any(Error)\n      );\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0].message).toBe(\n        \"UNEXPECTED_MESSAGE: Unexpected ActionRevelation.\"\n      );\n      expect(clientListener.badClientMessage.calls.count()).toBe(0);\n      expect(clientListener.transportError.calls.count()).toBe(0);\n    });\n\n    // Transport calls - N/A\n\n    // Callbacks - N/A\n  });\n\n  describe(\"unexpected FeedTermination - before HandshakeResponse\", () => {\n    // State functions - N/A\n\n    // Events\n\n    it(\"should emit badServerMessage\", () => {\n      const harness = harnessFactory();\n      harness.client.connect();\n      harness.transport.state.and.returnValue(\"connecting\");\n      harness.transport.emit(\"connecting\");\n      harness.transport.state.and.returnValue(\"connected\");\n      harness.transport.emit(\"connect\");\n      const clientListener = harness.createClientListener();\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedTermination\",\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Arg\" },\n          ErrorCode: \"SOME_ERROR_CODE\",\n          ErrorData: { Error: \"Data\" }\n        })\n      );\n\n      expect(clientListener.connecting.calls.count()).toBe(0);\n      expect(clientListener.connect.calls.count()).toBe(0);\n      expect(clientListener.disconnect.calls.count()).toBe(0);\n      expect(clientListener.badServerMessage.calls.count()).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0).length).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0]).toEqual(\n        jasmine.any(Error)\n      );\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0].message).toBe(\n        \"UNEXPECTED_MESSAGE: Unexpected FeedTermination.\"\n      );\n      expect(clientListener.badClientMessage.calls.count()).toBe(0);\n      expect(clientListener.transportError.calls.count()).toBe(0);\n    });\n\n    // Transport calls - N/A\n\n    // Callbacks - N/A\n  });\n\n  describe(\"unexpected FeedTermination - server feed was understood to be closed\", () => {\n    // State functions - N/A\n\n    // Events\n\n    it(\"should emit badServerMessage\", () => {\n      const harness = harnessFactory();\n      harness.connectClient();\n      const clientListener = harness.createClientListener();\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedTermination\",\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Arg\" },\n          ErrorCode: \"SOME_ERROR_CODE\",\n          ErrorData: { Error: \"Data\" }\n        })\n      );\n\n      expect(clientListener.connecting.calls.count()).toBe(0);\n      expect(clientListener.connect.calls.count()).toBe(0);\n      expect(clientListener.disconnect.calls.count()).toBe(0);\n      expect(clientListener.badServerMessage.calls.count()).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0).length).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0]).toEqual(\n        jasmine.any(Error)\n      );\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0].message).toBe(\n        \"UNEXPECTED_MESSAGE: Unexpected FeedTermination.\"\n      );\n      expect(clientListener.badClientMessage.calls.count()).toBe(0);\n      expect(clientListener.transportError.calls.count()).toBe(0);\n    });\n\n    // Transport calls - N/A\n\n    // Callbacks - N/A\n  });\n\n  describe(\"unexpected FeedTermination - server feed was understood to be opening\", () => {\n    // State functions - N/A\n\n    // Events\n\n    it(\"should emit badServerMessage\", () => {\n      const harness = harnessFactory();\n      harness.connectClient();\n      const feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      feed.desireOpen();\n      const clientListener = harness.createClientListener();\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedTermination\",\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Arg\" },\n          ErrorCode: \"SOME_ERROR_CODE\",\n          ErrorData: { Error: \"Data\" }\n        })\n      );\n\n      expect(clientListener.connecting.calls.count()).toBe(0);\n      expect(clientListener.connect.calls.count()).toBe(0);\n      expect(clientListener.disconnect.calls.count()).toBe(0);\n      expect(clientListener.badServerMessage.calls.count()).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0).length).toBe(1);\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0]).toEqual(\n        jasmine.any(Error)\n      );\n      expect(clientListener.badServerMessage.calls.argsFor(0)[0].message).toBe(\n        \"UNEXPECTED_MESSAGE: Unexpected FeedTermination.\"\n      );\n      expect(clientListener.badClientMessage.calls.count()).toBe(0);\n      expect(clientListener.transportError.calls.count()).toBe(0);\n    });\n\n    // Transport calls - N/A\n\n    // Callbacks - N/A\n  });\n\n  afterEach(() => {\n    jasmine.clock().uninstall();\n  });\n});\n\ndescribe(\"Structurally/sequentially valid ViolationResponse message\", () => {\n  // State functions - N/A\n\n  // Events - N/A\n\n  it(\"should emit badClientMessage\", () => {\n    const harness = harnessFactory();\n    harness.connectClient();\n    const clientListener = harness.createClientListener();\n    harness.transport.emit(\n      \"message\",\n      JSON.stringify({\n        MessageType: \"ViolationResponse\",\n        Diagnostics: { Diagnostic: \"Data\" }\n      })\n    );\n\n    expect(clientListener.connecting.calls.count()).toBe(0);\n    expect(clientListener.connect.calls.count()).toBe(0);\n    expect(clientListener.disconnect.calls.count()).toBe(0);\n    expect(clientListener.badServerMessage.calls.count()).toBe(0);\n    expect(clientListener.badClientMessage.calls.count()).toBe(1);\n    expect(clientListener.badClientMessage.calls.argsFor(0).length).toBe(1);\n    expect(clientListener.badClientMessage.calls.argsFor(0)[0]).toEqual({\n      Diagnostic: \"Data\"\n    });\n    expect(clientListener.transportError.calls.count()).toBe(0);\n  });\n\n  // Transport calls - N/A\n\n  // Callbacks - N/A\n});\n\ndescribe(\"Structurally/sequentially valid ActionRevelation message\", () => {\n  beforeEach(() => {\n    jasmine.clock().install();\n  });\n\n  describe(\"if the server feed is open\", () => {\n    let harness;\n    let feedWantedOpen;\n    let feedWantedClosed;\n    beforeEach(() => {\n      harness = harnessFactory();\n      harness.connectClient();\n      feedWantedOpen = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      feedWantedOpen.desireOpen();\n      feedWantedClosed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedOpenResponse\",\n          Success: true,\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Arg\" },\n          FeedData: { Feed: \"Data\" }\n        })\n      );\n    });\n\n    describe(\"if there is an invalid feed delta\", () => {\n      // State functions\n\n      it(\"state functions\", () => {\n        // Check state functions\n        expect(harness.client.state()).toBe(\"connected\");\n        expect(harness.client.id()).toBe(\"SOME_CLIENT_ID\");\n        expect(feedWantedOpen.desiredState()).toBe(\"open\");\n        expect(feedWantedOpen.state()).toBe(\"open\");\n        expect(feedWantedOpen.data()).toEqual({ Feed: \"Data\" });\n        expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n        expect(feedWantedClosed.state()).toBe(\"closed\");\n        expect(() => {\n          feedWantedClosed.data();\n        }).toThrow(\n          new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n        );\n\n        // Have the transport emit a ActionRevelation with a bad delta\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"ActionRevelation\",\n            ActionName: \"SomeAction\",\n            ActionData: { Action: \"Data\" },\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" },\n            FeedDeltas: [\n              {\n                Operation: \"Set\",\n                Path: [\"an\", \"invalid\", \"path\"],\n                Value: 123\n              }\n            ]\n          })\n        );\n\n        // Check state functions\n        expect(harness.client.state()).toBe(\"connected\");\n        expect(harness.client.id()).toBe(\"SOME_CLIENT_ID\");\n        expect(feedWantedOpen.desiredState()).toBe(\"open\");\n        expect(feedWantedOpen.state()).toBe(\"closed\");\n        expect(() => {\n          feedWantedOpen.data();\n        }).toThrow(\n          new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n        );\n        expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n        expect(feedWantedClosed.state()).toBe(\"closed\");\n        expect(() => {\n          feedWantedClosed.data();\n        }).toThrow(\n          new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n        );\n      });\n\n      // Events - client and feed\n\n      it(\"events\", () => {\n        const clientListener = harness.createClientListener();\n        const feedWantedOpenListener = harness.createFeedListener(\n          feedWantedOpen\n        );\n        const feedWantedClosedListener = harness.createFeedListener(\n          feedWantedClosed\n        );\n\n        // Have the transport emit a ActionRevelation with a bad delta\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"ActionRevelation\",\n            ActionName: \"SomeAction\",\n            ActionData: { Action: \"Data\" },\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" },\n            FeedDeltas: [\n              {\n                Operation: \"Set\",\n                Path: [\"an\", \"invalid\", \"path\"],\n                Value: 123\n              }\n            ]\n          })\n        );\n\n        // Check client events\n        expect(clientListener.connecting.calls.count()).toBe(0);\n        expect(clientListener.connect.calls.count()).toBe(0);\n        expect(clientListener.disconnect.calls.count()).toBe(0);\n        expect(clientListener.disconnect.calls.argsFor(0).length).toBe(0);\n        expect(clientListener.badServerMessage.calls.count()).toBe(1);\n        expect(clientListener.badServerMessage.calls.argsFor(0)[0]).toEqual(\n          jasmine.any(Error)\n        );\n        expect(\n          clientListener.badServerMessage.calls.argsFor(0)[0].message\n        ).toBe(\n          \"INVALID_DELTA: Received ActionRevelation with contextually invalid feed delta.\"\n        );\n        expect(clientListener.badClientMessage.calls.count()).toBe(0);\n        expect(clientListener.transportError.calls.count()).toBe(0);\n\n        // Check feed events\n        expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n        expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n        expect(feedWantedOpenListener.close.calls.count()).toBe(1);\n        expect(feedWantedOpenListener.close.calls.argsFor(0).length).toBe(1);\n        expect(feedWantedOpenListener.close.calls.argsFor(0)[0]).toEqual(\n          jasmine.any(Error)\n        );\n        expect(feedWantedOpenListener.close.calls.argsFor(0)[0].message).toBe(\n          \"BAD_ACTION_REVELATION: The server passed an invalid feed delta.\"\n        );\n        expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n      });\n\n      // Transport calls\n\n      it(\"transport calls\", () => {\n        harness.transport.spyClear();\n\n        // Have the transport emit a ActionRevelation with a bad delta\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"ActionRevelation\",\n            ActionName: \"SomeAction\",\n            ActionData: { Action: \"Data\" },\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" },\n            FeedDeltas: [\n              {\n                Operation: \"Set\",\n                Path: [\"an\", \"invalid\", \"path\"],\n                Value: 123\n              }\n            ]\n          })\n        );\n\n        // Check transport calls\n        expect(harness.transport.connect.calls.count()).toBe(0);\n        expect(harness.transport.send.calls.count()).toBe(1); // FeedClose\n        expect(harness.transport.send.calls.argsFor(0)[0]).toBe(\n          JSON.stringify({\n            MessageType: \"FeedClose\",\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" }\n          })\n        );\n        expect(harness.transport.disconnect.calls.count()).toBe(0);\n        expect(harness.transport.state.calls.count() >= 0).toBe(true);\n      });\n\n      // Callbacks - N/A\n    });\n\n    describe(\"if there is an invalid feed data hash\", () => {\n      // State functions\n\n      it(\"state functions\", () => {\n        // Check state functions\n        expect(harness.client.state()).toBe(\"connected\");\n        expect(harness.client.id()).toBe(\"SOME_CLIENT_ID\");\n        expect(feedWantedOpen.desiredState()).toBe(\"open\");\n        expect(feedWantedOpen.state()).toBe(\"open\");\n        expect(feedWantedOpen.data()).toEqual({ Feed: \"Data\" });\n        expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n        expect(feedWantedClosed.state()).toBe(\"closed\");\n        expect(() => {\n          feedWantedClosed.data();\n        }).toThrow(\n          new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n        );\n\n        // Have the transport emit a ActionRevelation with a bad hash\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"ActionRevelation\",\n            ActionName: \"SomeAction\",\n            ActionData: { Action: \"Data\" },\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" },\n            FeedDeltas: [\n              {\n                Operation: \"Set\",\n                Path: [\"validpath\"],\n                Value: 123\n              }\n            ],\n            FeedMd5: \"123456789012345678901234\"\n          })\n        );\n\n        // Check state functions\n        expect(harness.client.state()).toBe(\"connected\");\n        expect(harness.client.id()).toBe(\"SOME_CLIENT_ID\");\n        expect(feedWantedOpen.desiredState()).toBe(\"open\");\n        expect(feedWantedOpen.state()).toBe(\"closed\");\n        expect(() => {\n          feedWantedOpen.data();\n        }).toThrow(\n          new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n        );\n        expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n        expect(feedWantedClosed.state()).toBe(\"closed\");\n        expect(() => {\n          feedWantedClosed.data();\n        }).toThrow(\n          new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n        );\n      });\n\n      // Events - client and feed\n\n      it(\"events\", () => {\n        const clientListener = harness.createClientListener();\n        const feedWantedOpenListener = harness.createFeedListener(\n          feedWantedOpen\n        );\n        const feedWantedClosedListener = harness.createFeedListener(\n          feedWantedClosed\n        );\n\n        // Have the transport emit a ActionRevelation with a bad hash\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"ActionRevelation\",\n            ActionName: \"SomeAction\",\n            ActionData: { Action: \"Data\" },\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" },\n            FeedDeltas: [\n              {\n                Operation: \"Set\",\n                Path: [\"validpath\"],\n                Value: 123\n              }\n            ],\n            FeedMd5: \"123456789012345678901234\"\n          })\n        );\n\n        // Check client events\n        expect(clientListener.connecting.calls.count()).toBe(0);\n        expect(clientListener.connect.calls.count()).toBe(0);\n        expect(clientListener.disconnect.calls.count()).toBe(0);\n        expect(clientListener.disconnect.calls.argsFor(0).length).toBe(0);\n        expect(clientListener.badServerMessage.calls.count()).toBe(1);\n        expect(clientListener.badServerMessage.calls.argsFor(0)[0]).toEqual(\n          jasmine.any(Error)\n        );\n        expect(\n          clientListener.badServerMessage.calls.argsFor(0)[0].message\n        ).toBe(\"INVALID_HASH: Feed data MD5 verification failed.\");\n        expect(clientListener.badClientMessage.calls.count()).toBe(0);\n        expect(clientListener.transportError.calls.count()).toBe(0);\n\n        // Check feed events\n        expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n        expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n        expect(feedWantedOpenListener.close.calls.count()).toBe(1);\n        expect(feedWantedOpenListener.close.calls.argsFor(0).length).toBe(1);\n        expect(feedWantedOpenListener.close.calls.argsFor(0)[0]).toEqual(\n          jasmine.any(Error)\n        );\n        expect(feedWantedOpenListener.close.calls.argsFor(0)[0].message).toBe(\n          \"BAD_ACTION_REVELATION: Hash verification failed.\"\n        );\n        expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n      });\n\n      // Transport calls\n\n      it(\"transport calls\", () => {\n        harness.transport.spyClear();\n\n        // Have the transport emit a ActionRevelation with a bad hash\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"ActionRevelation\",\n            ActionName: \"SomeAction\",\n            ActionData: { Action: \"Data\" },\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" },\n            FeedDeltas: [\n              {\n                Operation: \"Set\",\n                Path: [\"validpath\"],\n                Value: 123\n              }\n            ],\n            FeedMd5: \"123456789012345678901234\"\n          })\n        );\n\n        // Check transport calls\n        expect(harness.transport.connect.calls.count()).toBe(0);\n        expect(harness.transport.send.calls.count()).toBe(1); // FeedClose\n        expect(harness.transport.send.calls.argsFor(0)[0]).toBe(\n          JSON.stringify({\n            MessageType: \"FeedClose\",\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" }\n          })\n        );\n        expect(harness.transport.disconnect.calls.count()).toBe(0);\n        expect(harness.transport.state.calls.count() >= 0).toBe(true);\n      });\n\n      // Callbacks - N/A\n    });\n\n    describe(\"if the revelation is valid\", () => {\n      // State functions\n\n      it(\"state functions\", () => {\n        // Check state functions\n        expect(harness.client.state()).toBe(\"connected\");\n        expect(harness.client.id()).toBe(\"SOME_CLIENT_ID\");\n        expect(feedWantedOpen.desiredState()).toBe(\"open\");\n        expect(feedWantedOpen.state()).toBe(\"open\");\n        expect(feedWantedOpen.data()).toEqual({ Feed: \"Data\" });\n        expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n        expect(feedWantedClosed.state()).toBe(\"closed\");\n        expect(() => {\n          feedWantedClosed.data();\n        }).toThrow(\n          new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n        );\n\n        // Have the transport emit a valid ActionRevelation\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"ActionRevelation\",\n            ActionName: \"SomeAction\",\n            ActionData: { Action: \"Data\" },\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" },\n            FeedDeltas: [\n              {\n                Operation: \"Set\",\n                Path: [\"Feed\"],\n                Value: \"Data2\"\n              }\n            ],\n            FeedMd5: \"wh+CI4D0VYuSbmN8BzeSxA==\"\n          })\n        );\n\n        // Check state functions\n        expect(harness.client.state()).toBe(\"connected\");\n        expect(harness.client.id()).toBe(\"SOME_CLIENT_ID\");\n        expect(feedWantedOpen.desiredState()).toBe(\"open\");\n        expect(feedWantedOpen.state()).toBe(\"open\");\n        expect(feedWantedOpen.data()).toEqual({ Feed: \"Data2\" });\n        expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n        expect(feedWantedClosed.state()).toBe(\"closed\");\n        expect(() => {\n          feedWantedClosed.data();\n        }).toThrow(\n          new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n        );\n      });\n\n      // Events - client and feed\n\n      it(\"events\", () => {\n        const clientListener = harness.createClientListener();\n        const feedWantedOpenListener = harness.createFeedListener(\n          feedWantedOpen\n        );\n        const feedWantedClosedListener = harness.createFeedListener(\n          feedWantedClosed\n        );\n        const actionNameSpy = jasmine.createSpy();\n        feedWantedOpen.on(\"action:SomeAction\", actionNameSpy);\n\n        // Have the transport emit a valid ActionRevelation\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"ActionRevelation\",\n            ActionName: \"SomeAction\",\n            ActionData: { Action: \"Data\" },\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" },\n            FeedDeltas: [\n              {\n                Operation: \"Set\",\n                Path: [\"Feed\"],\n                Value: \"Data2\"\n              }\n            ],\n            FeedMd5: \"wh+CI4D0VYuSbmN8BzeSxA==\"\n          })\n        );\n\n        // Check client events\n        expect(clientListener.connecting.calls.count()).toBe(0);\n        expect(clientListener.connect.calls.count()).toBe(0);\n        expect(clientListener.disconnect.calls.count()).toBe(0);\n        expect(clientListener.disconnect.calls.argsFor(0).length).toBe(0);\n        expect(clientListener.badServerMessage.calls.count()).toBe(0);\n        expect(clientListener.badClientMessage.calls.count()).toBe(0);\n        expect(clientListener.transportError.calls.count()).toBe(0);\n\n        // Check feed events\n        expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n        expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n        expect(feedWantedOpenListener.close.calls.count()).toBe(0);\n        expect(feedWantedOpenListener.action.calls.count()).toBe(1);\n        expect(feedWantedOpenListener.action.calls.argsFor(0).length).toBe(4);\n        expect(feedWantedOpenListener.action.calls.argsFor(0)[0]).toBe(\n          \"SomeAction\"\n        );\n        expect(feedWantedOpenListener.action.calls.argsFor(0)[1]).toEqual({\n          Action: \"Data\"\n        });\n        expect(feedWantedOpenListener.action.calls.argsFor(0)[2]).toEqual({\n          Feed: \"Data2\"\n        });\n        expect(feedWantedOpenListener.action.calls.argsFor(0)[3]).toEqual({\n          Feed: \"Data\"\n        });\n        expect(actionNameSpy.calls.count()).toBe(1);\n        expect(actionNameSpy.calls.argsFor(0).length).toBe(3);\n        expect(actionNameSpy.calls.argsFor(0)[0]).toEqual({\n          Action: \"Data\"\n        });\n        expect(actionNameSpy.calls.argsFor(0)[1]).toEqual({\n          Feed: \"Data2\"\n        });\n        expect(actionNameSpy.calls.argsFor(0)[2]).toEqual({\n          Feed: \"Data\"\n        });\n        expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n        expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n      });\n\n      // Transport calls\n\n      it(\"transport calls\", () => {\n        harness.transport.spyClear();\n\n        // Have the transport emit a valid ActionRevelation\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"ActionRevelation\",\n            ActionName: \"SomeAction\",\n            ActionData: { Action: \"Data\" },\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" },\n            FeedDeltas: [\n              {\n                Operation: \"Set\",\n                Path: [\"Feed\"],\n                Value: \"Data2\"\n              }\n            ],\n            FeedMd5: \"wh+CI4D0VYuSbmN8BzeSxA==\"\n          })\n        );\n\n        // Check transport calls\n        expect(harness.transport.connect.calls.count()).toBe(0);\n        expect(harness.transport.send.calls.count()).toBe(0);\n        expect(harness.transport.disconnect.calls.count()).toBe(0);\n        expect(harness.transport.state.calls.count() >= 0).toBe(true);\n      });\n\n      // Callbacks - N/A\n    });\n  });\n\n  describe(\"if the server feed is closing\", () => {\n    let harness;\n    let feed;\n    beforeEach(() => {\n      harness = harnessFactory();\n      harness.connectClient();\n      feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      feed.desireOpen();\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedOpenResponse\",\n          Success: true,\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Arg\" },\n          FeedData: { Feed: \"Data\" }\n        })\n      );\n      feed.desireClosed();\n    });\n\n    describe(\"if there is an invalid feed delta\", () => {\n      // State functions\n\n      it(\"state functions\", () => {\n        // Check state functions\n        expect(feed.desiredState()).toBe(\"closed\");\n        expect(feed.state()).toBe(\"closed\");\n        expect(() => {\n          feed.data();\n        }).toThrow(\n          new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n        );\n\n        // Have the transport emit a ActionRevelation with a bad delta\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"ActionRevelation\",\n            ActionName: \"SomeAction\",\n            ActionData: { Action: \"Data\" },\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" },\n            FeedDeltas: [\n              {\n                Operation: \"Set\",\n                Path: [\"an\", \"invalid\", \"path\"],\n                Value: 123\n              }\n            ]\n          })\n        );\n\n        // Check state functions\n        expect(feed.desiredState()).toBe(\"closed\");\n        expect(feed.state()).toBe(\"closed\");\n        expect(() => {\n          feed.data();\n        }).toThrow(\n          new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n        );\n      });\n\n      // Events - client and feed\n\n      it(\"events\", () => {\n        const clientListener = harness.createClientListener();\n        const feedListener = harness.createFeedListener(feed);\n\n        // Have the transport emit a ActionRevelation with a bad delta\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"ActionRevelation\",\n            ActionName: \"SomeAction\",\n            ActionData: { Action: \"Data\" },\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" },\n            FeedDeltas: [\n              {\n                Operation: \"Set\",\n                Path: [\"an\", \"invalid\", \"path\"],\n                Value: 123\n              }\n            ]\n          })\n        );\n\n        // Check client events\n        expect(clientListener.connecting.calls.count()).toBe(0);\n        expect(clientListener.connect.calls.count()).toBe(0);\n        expect(clientListener.disconnect.calls.count()).toBe(0);\n        expect(clientListener.disconnect.calls.argsFor(0).length).toBe(0);\n        expect(clientListener.badServerMessage.calls.count()).toBe(0); // Message discarded due to closing - never processed\n        expect(clientListener.badClientMessage.calls.count()).toBe(0);\n        expect(clientListener.transportError.calls.count()).toBe(0);\n\n        // Check feed events\n        expect(feedListener.opening.calls.count()).toBe(0);\n        expect(feedListener.open.calls.count()).toBe(0);\n        expect(feedListener.close.calls.count()).toBe(0);\n        expect(feedListener.action.calls.count()).toBe(0);\n      });\n\n      // Transport calls\n\n      it(\"transport calls\", () => {\n        harness.transport.spyClear();\n\n        // Have the transport emit a ActionRevelation with a bad delta\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"ActionRevelation\",\n            ActionName: \"SomeAction\",\n            ActionData: { Action: \"Data\" },\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" },\n            FeedDeltas: [\n              {\n                Operation: \"Set\",\n                Path: [\"an\", \"invalid\", \"path\"],\n                Value: 123\n              }\n            ]\n          })\n        );\n\n        // Check transport calls\n        expect(harness.transport.connect.calls.count()).toBe(0);\n        expect(harness.transport.send.calls.count()).toBe(0); // No need to FeedClose\n        expect(harness.transport.disconnect.calls.count()).toBe(0);\n        expect(harness.transport.state.calls.count() >= 0).toBe(true);\n      });\n\n      // Callbacks - N/A\n    });\n\n    describe(\"if there is an invalid feed data hash\", () => {\n      // State functions\n\n      it(\"state functions\", () => {\n        // Check state functions\n        expect(harness.client.state()).toBe(\"connected\");\n        expect(harness.client.id()).toBe(\"SOME_CLIENT_ID\");\n        expect(feed.desiredState()).toBe(\"closed\");\n        expect(feed.state()).toBe(\"closed\");\n        expect(() => {\n          feed.data();\n        }).toThrow(\n          new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n        );\n\n        // Have the transport emit a ActionRevelation with a bad hash\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"ActionRevelation\",\n            ActionName: \"SomeAction\",\n            ActionData: { Action: \"Data\" },\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" },\n            FeedDeltas: [\n              {\n                Operation: \"Set\",\n                Path: [\"validpath\"],\n                Value: 123\n              }\n            ],\n            FeedMd5: \"123456789012345678901234\"\n          })\n        );\n\n        // Check state functions\n        expect(harness.client.state()).toBe(\"connected\");\n        expect(harness.client.id()).toBe(\"SOME_CLIENT_ID\");\n        expect(feed.desiredState()).toBe(\"closed\");\n        expect(feed.state()).toBe(\"closed\");\n        expect(() => {\n          feed.data();\n        }).toThrow(\n          new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n        );\n      });\n\n      // Events - client and feed\n\n      it(\"events\", () => {\n        const clientListener = harness.createClientListener();\n        const feedListener = harness.createFeedListener(feed);\n\n        // Have the transport emit a ActionRevelation with a bad hash\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"ActionRevelation\",\n            ActionName: \"SomeAction\",\n            ActionData: { Action: \"Data\" },\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" },\n            FeedDeltas: [\n              {\n                Operation: \"Set\",\n                Path: [\"validpath\"],\n                Value: 123\n              }\n            ],\n            FeedMd5: \"123456789012345678901234\"\n          })\n        );\n\n        // Check client events\n        expect(clientListener.connecting.calls.count()).toBe(0);\n        expect(clientListener.connect.calls.count()).toBe(0);\n        expect(clientListener.disconnect.calls.count()).toBe(0);\n        expect(clientListener.disconnect.calls.argsFor(0).length).toBe(0);\n        expect(clientListener.badServerMessage.calls.count()).toBe(0); // Discarded before process\n        expect(clientListener.badClientMessage.calls.count()).toBe(0);\n        expect(clientListener.transportError.calls.count()).toBe(0);\n\n        // Check feed events\n        expect(feedListener.opening.calls.count()).toBe(0);\n        expect(feedListener.open.calls.count()).toBe(0);\n        expect(feedListener.close.calls.count()).toBe(0);\n        expect(feedListener.action.calls.count()).toBe(0);\n      });\n\n      // Transport calls\n\n      it(\"transport calls\", () => {\n        harness.transport.spyClear();\n\n        // Have the transport emit a ActionRevelation with a bad hash\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"ActionRevelation\",\n            ActionName: \"SomeAction\",\n            ActionData: { Action: \"Data\" },\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" },\n            FeedDeltas: [\n              {\n                Operation: \"Set\",\n                Path: [\"validpath\"],\n                Value: 123\n              }\n            ],\n            FeedMd5: \"123456789012345678901234\"\n          })\n        );\n\n        // Check transport calls\n        expect(harness.transport.connect.calls.count()).toBe(0);\n        expect(harness.transport.send.calls.count()).toBe(0); // No need to FeedClose\n        expect(harness.transport.disconnect.calls.count()).toBe(0);\n        expect(harness.transport.state.calls.count() >= 0).toBe(true);\n      });\n\n      // Callbacks - N/A\n    });\n\n    describe(\"if the revelation is valid\", () => {\n      // State functions\n\n      it(\"state functions\", () => {\n        // Check state functions\n        expect(harness.client.state()).toBe(\"connected\");\n        expect(harness.client.id()).toBe(\"SOME_CLIENT_ID\");\n        expect(feed.desiredState()).toBe(\"closed\");\n        expect(feed.state()).toBe(\"closed\");\n        expect(() => {\n          feed.data();\n        }).toThrow(\n          new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n        );\n\n        // Have the transport emit a valid ActionRevelation\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"ActionRevelation\",\n            ActionName: \"SomeAction\",\n            ActionData: { Action: \"Data\" },\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" },\n            FeedDeltas: [\n              {\n                Operation: \"Set\",\n                Path: [\"Feed\"],\n                Value: \"Data2\"\n              }\n            ],\n            FeedMd5: \"wh+CI4D0VYuSbmN8BzeSxA==\"\n          })\n        );\n\n        // Check state functions\n        expect(harness.client.state()).toBe(\"connected\");\n        expect(harness.client.id()).toBe(\"SOME_CLIENT_ID\");\n        expect(feed.desiredState()).toBe(\"closed\");\n        expect(feed.state()).toBe(\"closed\");\n        expect(() => {\n          feed.data();\n        }).toThrow(\n          new Error(\"INVALID_FEED_STATE: The feed object is not open.\")\n        );\n      });\n\n      // Events - client and feed\n\n      it(\"events\", () => {\n        const clientListener = harness.createClientListener();\n        const feedListener = harness.createFeedListener(feed);\n        const actionNameSpy = jasmine.createSpy();\n        feed.on(\"action:SomeAction\", actionNameSpy);\n\n        // Have the transport emit a valid ActionRevelation\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"ActionRevelation\",\n            ActionName: \"SomeAction\",\n            ActionData: { Action: \"Data\" },\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" },\n            FeedDeltas: [\n              {\n                Operation: \"Set\",\n                Path: [\"Feed\"],\n                Value: \"Data2\"\n              }\n            ],\n            FeedMd5: \"wh+CI4D0VYuSbmN8BzeSxA==\"\n          })\n        );\n\n        // Check client events\n        expect(clientListener.connecting.calls.count()).toBe(0);\n        expect(clientListener.connect.calls.count()).toBe(0);\n        expect(clientListener.disconnect.calls.count()).toBe(0);\n        expect(clientListener.disconnect.calls.argsFor(0).length).toBe(0);\n        expect(clientListener.badServerMessage.calls.count()).toBe(0);\n        expect(clientListener.badClientMessage.calls.count()).toBe(0);\n        expect(clientListener.transportError.calls.count()).toBe(0);\n\n        // Check feed events\n        expect(feedListener.opening.calls.count()).toBe(0);\n        expect(feedListener.open.calls.count()).toBe(0);\n        expect(feedListener.close.calls.count()).toBe(0);\n        expect(feedListener.action.calls.count()).toBe(0);\n        expect(actionNameSpy.calls.count()).toBe(0);\n      });\n\n      // Transport calls\n\n      it(\"transport calls\", () => {\n        harness.transport.spyClear();\n\n        // Have the transport emit a valid ActionRevelation\n        harness.transport.emit(\n          \"message\",\n          JSON.stringify({\n            MessageType: \"ActionRevelation\",\n            ActionName: \"SomeAction\",\n            ActionData: { Action: \"Data\" },\n            FeedName: \"SomeFeed\",\n            FeedArgs: { Feed: \"Arg\" },\n            FeedDeltas: [\n              {\n                Operation: \"Set\",\n                Path: [\"Feed\"],\n                Value: \"Data2\"\n              }\n            ],\n            FeedMd5: \"wh+CI4D0VYuSbmN8BzeSxA==\"\n          })\n        );\n\n        // Check transport calls\n        expect(harness.transport.connect.calls.count()).toBe(0);\n        expect(harness.transport.send.calls.count()).toBe(0);\n        expect(harness.transport.disconnect.calls.count()).toBe(0);\n        expect(harness.transport.state.calls.count() >= 0).toBe(true);\n      });\n\n      // Callbacks - N/A\n    });\n  });\n\n  afterEach(() => {\n    jasmine.clock().uninstall();\n  });\n});\n\ndescribe(\"Structurally/sequentially valid FeedTermination message\", () => {\n  describe(\"when the server feed is open\", () => {\n    let harness;\n    let feedWantedOpen;\n    let feedWantedClosed;\n    beforeEach(() => {\n      harness = harnessFactory();\n      harness.connectClient();\n      feedWantedOpen = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      feedWantedOpen.desireOpen();\n      feedWantedClosed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedOpenResponse\",\n          Success: true,\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Arg\" },\n          FeedData: { Feed: \"Data\" }\n        })\n      );\n    });\n    // State functions\n\n    it(\"state functions\", () => {\n      // Check state functions\n      expect(harness.client.state()).toBe(\"connected\");\n      expect(harness.client.id()).toBe(\"SOME_CLIENT_ID\");\n      expect(feedWantedOpen.desiredState()).toBe(\"open\");\n      expect(feedWantedOpen.state()).toBe(\"open\");\n      expect(feedWantedOpen.data()).toEqual({ Feed: \"Data\" });\n      expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n      expect(feedWantedClosed.state()).toBe(\"closed\");\n      expect(() => {\n        feedWantedClosed.data();\n      }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n\n      // Have the transport emit a FeedTermination\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedTermination\",\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Arg\" },\n          ErrorCode: \"SOME_ERROR_CODE\",\n          ErrorData: { Error: \"Data\" }\n        })\n      );\n\n      // Check state functions\n      expect(harness.client.state()).toBe(\"connected\");\n      expect(harness.client.id()).toBe(\"SOME_CLIENT_ID\");\n      expect(feedWantedOpen.desiredState()).toBe(\"open\");\n      expect(feedWantedOpen.state()).toBe(\"closed\");\n      expect(() => {\n        feedWantedOpen.data();\n      }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n      expect(feedWantedClosed.desiredState()).toBe(\"closed\");\n      expect(feedWantedClosed.state()).toBe(\"closed\");\n      expect(() => {\n        feedWantedClosed.data();\n      }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n    });\n\n    // Events - client and feed\n\n    it(\"events\", () => {\n      const clientListener = harness.createClientListener();\n      const feedWantedOpenListener = harness.createFeedListener(feedWantedOpen);\n      const feedWantedClosedListener = harness.createFeedListener(\n        feedWantedClosed\n      );\n\n      // Have the transport emit a FeedTermination\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedTermination\",\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Arg\" },\n          ErrorCode: \"SOME_ERROR_CODE\",\n          ErrorData: { Error: \"Data\" }\n        })\n      );\n\n      // Check client events\n      expect(clientListener.connecting.calls.count()).toBe(0);\n      expect(clientListener.connect.calls.count()).toBe(0);\n      expect(clientListener.disconnect.calls.count()).toBe(0);\n      expect(clientListener.disconnect.calls.argsFor(0).length).toBe(0);\n      expect(clientListener.badServerMessage.calls.count()).toBe(0);\n      expect(clientListener.badClientMessage.calls.count()).toBe(0);\n      expect(clientListener.transportError.calls.count()).toBe(0);\n\n      // Check feed events\n      expect(feedWantedOpenListener.opening.calls.count()).toBe(0);\n      expect(feedWantedOpenListener.open.calls.count()).toBe(0);\n      expect(feedWantedOpenListener.close.calls.count()).toBe(1);\n      expect(feedWantedOpenListener.close.calls.argsFor(0).length).toBe(1);\n      expect(feedWantedOpenListener.close.calls.argsFor(0)[0]).toEqual(\n        jasmine.any(Error)\n      );\n      expect(feedWantedOpenListener.close.calls.argsFor(0)[0].message).toBe(\n        \"TERMINATED: The server terminated the feed.\"\n      );\n      expect(feedWantedOpenListener.action.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.opening.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.open.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.close.calls.count()).toBe(0);\n      expect(feedWantedClosedListener.action.calls.count()).toBe(0);\n    });\n\n    // Transport calls\n\n    it(\"transport calls\", () => {\n      harness.transport.spyClear();\n\n      // Have the transport emit a FeedTermination\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedTermination\",\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Arg\" },\n          ErrorCode: \"SOME_ERROR_CODE\",\n          ErrorData: { Error: \"Data\" }\n        })\n      );\n\n      // Check transport calls\n      expect(harness.transport.connect.calls.count()).toBe(0);\n      expect(harness.transport.send.calls.count()).toBe(0);\n      expect(harness.transport.disconnect.calls.count()).toBe(0);\n      expect(harness.transport.state.calls.count() >= 0).toBe(true);\n    });\n\n    // Callbacks - N/A\n  });\n\n  describe(\"when the server feed is closing\", () => {\n    let harness;\n    let feed;\n    beforeEach(() => {\n      harness = harnessFactory();\n      harness.connectClient();\n      feed = harness.client.feed(\"SomeFeed\", { Feed: \"Arg\" });\n      feed.desireOpen();\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedOpenResponse\",\n          Success: true,\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Arg\" },\n          FeedData: { Feed: \"Data\" }\n        })\n      );\n      feed.desireClosed();\n    });\n    // State functions\n\n    it(\"state functions\", () => {\n      // Check state functions\n      expect(harness.client.state()).toBe(\"connected\");\n      expect(harness.client.id()).toBe(\"SOME_CLIENT_ID\");\n      expect(feed.desiredState()).toBe(\"closed\");\n      expect(feed.state()).toBe(\"closed\");\n      expect(() => {\n        feed.data();\n      }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n\n      // Have the transport emit a FeedTermination\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedTermination\",\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Arg\" },\n          ErrorCode: \"SOME_ERROR_CODE\",\n          ErrorData: { Error: \"Data\" }\n        })\n      );\n\n      // Check state functions\n      expect(harness.client.state()).toBe(\"connected\");\n      expect(harness.client.id()).toBe(\"SOME_CLIENT_ID\");\n      expect(feed.desiredState()).toBe(\"closed\");\n      expect(feed.state()).toBe(\"closed\");\n      expect(() => {\n        feed.data();\n      }).toThrow(new Error(\"INVALID_FEED_STATE: The feed object is not open.\"));\n    });\n\n    // Events - client and feed\n\n    it(\"events\", () => {\n      const clientListener = harness.createClientListener();\n      const feedListener = harness.createFeedListener(feed);\n\n      // Have the transport emit a FeedTermination\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedTermination\",\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Arg\" },\n          ErrorCode: \"SOME_ERROR_CODE\",\n          ErrorData: { Error: \"Data\" }\n        })\n      );\n\n      // Check client events\n      expect(clientListener.connecting.calls.count()).toBe(0);\n      expect(clientListener.connect.calls.count()).toBe(0);\n      expect(clientListener.disconnect.calls.count()).toBe(0);\n      expect(clientListener.disconnect.calls.argsFor(0).length).toBe(0);\n      expect(clientListener.badServerMessage.calls.count()).toBe(0);\n      expect(clientListener.badClientMessage.calls.count()).toBe(0);\n      expect(clientListener.transportError.calls.count()).toBe(0);\n\n      // Check feed events\n      expect(feedListener.opening.calls.count()).toBe(0);\n      expect(feedListener.open.calls.count()).toBe(0);\n      expect(feedListener.close.calls.count()).toBe(0);\n      expect(feedListener.action.calls.count()).toBe(0);\n    });\n\n    // Transport calls\n\n    it(\"transport calls\", () => {\n      harness.transport.spyClear();\n\n      // Have the transport emit a FeedTermination\n      harness.transport.emit(\n        \"message\",\n        JSON.stringify({\n          MessageType: \"FeedTermination\",\n          FeedName: \"SomeFeed\",\n          FeedArgs: { Feed: \"Arg\" },\n          ErrorCode: \"SOME_ERROR_CODE\",\n          ErrorData: { Error: \"Data\" }\n        })\n      );\n\n      // Check transport calls\n      expect(harness.transport.connect.calls.count()).toBe(0);\n      expect(harness.transport.send.calls.count()).toBe(0);\n      expect(harness.transport.disconnect.calls.count()).toBe(0);\n      expect(harness.transport.state.calls.count() >= 0).toBe(true);\n    });\n\n    // Callbacks - N/A\n  });\n});\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar global = require('../internals/global');\nvar isForced = require('../internals/is-forced');\nvar redefine = require('../internals/redefine');\nvar has = require('../internals/has');\nvar classof = require('../internals/classof-raw');\nvar inheritIfRequired = require('../internals/inherit-if-required');\nvar toPrimitive = require('../internals/to-primitive');\nvar fails = require('../internals/fails');\nvar create = require('../internals/object-create');\nvar getOwnPropertyNames = require('../internals/object-get-own-property-names').f;\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar defineProperty = require('../internals/object-define-property').f;\nvar trim = require('../internals/string-trim').trim;\n\nvar NUMBER = 'Number';\nvar NativeNumber = global[NUMBER];\nvar NumberPrototype = NativeNumber.prototype;\n\n// Opera ~12 has broken Object#toString\nvar BROKEN_CLASSOF = classof(create(NumberPrototype)) == NUMBER;\n\n// `ToNumber` abstract operation\n// https://tc39.github.io/ecma262/#sec-tonumber\nvar toNumber = function (argument) {\n  var it = toPrimitive(argument, false);\n  var first, third, radix, maxCode, digits, length, index, code;\n  if (typeof it == 'string' && it.length > 2) {\n    it = trim(it);\n    first = it.charCodeAt(0);\n    if (first === 43 || first === 45) {\n      third = it.charCodeAt(2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (it.charCodeAt(1)) {\n        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i\n        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i\n        default: return +it;\n      }\n      digits = it.slice(2);\n      length = digits.length;\n      for (index = 0; index < length; index++) {\n        code = digits.charCodeAt(index);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if (code < 48 || code > maxCode) return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\n// `Number` constructor\n// https://tc39.github.io/ecma262/#sec-number-constructor\nif (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {\n  var NumberWrapper = function Number(value) {\n    var it = arguments.length < 1 ? 0 : value;\n    var dummy = this;\n    return dummy instanceof NumberWrapper\n      // check on 1..constructor(foo) case\n      && (BROKEN_CLASSOF ? fails(function () { NumberPrototype.valueOf.call(dummy); }) : classof(dummy) != NUMBER)\n        ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);\n  };\n  for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES2015 (in case, if modules with ES2015 Number statics required before):\n    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'\n  ).split(','), j = 0, key; keys.length > j; j++) {\n    if (has(NativeNumber, key = keys[j]) && !has(NumberWrapper, key)) {\n      defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));\n    }\n  }\n  NumberWrapper.prototype = NumberPrototype;\n  NumberPrototype.constructor = NumberWrapper;\n  redefine(global, NUMBER, NumberWrapper);\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","var NATIVE_WEAK_MAP = require('../internals/native-weak-map');\nvar global = require('../internals/global');\nvar isObject = require('../internals/is-object');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar objectHas = require('../internals/has');\nvar sharedKey = require('../internals/shared-key');\nvar hiddenKeys = require('../internals/hidden-keys');\n\nvar WeakMap = global.WeakMap;\nvar set, get, has;\n\nvar enforce = function (it) {\n  return has(it) ? get(it) : set(it, {});\n};\n\nvar getterFor = function (TYPE) {\n  return function (it) {\n    var state;\n    if (!isObject(it) || (state = get(it)).type !== TYPE) {\n      throw TypeError('Incompatible receiver, ' + TYPE + ' required');\n    } return state;\n  };\n};\n\nif (NATIVE_WEAK_MAP) {\n  var store = new WeakMap();\n  var wmget = store.get;\n  var wmhas = store.has;\n  var wmset = store.set;\n  set = function (it, metadata) {\n    wmset.call(store, it, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return wmget.call(store, it) || {};\n  };\n  has = function (it) {\n    return wmhas.call(store, it);\n  };\n} else {\n  var STATE = sharedKey('state');\n  hiddenKeys[STATE] = true;\n  set = function (it, metadata) {\n    createNonEnumerableProperty(it, STATE, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return objectHas(it, STATE) ? it[STATE] : {};\n  };\n  has = function (it) {\n    return objectHas(it, STATE);\n  };\n}\n\nmodule.exports = {\n  set: set,\n  get: get,\n  has: has,\n  enforce: enforce,\n  getterFor: getterFor\n};\n","var global = require('../internals/global');\nvar inspectSource = require('../internals/inspect-source');\n\nvar WeakMap = global.WeakMap;\n\nmodule.exports = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));\n","module.exports = false;\n","var isObject = require('../internals/is-object');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\n\n// makes subclassing work correct for wrapped built-ins\nmodule.exports = function ($this, dummy, Wrapper) {\n  var NewTarget, NewTargetPrototype;\n  if (\n    // it can work only with native `setPrototypeOf`\n    setPrototypeOf &&\n    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this\n    typeof (NewTarget = dummy.constructor) == 'function' &&\n    NewTarget !== Wrapper &&\n    isObject(NewTargetPrototype = NewTarget.prototype) &&\n    NewTargetPrototype !== Wrapper.prototype\n  ) setPrototypeOf($this, NewTargetPrototype);\n  return $this;\n};\n","var anObject = require('../internals/an-object');\nvar aPossiblePrototype = require('../internals/a-possible-prototype');\n\n// `Object.setPrototypeOf` method\n// https://tc39.github.io/ecma262/#sec-object.setprototypeof\n// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nmodule.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {\n  var CORRECT_SETTER = false;\n  var test = {};\n  var setter;\n  try {\n    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;\n    setter.call(test, []);\n    CORRECT_SETTER = test instanceof Array;\n  } catch (error) { /* empty */ }\n  return function setPrototypeOf(O, proto) {\n    anObject(O);\n    aPossiblePrototype(proto);\n    if (CORRECT_SETTER) setter.call(O, proto);\n    else O.__proto__ = proto;\n    return O;\n  };\n}() : undefined);\n","var isObject = require('../internals/is-object');\n\nmodule.exports = function (it) {\n  if (!isObject(it) && it !== null) {\n    throw TypeError(\"Can't set \" + String(it) + ' as a prototype');\n  } return it;\n};\n","var anObject = require('../internals/an-object');\nvar defineProperties = require('../internals/object-define-properties');\nvar enumBugKeys = require('../internals/enum-bug-keys');\nvar hiddenKeys = require('../internals/hidden-keys');\nvar html = require('../internals/html');\nvar documentCreateElement = require('../internals/document-create-element');\nvar sharedKey = require('../internals/shared-key');\n\nvar GT = '>';\nvar LT = '<';\nvar PROTOTYPE = 'prototype';\nvar SCRIPT = 'script';\nvar IE_PROTO = sharedKey('IE_PROTO');\n\nvar EmptyConstructor = function () { /* empty */ };\n\nvar scriptTag = function (content) {\n  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;\n};\n\n// Create object with fake `null` prototype: use ActiveX Object with cleared prototype\nvar NullProtoObjectViaActiveX = function (activeXDocument) {\n  activeXDocument.write(scriptTag(''));\n  activeXDocument.close();\n  var temp = activeXDocument.parentWindow.Object;\n  activeXDocument = null; // avoid memory leak\n  return temp;\n};\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar NullProtoObjectViaIFrame = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = documentCreateElement('iframe');\n  var JS = 'java' + SCRIPT + ':';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  html.appendChild(iframe);\n  // https://github.com/zloirock/core-js/issues/475\n  iframe.src = String(JS);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(scriptTag('document.F=Object'));\n  iframeDocument.close();\n  return iframeDocument.F;\n};\n\n// Check for document.domain and active x support\n// No need to use active x approach when document.domain is not set\n// see https://github.com/es-shims/es5-shim/issues/150\n// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346\n// avoid IE GC bug\nvar activeXDocument;\nvar NullProtoObject = function () {\n  try {\n    /* global ActiveXObject */\n    activeXDocument = document.domain && new ActiveXObject('htmlfile');\n  } catch (error) { /* ignore */ }\n  NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();\n  var length = enumBugKeys.length;\n  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];\n  return NullProtoObject();\n};\n\nhiddenKeys[IE_PROTO] = true;\n\n// `Object.create` method\n// https://tc39.github.io/ecma262/#sec-object.create\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    EmptyConstructor[PROTOTYPE] = anObject(O);\n    result = new EmptyConstructor();\n    EmptyConstructor[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = NullProtoObject();\n  return Properties === undefined ? result : defineProperties(result, Properties);\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar definePropertyModule = require('../internals/object-define-property');\nvar anObject = require('../internals/an-object');\nvar objectKeys = require('../internals/object-keys');\n\n// `Object.defineProperties` method\n// https://tc39.github.io/ecma262/#sec-object.defineproperties\nmodule.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = objectKeys(Properties);\n  var length = keys.length;\n  var index = 0;\n  var key;\n  while (length > index) definePropertyModule.f(O, key = keys[index++], Properties[key]);\n  return O;\n};\n","var internalObjectKeys = require('../internals/object-keys-internal');\nvar enumBugKeys = require('../internals/enum-bug-keys');\n\n// `Object.keys` method\n// https://tc39.github.io/ecma262/#sec-object.keys\nmodule.exports = Object.keys || function keys(O) {\n  return internalObjectKeys(O, enumBugKeys);\n};\n","var fails = require('../internals/fails');\nvar classof = require('../internals/classof-raw');\n\nvar split = ''.split;\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nmodule.exports = fails(function () {\n  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346\n  // eslint-disable-next-line no-prototype-builtins\n  return !Object('z').propertyIsEnumerable(0);\n}) ? function (it) {\n  return classof(it) == 'String' ? split.call(it, '') : Object(it);\n} : Object;\n","var toIndexedObject = require('../internals/to-indexed-object');\nvar toLength = require('../internals/to-length');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\n\n// `Array.prototype.{ indexOf, includes }` methods implementation\nvar createMethod = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIndexedObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) {\n      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.includes` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.includes\n  includes: createMethod(true),\n  // `Array.prototype.indexOf` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof\n  indexOf: createMethod(false)\n};\n","var getBuiltIn = require('../internals/get-built-in');\n\nmodule.exports = getBuiltIn('document', 'documentElement');\n","var global = require('../internals/global');\n\nmodule.exports = global;\n","'use strict';\nvar nativePropertyIsEnumerable = {}.propertyIsEnumerable;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// Nashorn ~ JDK8 bug\nvar NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);\n\n// `Object.prototype.propertyIsEnumerable` method implementation\n// https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable\nexports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {\n  var descriptor = getOwnPropertyDescriptor(this, V);\n  return !!descriptor && descriptor.enumerable;\n} : nativePropertyIsEnumerable;\n","var requireObjectCoercible = require('../internals/require-object-coercible');\nvar whitespaces = require('../internals/whitespaces');\n\nvar whitespace = '[' + whitespaces + ']';\nvar ltrim = RegExp('^' + whitespace + whitespace + '*');\nvar rtrim = RegExp(whitespace + whitespace + '*$');\n\n// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation\nvar createMethod = function (TYPE) {\n  return function ($this) {\n    var string = String(requireObjectCoercible($this));\n    if (TYPE & 1) string = string.replace(ltrim, '');\n    if (TYPE & 2) string = string.replace(rtrim, '');\n    return string;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.{ trimLeft, trimStart }` methods\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart\n  start: createMethod(1),\n  // `String.prototype.{ trimRight, trimEnd }` methods\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trimend\n  end: createMethod(2),\n  // `String.prototype.trim` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trim\n  trim: createMethod(3)\n};\n","// a string of all valid unicode whitespaces\n// eslint-disable-next-line max-len\nmodule.exports = '\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n","var $ = require('../internals/export');\n\n// `Number.MAX_SAFE_INTEGER` constant\n// https://tc39.github.io/ecma262/#sec-number.max_safe_integer\n$({ target: 'Number', stat: true }, {\n  MAX_SAFE_INTEGER: 0x1FFFFFFFFFFFFF\n});\n","var has = require('../internals/has');\nvar ownKeys = require('../internals/own-keys');\nvar getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');\nvar definePropertyModule = require('../internals/object-define-property');\n\nmodule.exports = function (target, source) {\n  var keys = ownKeys(source);\n  var defineProperty = definePropertyModule.f;\n  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));\n  }\n};\n","var getBuiltIn = require('../internals/get-built-in');\nvar getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');\nvar getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');\nvar anObject = require('../internals/an-object');\n\n// all object keys, includes non-enumerable and symbols\nmodule.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {\n  var keys = getOwnPropertyNamesModule.f(anObject(it));\n  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\n  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;\n};\n","exports.f = Object.getOwnPropertySymbols;\n","'use strict';\nvar $ = require('../internals/export');\nvar isObject = require('../internals/is-object');\nvar isArray = require('../internals/is-array');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toLength = require('../internals/to-length');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar createProperty = require('../internals/create-property');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('slice', { ACCESSORS: true, 0: 0, 1: 2 });\n\nvar SPECIES = wellKnownSymbol('species');\nvar nativeSlice = [].slice;\nvar max = Math.max;\n\n// `Array.prototype.slice` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.slice\n// fallback for not array-like ES3 strings and DOM objects\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {\n  slice: function slice(start, end) {\n    var O = toIndexedObject(this);\n    var length = toLength(O.length);\n    var k = toAbsoluteIndex(start, length);\n    var fin = toAbsoluteIndex(end === undefined ? length : end, length);\n    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible\n    var Constructor, result, n;\n    if (isArray(O)) {\n      Constructor = O.constructor;\n      // cross-realm fallback\n      if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {\n        Constructor = undefined;\n      } else if (isObject(Constructor)) {\n        Constructor = Constructor[SPECIES];\n        if (Constructor === null) Constructor = undefined;\n      }\n      if (Constructor === Array || Constructor === undefined) {\n        return nativeSlice.call(O, k, fin);\n      }\n    }\n    result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));\n    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);\n    result.length = n;\n    return result;\n  }\n});\n","var NATIVE_SYMBOL = require('../internals/native-symbol');\n\nmodule.exports = NATIVE_SYMBOL\n  // eslint-disable-next-line no-undef\n  && !Symbol.sham\n  // eslint-disable-next-line no-undef\n  && typeof Symbol.iterator == 'symbol';\n","var global = require('../internals/global');\nvar userAgent = require('../internals/engine-user-agent');\n\nvar process = global.process;\nvar versions = process && process.versions;\nvar v8 = versions && versions.v8;\nvar match, version;\n\nif (v8) {\n  match = v8.split('.');\n  version = match[0] + match[1];\n} else if (userAgent) {\n  match = userAgent.match(/Edge\\/(\\d+)/);\n  if (!match || match[1] >= 74) {\n    match = userAgent.match(/Chrome\\/(\\d+)/);\n    if (match) version = match[1];\n  }\n}\n\nmodule.exports = version && +version;\n","var getBuiltIn = require('../internals/get-built-in');\n\nmodule.exports = getBuiltIn('navigator', 'userAgent') || '';\n","'use strict';\nvar $ = require('../internals/export');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toInteger = require('../internals/to-integer');\nvar toLength = require('../internals/to-length');\nvar toObject = require('../internals/to-object');\nvar arraySpeciesCreate = require('../internals/array-species-create');\nvar createProperty = require('../internals/create-property');\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('splice', { ACCESSORS: true, 0: 0, 1: 2 });\n\nvar max = Math.max;\nvar min = Math.min;\nvar MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;\nvar MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';\n\n// `Array.prototype.splice` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.splice\n// with adding support of @@species\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {\n  splice: function splice(start, deleteCount /* , ...items */) {\n    var O = toObject(this);\n    var len = toLength(O.length);\n    var actualStart = toAbsoluteIndex(start, len);\n    var argumentsLength = arguments.length;\n    var insertCount, actualDeleteCount, A, k, from, to;\n    if (argumentsLength === 0) {\n      insertCount = actualDeleteCount = 0;\n    } else if (argumentsLength === 1) {\n      insertCount = 0;\n      actualDeleteCount = len - actualStart;\n    } else {\n      insertCount = argumentsLength - 2;\n      actualDeleteCount = min(max(toInteger(deleteCount), 0), len - actualStart);\n    }\n    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {\n      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);\n    }\n    A = arraySpeciesCreate(O, actualDeleteCount);\n    for (k = 0; k < actualDeleteCount; k++) {\n      from = actualStart + k;\n      if (from in O) createProperty(A, k, O[from]);\n    }\n    A.length = actualDeleteCount;\n    if (insertCount < actualDeleteCount) {\n      for (k = actualStart; k < len - actualDeleteCount; k++) {\n        from = k + actualDeleteCount;\n        to = k + insertCount;\n        if (from in O) O[to] = O[from];\n        else delete O[to];\n      }\n      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];\n    } else if (insertCount > actualDeleteCount) {\n      for (k = len - actualDeleteCount; k > actualStart; k--) {\n        from = k + actualDeleteCount - 1;\n        to = k + insertCount - 1;\n        if (from in O) O[to] = O[from];\n        else delete O[to];\n      }\n    }\n    for (k = 0; k < insertCount; k++) {\n      O[k + actualStart] = arguments[k + 2];\n    }\n    O.length = len - actualDeleteCount + insertCount;\n    return A;\n  }\n});\n","var requireObjectCoercible = require('../internals/require-object-coercible');\n\n// `ToObject` abstract operation\n// https://tc39.github.io/ecma262/#sec-toobject\nmodule.exports = function (argument) {\n  return Object(requireObjectCoercible(argument));\n};\n","var isObject = require('../internals/is-object');\nvar isArray = require('../internals/is-array');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar SPECIES = wellKnownSymbol('species');\n\n// `ArraySpeciesCreate` abstract operation\n// https://tc39.github.io/ecma262/#sec-arrayspeciescreate\nmodule.exports = function (originalArray, length) {\n  var C;\n  if (isArray(originalArray)) {\n    C = originalArray.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    else if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);\n};\n"],"sourceRoot":""}